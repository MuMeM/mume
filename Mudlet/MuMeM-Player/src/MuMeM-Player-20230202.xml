<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>MuMeM.Player</name>
			<packageName></packageName>
			<script>--[[
    All information about the player, like Vitals, Name, Status, ...
    
    DEPENDENCIES:
      - MuMeM.Log
--]]

echo("MuMeM.Player: loading\n")

MuMeM = MuMeM or {}
MuMeM.Player = MuMeM.Player or {}
MuMeM.Player.EventHandler = MuMeM.Player.EventHandler or {}

-- --- Module setup ----------------------------------------------

MuMeM.Player.module_name = "MuMeM.Player"
MuMeM.Player.module_dependencies = {"MuMeM.Log"}
MuMeM.modules = MuMeM.modules or {}
MuMeM.modules[MuMeM.Player.module_name] = MuMeM.modules[MuMeM.Player.module_name] or {module=MuMeM.Player}</script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>MuMeM.Player.Library</name>
				<packageName></packageName>
				<script>--[[
hp           current health points (*)
maxhp        maximum health points
mana         current mana points (*)
maxmana      maximum mana points
mp           current movement points (*)
maxmp        maximum movement points
xp           current experience points
tp           current travel points
carrying     string describing how heavy load you are carrying 
              (heavy -&gt; really heavy -&gt; painful)
ride         true if currently riding; otherwise false
ridden       true if currently ridden by someone; otherwise false
climb        null, "c", or "C"
swim         null, "s", or "S"
light        "*", "!", ")", or "o"
fog          null, "-" or "="
weather      "~", "'", "\"", or "*"
alertness    "normal", "careful", etc.
mood         "wimpy", "prudent", etc.
spell-effort	"quick", "fast", etc.
--]]

-- ### INITIALIZATION #############################################################

function MuMeM.Player.initialize()
  MuMeM.Player.reset()
end

function MuMeM.Player.reset()
  MuMeM.Player._hp = nil
  MuMeM.Player._maxhp = nil
  MuMeM.Player._sp = nil
  MuMeM.Player._maxsp = nil
  MuMeM.Player._mp = nil
  MuMeM.Player._maxmp = nil
  MuMeM.Player._xp = nil
  MuMeM.Player._tp = nil
  MuMeM.Player._carrying = nil
  MuMeM.Player._ride = nil
  MuMeM.Player._ridden = nil
  MuMeM.Player._climb = nil
  MuMeM.Player._swim = nil
  MuMeM.Player._light = nil
  MuMeM.Player._fog= nil
  MuMeM.Player._weather = nil
  MuMeM.Player._alertness = nil
  MuMeM.Player._mood = nil
  MuMeM.Player._spellEffort = nil
end

local function player_setvalue(key, value, eventName)
  if value ~= MuMeM.Player[key] then
    MuMeM.Player[key] = value
    raiseEvent("MuMeM.Player."..eventName)
  end
end

-- ### HP #########################################################################

function MuMeM.Player.hp()
  return MuMeM.Player._hp
end

function MuMeM.Player.setHp(hp)
  player_setvalue("_hp", hp, "Hp")
end

function MuMeM.Player.gmcp_set_hp(hp)
  MuMeM.Player.setHp(hp)
end

function MuMeM.Player.maxHp()
  return MuMeM.Player._maxhp
end

function MuMeM.Player.setMaxHp(maxhp)
  player_setvalue("_maxhp", maxhp, "MaxHp")
end

function MuMeM.Player.gmcp_set_maxhp(maxhp)
  MuMeM.Player.setMaxHp(maxhp)
end

-- ### SP (MANA) ###################################################################

function MuMeM.Player.sp()
  return MuMeM.Player._sp
end

function MuMeM.Player.setSp(sp)
  player_setvalue("_sp", sp, "Sp")
end

function MuMeM.Player.gmcp_set_mana(sp)
  MuMeM.Player.setSp(sp)
end

function MuMeM.Player.maxSp()
  return MuMeM.Player._maxsp
end

function MuMeM.Player.setMaxSp(maxsp)
  player_setvalue("_maxsp", maxsp, "MaxSp")
end

function MuMeM.Player.gmcp_set_maxmana(maxsp)
  MuMeM.Player.setMaxSp(maxsp)
end

-- ### MP ##########################################################################

function MuMeM.Player.mp()
  return MuMeM.Player._mp
end

function MuMeM.Player.setMp(mp)
  player_setvalue("_mp", mp, "Mp")
end

function MuMeM.Player.gmcp_set_mp(mp)
  MuMeM.Player.setMp(mp)
end

function MuMeM.Player.maxMp()
  return MuMeM.Player._maxmp
end

function MuMeM.Player.setMaxMp(maxmp)
  player_setvalue("_maxmp", maxmp, "MaxMp")
end

function MuMeM.Player.gmcp_set_maxmp(maxmp)
  MuMeM.Player.setMaxMp(maxmp)
end

-- ### XP ##########################################################################

function MuMeM.Player.xp()
  return MuMeM.Player._xp
end

function MuMeM.Player.setXp(xp)
  player_setvalue("_xp", xp, "Xp")
end

function MuMeM.Player.gmcp_set_xp(xp)
  MuMeM.Player.setXp(xp)
end

-- ### TP ##########################################################################

function MuMeM.Player.tp()
  return MuMeM.Player._tp
end

function MuMeM.Player.setTp(tp)
  player_setvalue("_tp", tp, "Tp")
end

function MuMeM.Player.gmcp_set_tp(tp)
  MuMeM.Player.setTp(tp)
end

-- ### CARRYING ####################################################################

function MuMeM.Player.carrying()
  return MuMeM.Player._carrying
end

function MuMeM.Player.setCarrying(carrying)
  player_setvalue("_carrying", carrying, "Carrying")
end

function MuMeM.Player.gmcp_set_carrying(carrying)
  MuMeM.Player.setCarrying(carrying)
end

-- ### RIDE ########################################################################

function MuMeM.Player.ride()
  return MuMeM.Player._ride
end

function MuMeM.Player.setRide(ride)
  player_setvalue("_ride", ride, "Ride")
end

function MuMeM.Player.gmcp_set_ride(ride)
  MuMeM.Player.setRide(ride)
end

-- ### RIDDEN ######################################################################

function MuMeM.Player.ridden()
  return MuMeM.Player._ridden
end

function MuMeM.Player.setRidden(ridden)
  player_setvalue("_ridden", ridden, "Ridden")
end

function MuMeM.Player.gmcp_set_ridden(ridden)
  MuMeM.Player.setRidden(ridden)
end

-- ### CLIMB ########################################################################

function MuMeM.Player.climb()
  return MuMeM.Player._climb
end

function MuMeM.Player.setClimb(climb)
  if type(climb) == "userdata" then
    climb = false
  end
  player_setvalue("_climb", climb, "Climb")
end

function MuMeM.Player.gmcp_set_climb(climb)
  MuMeM.Player.setClimb(climb)
end

-- ### SWIM #########################################################################

function MuMeM.Player.swim()
  return MuMeM.Player._swim
end

function MuMeM.Player.setSwim(swim)
  player_setvalue("_swim", swim, "Swim")
end

function MuMeM.Player.gmcp_set_swim(swim)
  MuMeM.Player.setSwim(swim)
end

-- ### LIGHT ########################################################################

function MuMeM.Player.light()
  return MuMeM.Player._light
end

function MuMeM.Player.setLight(light)
  player_setvalue("_light", light, "Light")
end

function MuMeM.Player.gmcp_set_light(light)
  MuMeM.Player.setLight(light)
end

-- ### FOG ##########################################################################

function MuMeM.Player.fog()
  return MuMeM.Player._fog
end

function MuMeM.Player.setFog(fog)
  player_setvalue("_fog", fog, "Fog")
end

function MuMeM.Player.gmcp_set_fog(fog)
  MuMeM.Player.setFog(fog)
end

-- ### WEATHER ######################################################################

function MuMeM.Player.weather()
  return MuMeM.Player._weather
end

function MuMeM.Player.setWeather(weather)
  player_setvalue("_weather", weather, "Weather")
end

function MuMeM.Player.gmcp_set_weather(weather)
  MuMeM.Player.setFog(weather)
end

-- ### FOG ##########################################################################

function MuMeM.Player.alertness()
  return MuMeM.Player._alterness
end

function MuMeM.Player.setAlertness(alertness)
  player_setvalue("_alertness", alertness, "Alertness")
end

function MuMeM.Player.gmcp_set_alertness(alertness)
  MuMeM.Player.setFog(alertness)
end

-- ### MOOD #########################################################################

function MuMeM.Player.mood()
  return MuMeM.Player._mood
end

function MuMeM.Player.setMood(mood)
  player_setvalue("_mood", mood, "Mood")
end

function MuMeM.Player.gmcp_set_mood(mood)
  MuMeM.Player.setMood(mood)
end

-- ### SPELL-EFFORT ##################################################################

function MuMeM.Player.spellEffort()
  return MuMeM.Player._spellEffort
end

function MuMeM.Player.setSpellEffort(spellEffort)
  player_setvalue("_spellEffort", spellEffort, "spellEffort")
end

function MuMeM.Player.gmcp_set_spell_effort(spellEffort)
  MuMeM.Player.setSpellEffort(spellEffort)
end


-- ### RAISE TRIGGER ##################################################################

--[[
    I am not sure yet how to do this:
      - notify on every SINGLE event (hp, sp, ...)
      - notify after the BATCH update (all vitals)
      
    TODO / IDEA : Pass the changed values in the arguments!!!
                 -&gt; raiseEvent("MuMeM.Player.Vitals", {Hp,MaxHp,Carrying))
--]]

function MuMeM.Player.notifyVitals()
  raiseEvent("MuMeM.Player.Vitals")
 
end</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>MuMeM.Player.EventHandler</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Player.EventHandler.Connect</name>
					<packageName></packageName>
					<script>function MuMeM.Player.EventHandler.Connect(event, ...)
    -- happens when the profile becomes available and player connects
  -- CAVEAT: MMapper stays connected!
  if event == "sysConnectionEvent" then
    MuMeM.Player.reset()
  end

  -- happens when GMCP becomes available, which is "normally" at login!
  -- CAVEAT: This can also happen during gameplay (enable / disable protocol)
  if event == "sysProtocolEnabled" and arg[1] == "GMCP" then
    MuMeM.Player.reset()
  end
end</script>
					<eventHandlerList>
						<string>sysConnectionEvent</string>
					</eventHandlerList>
				</Script>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
</MudletPackage>
