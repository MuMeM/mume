<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>MuMeM.Prompt</name>
			<packageName></packageName>
			<script>--[[
    Displays a "graphical prompt" at the bottom of the screen.
    The line contains the usual information you would suspect from a prompt.
--]]

mumem_inherit = mumem_inherit or function (className, baseName)
  local classObj = loadstring("return " .. className)()
  local baseObj = loadstring("return " .. baseName)()

  if className ~= baseName then
    setmetatable(classObj, baseObj)
    classObj.__index = classObj
  end
  
  if className == baseName then
    classObj.parentClass = "BASE"
  else
    classObj.parentClass = baseObj
  end
  classObj.className = className
end

mumem_isa = mumem_isa or function (classObj, className)
  if classObj == nil then
    return false
  elseif classObj == "BASE" then
    return false
  elseif type(classObj) ~= "table" then
    return false
  elseif classObj.parentClass == nil then             -- this can loop!
    return nil
  elseif classObj.className == className then
    return true
  end
  return mumem_isa(classObj.parentClass, className)
end

-- --- Module setup ----------------------------------------------

MuMeM = MuMeM or {}
MuMeM.Prompt = MuMeM.Prompt or {}
MuMeM.Prompt.EventHandler = MuMeM.Prompt.EventHandler or {}
MuMeM.Prompt.Status = MuMeM.Prompt.Status or {}
MuMeM.Prompt.visuals = MuMeM.Prompt.visuals or {}

MuMeM.Prompt.command = MuMeM.Prompt.command or tempAlias("^mprompt$", function() MuMeM.Prompt.Preferences.Dialog.show() end)


--MuMeM.Prompt.setupPrompt(false)

-- --- Module registration -----------------------------------------

MuMeM.Prompt.module_name = "MuMeM.Prompt"
MuMeM.Prompt.module_dependencies = {"MuMeM.Core","MuMeM.Log","MuMeM.GMCP","MuMeM.Player","MuMeM.Room","MuMeM.Widget"}
MuMeM.modules = MuMeM.modules or {}
MuMeM.modules[MuMeM.Prompt.module_name] = MuMeM.modules[MuMeM.Prompt.module_name] or {module=MuMeM.Prompt}</script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>MuMeM.Prompt.Library</name>
				<packageName></packageName>
				<script>function MuMeM.Prompt.initialize()
  if MuMeM.Core.IO.nodeExists(getMudletHomeDir().."/MuMeM.Prompt") then
    MuMeM.Prompt.resourceDir = getMudletHomeDir().."/MuMeM.Prompt/Resources"
  else
    MuMeM.Prompt.resourceDir = getMudletHomeDir().."/MuMeM-Prompt/Resources"
  end
  
  MuMeM.Prompt.Layout.Manager.initialize()
end

function MuMeM.Prompt.configure()
  MuMeM.Prompt.Preferences.load()
end

function MuMeM.Prompt.getResourceDir()
  return MuMeM.Prompt.resourceDir
end

function MuMeM.Prompt.setupPrompt()
  MuMeM.Prompt.Layout.Manager.build()
end

function MuMeM.Prompt.showPreferences()
  MuMeM.Prompt.disableEditMode()
  
  MuMeM.Prompt.Config.PanelDialog.close()
  MuMeM.Prompt.Preferences.Dialog.show()
end

function MuMeM.Prompt.enableEditMode()
  local activeLayoutName = MuMeM.Prompt.Layout.Manager.activeLayoutName()
  
  if activeLayoutName and MuMeM.Prompt.Layout.Manager.isMasterLayout(activeLayoutName) then
    return
  end
  
  MuMeM.Prompt.Preferences.Dialog.hide()
  MuMeM.Prompt.Config.PanelDialog.open()
  MuMeM.Prompt.Layout.Manager.enableEditMode()
end

function MuMeM.Prompt.disableEditMode()
  MuMeM.Prompt.Layout.Manager.disableEditMode()
  MuMeM.Prompt.Config.Factory.closeAll()
  MuMeM.Prompt.Config.PanelDialog.close()
  MuMeM.Prompt.Preferences.Dialog.hide()
end</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>MuMeM.Prompt.Widget</name>
				<packageName></packageName>
				<script>MuMeM.Prompt.Widget = MuMeM.Prompt.Widget or {
  ELASTICITY_FIXED = 1,
  ELASTICITY_FLEXIBLE = 2,
  
  ICON_ORIGIN_BACKGROUND = 1,
  ICON_ORIGIN_BORDER = 2,
  
  BOUNDARY_CALCULATION_PERCENTAGE = 1,
  BOUNDARY_CALCULATION_ABSOLUTE = 2,
}</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.WidthCons</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.WidthCons = MuMeM.Prompt.Widget.WidthCons or 
{
  _elasticity = MuMeM.Prompt.Widget.ELASTICITY_FIXED,
  _fixedWidth = 0,
  _minWidth = 0,
  _maxWidth = 999,
  _ratio = 1000,
  _realWidth = 0,
} 

mumem_inherit("MuMeM.Prompt.Widget.WidthCons", "MuMeM.Prompt.Widget.WidthCons")

function MuMeM.Prompt.Widget.WidthCons:new(props)
  local me = props or {}
      
  setmetatable(me, self)
  self.__index = self
 
  return me
end

function MuMeM.Prompt.Widget.WidthCons:elasticity()
  return self._elasticity
end

function MuMeM.Prompt.Widget.WidthCons:fixedWidth()
  return self._fixedWidth
end

function MuMeM.Prompt.Widget.WidthCons:flexibleWidth()
  return self._minWidth, self._maxWidth, self._ratio
end

function MuMeM.Prompt.Widget.WidthCons:setFixed(width)
  self._elasticity = MuMeM.Prompt.Widget.ELASTICITY_FIXED
  self._fixedWidth = width
  self._realWidth = width
end

function MuMeM.Prompt.Widget.WidthCons:setFlexible(minWidth, maxWidth, ratio)
  self._elasticity = MuMeM.Prompt.Widget.ELASTICITY_FLEXIBLE
  self._minWidth = minWidth or 0
  self._maxWidth = maxWidth or 9999
  self._ratio = ratio or 1000
  self._realWidth = minWidth
end

function MuMeM.Prompt.Widget.WidthCons:setRealWidth(width)
  --[[
        DO NOT CALL YOURSELF, used by Layout.Manager to update sizes (and reposition)
  ]]--
  self._realWidth = width
end

function MuMeM.Prompt.Widget.WidthCons:width()
  return self._realWidth
end

function MuMeM.Prompt.Widget.WidthCons:asString()
  if self:elasticity() == MuMeM.Prompt.Widget.ELASTICITY_FIXED then
    return string.format("fixed, %dpx", self._fixedWidth) 
  else
    return string.format("elastic, min %dpx, max %dpx, ratio %d", self._minWidth, self._maxWidth, self._ratio)
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.Widget</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.Widget = MuMeM.Prompt.Widget.Widget or 
{
  _name = null,
  _x = 0,
  _y = 0,
  _height = 20,
  _widthCons = false,
  _marginLeft = 0,
  _marginRight = 0,
    
  _panel = false,
  _eventHandlers = false,
 
  _editMode = false,
  _editText = "EDIT",                       -- send to update() when edit enabled
  activeEditWidget = false,                 -- static!

  classSelectable = false,                  -- can this class be selected for prompt (CLASS-VARIABLE)
} 

mumem_inherit("MuMeM.Prompt.Widget.Widget", "MuMeM.Prompt.Widget.Widget")

function MuMeM.Prompt.Widget.Widget:new(props)
  local me = props or {}
  
  if props._eventHandlers == nil then
    me._eventHandlers = {}
  end
  
  me._name = me._name or MuMeM.Prompt.Layout.Manager.nameGen("Widget")
  
  me._widthCons = MuMeM.Prompt.Widget.WidthCons:new({})
  me._widthCons:setFixed(50)
    
  setmetatable(me, self)
  self.__index = self
 
  return me
end

function MuMeM.Prompt.Widget.Widget:create()
  self._x = self:panel():offsetLeft()

  --print(self:name(), self:absX(), self:absY(), self:width(), self:height(), true)
  --createLabel(self:name(), self:absX(), self:absY(), self:width(), self:height(), true)
  --createLabel(self:name(), self:absX(), self:absY(), self:width(), self:height(), true)
  --setBackgroundColor(self:name(), Geyser.Color.parse("yellow"))
end

function MuMeM.Prompt.Widget.Widget:configure(config)
  -- configure after new() and create()
end

function MuMeM.Prompt.Widget.Widget:name()
  return self._name
end

function MuMeM.Prompt.Widget.Widget:panel()
  return self._panel
end

function MuMeM.Prompt.Widget.Widget:widthCons()
  return self._widthCons
end

function MuMeM.Prompt.Widget.Widget:x()
  return self._x
end

function MuMeM.Prompt.Widget.Widget:y()
  return self._y
end

function MuMeM.Prompt.Widget.Widget:width()
  return self:marginLeft() + self:contentWidth() + self:marginRight()
end

function MuMeM.Prompt.Widget.Widget:height()
  return self._height
end

function MuMeM.Prompt.Widget.Widget:marginLeft()
  return self._marginLeft
end

function MuMeM.Prompt.Widget.Widget:marginRight()
  return self._marginRight
end

function MuMeM.Prompt.Widget.Widget:setMarginLeft(margin)
  self._marginLeft = margin
  raiseEvent("MuMeM.Prompt.Widget.GeometryChanged", self)
end

function MuMeM.Prompt.Widget.Widget:setMarginRight(margin)
  self._marginRight = margin
  raiseEvent("MuMeM.Prompt.Widget.GeometryChanged", self)
end

function MuMeM.Prompt.Widget.Widget:contentX()
  return self:marginLeft()
end

function MuMeM.Prompt.Widget.Widget:contentY()
  return 0
end

function MuMeM.Prompt.Widget.Widget:contentWidth()
  return self._widthCons:width()
end

function MuMeM.Prompt.Widget.Widget:contentHeight()
  return self:height()
end

function MuMeM.Prompt.Widget.Widget:absX()
  return self:panel():absX() + self:x()
end

function MuMeM.Prompt.Widget.Widget:absY()
  return self:panel():absY() + self:y()
end

function MuMeM.Prompt.Widget.Widget:absContentX()
  return self:panel():absX() + self:x() + self:contentX()
end

function MuMeM.Prompt.Widget.Widget:absContentY()
  return self:panel():absY() + self:y() + self:contentY()
end

function MuMeM.Prompt.Widget.Widget:reposition(x)
  self._x = x
  
  if windowType(self:name()) then
    moveWindow(self:name(), self:absX(), self:absY())
    resizeWindow(self:name(), self:width(), self:height())
  end

  if windowType(self:name()..":Edit") then
    moveWindow(self:name()..":Edit", self:absX(), self:absY())
    resizeWindow(self:name()..":Edit", self:width(), self:height())
  end
end

function MuMeM.Prompt.Widget.Widget:overrideStyleSheetData(styleSheet, styleSheetOverrides)
  local geyserStyleSheet = Geyser.StyleSheet:new(styleSheet)

  for k,v in pairs(styleSheetOverrides) do
    geyserStyleSheet:set(k, v)
  end
    
  return geyserStyleSheet:getCSS()
end

function MuMeM.Prompt.Widget.Widget:applyStyleSheetToLabel(labelName, styleSheet, styleSheetOverrides)
  if styleSheetOverrides then
    styleSheet = self:overrideStyleSheetData(styleSheet, styleSheetOverrides)
  end
  
  setLabelStyleSheet(labelName, styleSheet)
end

function MuMeM.Prompt.Widget.Widget:registerEventHandler(event, func, oneShot)
  table.insert(self._eventHandlers, registerAnonymousEventHandler(event, func, oneShot))
end

function MuMeM.Prompt.Widget.Widget:update()
  -- ABSTRACT !!!
  -- this method must be able to handle situations where NO params are passed (for "init")
  MuMeM.Log.warning("MuMeM.Prompt.Widget.Widget:update()() not overridden for "..self:name(), "MuMeM.Comm")
end

function MuMeM.Prompt.Widget.Widget:teardown()
  for _,ehId in pairs(self._eventHandlers) do
    killAnonymousEventHandler(ehId)
  end
  
  self:disableEditMode()
  
  if windowType(self._name) then
    hideWindow(self._name)
    deleteLabel(self._name)
  end
end

-- ################################################################################################

function MuMeM.Prompt.Widget.Widget:editMode()
  return self._editMode
end

function MuMeM.Prompt.Widget.Widget:editText()
  return self._editText
end

function MuMeM.Prompt.Widget.Widget:enableEditMode()
  if self:editMode() then
    return
  end
  
  self._editMode = true

  local editLabelName = self:name()..":Edit"
  createLabel(editLabelName, self:absX(), self:absY(), self:width(), self:height(), false)
  
  setLabelStyleSheet(editLabelName, [[
    QLabel {
    }
    QLabel::hover {
      border: 1px dashed white;
    }
  ]])
  
  setLabelClickCallback(editLabelName, function() self:edit() end)
  
  self:update(self:editText())
end

function MuMeM.Prompt.Widget.Widget:disableEditMode()
  if self:editMode() then
    self._editMode = false
    deleteLabel(self:name()..":Edit")
    
    if self == MuMeM.Prompt.Widget.Widget.activeEditWidget then
      MuMeM.Prompt.Widget.Widget.activeEditWidget = false
    end

    self:update()
  end
end

function MuMeM.Prompt.Widget.Widget:setAsActiveEdit()
  setLabelStyleSheet(self:name()..":Edit", [[
    QLabel {
      border: 1px dashed yellow;
    }
    QLabel::hover {
      border: 1px dashed white;
    }
  ]]) 
  MuMeM.Prompt.Widget.Widget.activeEditWidget = self
end

function MuMeM.Prompt.Widget.Widget:removeAsActiveEdit()
  setLabelStyleSheet(self:name()..":Edit", [[
    QLabel {
    }
    QLabel::hover {
      border: 1px dashed white;
    }
  ]])
  MuMeM.Prompt.Widget.Widget.activeEditWidget = false
end

function MuMeM.Prompt.Widget.Widget:edit()
  if MuMeM.Prompt.Widget.Widget.activeEditWidget then
    MuMeM.Prompt.Widget.Widget.activeEditWidget:removeAsActiveEdit()
  end
  self:setAsActiveEdit()

  MuMeM.Prompt.Config.Factory.configureMe(self)
end

-- ################################################################################################

function MuMeM.Prompt.Widget.Widget:assembleWidgetDefinition()
  local widgetDefinition = {
          className = self.className,
          marginLeft = self._marginLeft,
          marginRight = self._marginRight,
          widthHint = {"="},
        }
  
  return widgetDefinition
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.TextWidget</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.TextWidget = MuMeM.Prompt.Widget.TextWidget or 
{
  _textLabelName = "undefined",

  _text = "",
  _textStyleSheet = [[
    background-color: black;
    color: white;
    font-size: 12pt;
    qproperty-alignment: 'AlignHCenter | AlignVCenter';
  ]],
} 

mumem_inherit("MuMeM.Prompt.Widget.TextWidget", "MuMeM.Prompt.Widget.Widget")

function MuMeM.Prompt.Widget.TextWidget:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("TextWidget")
  
  props._textLabelName = f"{props._name}:Text"
    
  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  me._widthCons:setFixed(10)

  return me
end
  
function MuMeM.Prompt.Widget.TextWidget:create()
  MuMeM.Prompt.Widget.TextWidget.parentClass.create(self)

  createLabel(self._textLabelName, 
              self:absContentX(), self:absContentY(), self:contentWidth(), self:contentHeight(), true)
    
  self:setText(self:text(), true)
  self:applyTextStyleSheet()
end

function MuMeM.Prompt.Widget.TextWidget:reposition(x)
  MuMeM.Prompt.Widget.TextWidget.parentClass.reposition(self, x)
  
  moveWindow(self._textLabelName, self:absContentX(), self:absContentY())
  resizeWindow(self._textLabelName, self:contentWidth(), self:contentHeight())
end

function MuMeM.Prompt.Widget.TextWidget:text()
  return self._text
end

function MuMeM.Prompt.Widget.TextWidget:setText(text, force)
  if self._text ~= text or force then
    self._text = text
    echo(self._textLabelName, text)
  end
end

function MuMeM.Prompt.Widget.TextWidget:textStyleSheet()
  return self._textStyleSheet
end

function MuMeM.Prompt.Widget.TextWidget:setTextStyleSheet(textStyleSheet)
  self._textStyleSheet = textStyleSheet
end

function MuMeM.Prompt.Widget.TextWidget:applyTextStyleSheet(textStyleSheetOverrides)
  self:applyStyleSheetToLabel(self._textLabelName, self:textStyleSheet())
end

function MuMeM.Prompt.Widget.TextWidget:teardown()
  hideWindow(self._textLabelName)
  deleteLabel(self._textLabelName)

  MuMeM.Prompt.Widget.TextWidget.parentClass.teardown(self)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.IconWidget</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.IconWidget = MuMeM.Prompt.Widget.IconWidget or 
{
  _iconDir = false,
  _icon = "",
  
  _iconLabelName = "undefined",
  
  _iconMap = nil,
  
  _contentStyleSheet = false,
  
  _iconStyleSheet = false,
  _iconStyleSheetBorder = [[
    border-image: url({iconPath}) 0 0 0 0 stretch stretch;
    background-color: black;
  ]],
  _iconStyleSheetBackground = [[
    background-image: url({iconPath});
    background-repeat: no;
    background-position: center;
    background-color: darkGray;
    border: 1px solid white;
  ]],
} 

mumem_inherit("MuMeM.Prompt.Widget.IconWidget", "MuMeM.Prompt.Widget.Widget")

function MuMeM.Prompt.Widget.IconWidget:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("TextWidget")
  props._iconOrigin = props._iconOrigin or MuMeM.Prompt.Widget.ICON_ORIGIN_BORDER

  props._iconLabelName = f"{props._name}:Icon"
    
  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  me._widthCons:setFixed(20)

  return me
end
  
function MuMeM.Prompt.Widget.IconWidget:create()
  MuMeM.Prompt.Widget.IconWidget.parentClass.create(self)

  createLabel(self._iconLabelName, 
              self:absContentX(), self:absContentY(), self:contentWidth(), self:contentHeight(), true)
              
  self:setIcon(self:icon())
  self:applyIconStyleSheet()
  
  setWindow(self._name, self._iconLabelName)
end

function MuMeM.Prompt.Widget.IconWidget:reposition(x)
  MuMeM.Prompt.Widget.TextWidget.parentClass.reposition(self, x)
  
  moveWindow(self._iconLabelName, self:absContentX(), self:absContentY())
  resizeWindow(self._iconLabelName, self:contentWidth(), self:contentHeight())
end

function MuMeM.Prompt.Widget.IconWidget:iconDir()
  if self._iconDir == false then
    return nil
  end
  
  return self._iconDir
end

function MuMeM.Prompt.Widget.IconWidget:icon()
  return self._icon
end

function MuMeM.Prompt.Widget.IconWidget:setIcon(icon)
  if self._icon ~= icon then
    self._icon = icon
  end
end

function MuMeM.Prompt.Widget.IconWidget:iconOrigin()
  return self._iconOrigin
end

function MuMeM.Prompt.Widget.IconWidget:setIconOrigin(iconOrigin)
  self._iconOrigin = iconOrigin
end

function MuMeM.Prompt.Widget.IconWidget:iconStyleSheet()
  if self._iconStyleSheet then
    return self._iconStyleSheet
  elseif self:iconOrigin() == MuMeM.Prompt.Widget.ICON_ORIGIN_BORDER then
    return self._iconStyleSheetBorder
  else
    return self._iconStyleSheetBackground
  end
end

function MuMeM.Prompt.Widget.IconWidget:setIconStyleSheet(iconStyleSheet)
  self._iconStyleSheet = iconStyleSheet
end

function MuMeM.Prompt.Widget.IconWidget:getIconPath()
  if self:iconDir() then
    return MuMeM.Core.IO.concatPath(MuMeM.Prompt.getResourceDir(), self:iconDir(), self:icon())
  end

  return MuMeM.Core.IO.concatPath(MuMeM.Prompt.getResourceDir(), self:icon())
end

function MuMeM.Prompt.Widget.IconWidget:applyStatusIcon(iconIndex, styleSheetOverrides)
  local icon = self._iconMap[iconIndex] or self._iconMap.UNKNONWN
  
  self:setIcon(icon)
  self:applyIconStyleSheet(styleSheetOverrides)
end

function MuMeM.Prompt.Widget.IconWidget:applyIconStyleSheet(iconStyleSheetOverrides)
  local iconStyleSheet = Geyser.StyleSheet:new(self:iconStyleSheet())

  local iconPath = self:getIconPath()
  
  if self:iconOrigin() == MuMeM.Prompt.Widget.ICON_ORIGIN_BORDER then
    iconStyleSheet:set("border-image", f[[url({iconPath}) 0 0 0 0 stretch stretch]])
  else
    iconStyleSheet:set("background-image", f[[url({iconPath})]])
  end
  
  if iconStyleSheetOverrides then
    for k,v in pairs(iconStyleSheetOverrides) do
      iconStyleSheet:set(k, v)
    end
  end
  
  setLabelStyleSheet(self._iconLabelName, iconStyleSheet:getCSS())
end

function MuMeM.Prompt.Widget.IconWidget:teardown()
  hideWindow(self._iconLabelName)
  deleteLabel(self._iconLabelName)

  MuMeM.Prompt.Widget.IconWidget.parentClass.teardown(self)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.Gauge0</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.Gauge0 = MuMeM.Prompt.Widget.Gauge0 or 
{
  _valueMax     = 100,
  _valueNow     = 100,
  _isHidden     = false,

  _bars         = false,                      -- { [N] = {barName = "foo", styleSheet = "CSS"}, ...}
  
  _scaleIsHidden      = false,
  _scaleLowLabelName  = "scaleLow",
  _scaleHighLabelName = "scaleHigh",
  _scaleColor         = "black",
  _boundaries         = nil,
 
  _scaleStyleSheet = [[
    background-color: transparent;
    border-right: 2px solid black;
    border-left: 2px solid black;
  ]],
} 

mumem_inherit("MuMeM.Prompt.Widget.Gauge0", "MuMeM.Prompt.Widget.Widget")

MuMeM.Prompt.Widget.Gauge0.HEALTH_MAP = {
  ["healthy"] = 100,
  ["fine"] = 70,
  ["hurt"] = 45,
  ["wounded"] = 25,
  ["bad"] = 10,
  ["awful"] = 0,
  ["dying"] = -1, 
}

function MuMeM.Prompt.Widget.Gauge0:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("Gauge0")

  props._valueMax = 100
  props._valueNow = 100
  
  props._boundaries = props._boundaries or { 100, 70, 45, 25, 10, 0}
  
  props._bars = {
    { barName = "bar1", styleSheet = "background-color: blue;"    },
    { barName = "bar2", styleSheet = "background-color: magenta;" },
  }
  
  props._scaleLowLabelName  = f"{props._name}:ScaleLow"
  props._scaleHighLabelName = f"{props._name}:ScaleHigh"

  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  me._widthCons:setFlexible(50,400)

  return me
end

function MuMeM.Prompt.Widget.Gauge0:create()
  MuMeM.Prompt.Widget.Gauge0.parentClass.create(self)
  
  self:createBars()
  self:createScale()
end

function MuMeM.Prompt.Widget.Gauge0:configure(config)
  for _,bar in pairs(self._bars) do
    if config[bar.barName] and config[bar.barName].color then
      self:setBarColor(bar.barName, config[bar.barName].color)
    end
  end
end
  
function MuMeM.Prompt.Widget.Gauge0:createBars()
  for n,bar in pairs(self._bars) do
    bar.labelName = self:name()..":"..bar.barName
    createLabel(bar.labelName, 
                self:absContentX(), self:absContentY(), self:contentWidth(), self:contentHeight(), true)
    self:applyBarStyleSheet(n)
  end
end

function MuMeM.Prompt.Widget.Gauge0:createScale()
  createLabel(self._scaleLowLabelName, self:absContentX(), self:absContentY(), 0, 0, true)
  createLabel(self._scaleHighLabelName, self:absContentX(), self:absContentY(), 0, 0, true)

  self:applyStyleSheetToLabel(self._scaleLowLabelName, self:scaleStyleSheet())
  self:applyStyleSheetToLabel(self._scaleHighLabelName, self:scaleStyleSheet())
  
  self:repositionScale()
end

function MuMeM.Prompt.Widget.Gauge0:reposition(x)
  MuMeM.Prompt.Widget.Gauge0.parentClass.reposition(self, x)

  for n,bar in pairs(self._bars) do
    moveWindow(bar.labelName, self:absContentX(), self:absContentY())
  end

  resizeWindow(self._bars[1].labelName, self:contentWidth(), self:contentHeight())

  self:repositionScale()
  
  if not self:isHidden() then
    self:setValue(self._valueNow, self._valueMax, true)
  end
end

function MuMeM.Prompt.Widget.Gauge0:barNameToNumber(barName)
  for n,bar in pairs(self._bars) do
    if bar.barName == barName then
      return n
    end
  end
  
  return nil
end

function MuMeM.Prompt.Widget.Gauge0:addBar(barName, barStyleSheet)
  table.insert(self._bars, {barName=barName, styleSheet=barStyleSheet})
end

function MuMeM.Prompt.Widget.Gauge0:barColor(bar)
  if type(bar) == "string" then
    bar = self:barNameToNumber(bar)
  end
      
  return Geyser.StyleSheet:new(self._bars[bar].styleSheet):get("background-color")
end

function MuMeM.Prompt.Widget.Gauge0:setBarColor(bar, color)
  if type(bar) == "string" then
    bar = self:barNameToNumber(bar)
  end
  
  if self._bars[bar] then
    self._bars[bar].styleSheet = 
                self:overrideStyleSheetData(self._bars[bar].styleSheet, {["background-color"]=color})
    self:applyBarStyleSheet(bar)
  end
end

function MuMeM.Prompt.Widget.Gauge0:setScaleBorder(color, width, style)
  color = color or "black"
  width = width or "2px"
  style = style or "solid"
  
  local overrideData = {
    ["border-left"]  = f"{width} {style} {color};",
    ["border-right"] = f"{width} {style} {color};",
  }
  
  self._scaleStyleSheet = self:overrideStyleSheetData(self._scaleStyleSheet, overrideData)
end

function MuMeM.Prompt.Widget.Gauge0:barStyleSheet(bar)
  if type(bar) == "string" then
    bar = self:barNameToNumber(bar)
  end
  
  return self._bars[bar].styleSheet
end

function MuMeM.Prompt.Widget.Gauge0:scaleStyleSheet()
  return self._scaleStyleSheet
end

function MuMeM.Prompt.Widget.Gauge0:applyBarStyleSheet(bar, textStyleSheetOverrides)
  if type(bar) == "string" then
    bar = self:barNameToNumber(bar)
  end

  if self._bars[bar] and self._bars[bar].labelName then       -- exists and is :create()'d!
    self:applyStyleSheetToLabel(self._bars[bar].labelName, self:barStyleSheet(bar))
  end
end

function MuMeM.Prompt.Widget.Gauge0:isHidden()
  return self._isHidden
end

function MuMeM.Prompt.Widget.Gauge0:show()
  if self:isHidden() then
    self._isHidden = false
    
    for n,bar in pairs(self._bars) do
      showWindow(bar.labelName)
    end

    showWindow(self._scaleLowLabelName)
    showWindow(self._scaleHighLabelName)
  end
end

function MuMeM.Prompt.Widget.Gauge0:hide()
  if not self:isHidden() then
    self._isHidden = true
    
    hideWindow(self._scaleLowLabelName)
    hideWindow(self._scaleHighLabelName)
    
    for n,bar in pairs(self._bars) do
      hideWindow(bar.labelName)
    end
  end
end

function MuMeM.Prompt.Widget.Gauge0:showScale()
  if self._scaleIsHidden then
    self._scaleIsHidden = false
    showWindow(self._scaleLowLabelName)
    showWindow(self._scaleHighLabelName)
  end
end

function MuMeM.Prompt.Widget.Gauge0:hideScale()
  if not self._scaleIsHidden then
    self._scaleIsHidden = true
    hideWindow(self._scaleLowLabelName)
    hideWindow(self._scaleHighLabelName)
  end
end

function MuMeM.Prompt.Widget.Gauge0:resizeBarAbsolute(barLabelName, valueNow, valueMax)
  local width = math.floor(valueNow * self:contentWidth() / valueMax)
  local height = self:contentHeight()
  
  resizeWindow(barLabelName, width, height)
end

function MuMeM.Prompt.Widget.Gauge0:resizeBarPercentage(barLabelName, valuePerc)
  local width = math.floor(valuePerc * self:contentWidth() / 100)
  local height = self:contentHeight()
  
  resizeWindow(barLabelName, width, height)
end

function MuMeM.Prompt.Widget.Gauge0:repositionScaleBar(scaleLabelName, bLow, bHigh)
  -- ABSTRACT
end

function MuMeM.Prompt.Widget.Gauge0:repositionScale()
  -- ABSTRACT
end

function MuMeM.Prompt.Widget.Gauge0:setValue(now, max)
  -- ABSTRACT
end

function MuMeM.Prompt.Widget.Gauge0:teardown()
  hideWindow(self._scaleLowLabelName)
  deleteLabel(self._scaleLowLabelName)
  hideWindow(self._scaleHighLabelName)
  deleteLabel(self._scaleHighLabelName)

  for n,bar in pairs(self._bars) do
    hideWindow(bar.labelName)
    deleteLabel(bar.labelName)  
  end

  MuMeM.Prompt.Widget.Gauge0.parentClass.teardown(self)
end


-- ################################################################################################

function MuMeM.Prompt.Widget.Gauge0:assembleWidgetDefinition()
  local widgetDefinition = MuMeM.Prompt.Widget.Gauge0.parentClass.assembleWidgetDefinition(self)
  
  for n,bar in pairs(self._bars) do
    widgetDefinition[bar.barName] = {color = self:barColor(n)}
  end
  
  return widgetDefinition
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.Gauge2</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.Gauge2 = MuMeM.Prompt.Widget.Gauge2 or {} 

mumem_inherit("MuMeM.Prompt.Widget.Gauge2", "MuMeM.Prompt.Widget.Gauge0")

MuMeM.Prompt.Widget.Gauge2.healthMap = {
  ["healthy"] = 100,
  ["fine"] = 99,
  ["hurt"] = 70,
  ["wounded"] = 45,
  ["bad"] = 25,
  ["awful"] = 10,
  ["dying"] = 0, 
}

function MuMeM.Prompt.Widget.Gauge2:new(props)
  local me = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("Gauge2")
    
  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  return me
end

function MuMeM.Prompt.Widget.Gauge2:repositionScaleBar(scaleLabelName, bLow, bHigh)
  --local scaleX = math.floor(bLow * self:contentWidth() / 100)                     -- 1px border
  local scaleX = math.floor(bLow * self:contentWidth() / 100) - 1                 -- 2px border
  local scaleWidth = math.floor(bHigh * self:contentWidth() / 100) - scaleX + 1
  local scaleHeight = math.floor(self:contentHeight() * 40 / 100)
  local scaleY = self:contentHeight() - scaleHeight
    
  moveWindow(scaleLabelName, self:absContentX() + scaleX, self:absContentY() + scaleY)
  resizeWindow(scaleLabelName, scaleWidth, scaleHeight)
end

function MuMeM.Prompt.Widget.Gauge2:repositionScale()
  self:repositionScaleBar(self._scaleLowLabelName, self._boundaries[5], self._boundaries[4] )
  self:repositionScaleBar(self._scaleHighLabelName, self._boundaries[3], self._boundaries[2] )
end

function MuMeM.Prompt.Widget.Gauge2:setValue(now, max, force)
  max = max or 100
  
  if now == nil then
    self:hide()
    return
  end
  
  if type(now) == "string" then
    if MuMeM.Prompt.Widget.Gauge2.healthMap[now] then
      now = MuMeM.Prompt.Widget.Gauge2.healthMap[now]
    else
      return
    end
  end

  self:show()

  if (now == self._valueNow and max == self._valueMax) and not force then
    return
  end

  self._valueNow = math.max(math.min(now,max),0)  
  self._valueMax = max
  
  if self._valueMax &gt; 0 then
    local frontWidth = self._valueNow * 100 / self._valueMax
    
    if frontWidth &gt;= 100 then
      frontWidth = 100
    elseif frontWidth &lt;= 0 then
      frontWidth = 0
    end

    self:resizeBarPercentage(self._bars[2].labelName, frontWidth)
  else
    self:resizeBarPercentage(self._bars[2].labelName, 0)
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.Gauge3</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.Gauge3 = MuMeM.Prompt.Widget.Gauge3 or 
{
  _boundaryCalculation = MuMeM.Prompt.Widget.BOUNDARY_CALCULATION_PERCENTAGE,
  
  _markerIsHidden = false,
} 

mumem_inherit("MuMeM.Prompt.Widget.Gauge3", "MuMeM.Prompt.Widget.Gauge0")


function MuMeM.Prompt.Widget.Gauge3:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("Gauge3")

  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  me:addBar("bar3", [[background-color: yellow;]])
  me:addBar("marker", [[background-color: white;]])
   
  return me
end

function MuMeM.Prompt.Widget.Gauge3:createBars()
  MuMeM.Prompt.Widget.Gauge3.parentClass.createBars(self)

  resizeWindow(self._bars[4].labelName, 2, 5)
end

function MuMeM.Prompt.Widget.Gauge3:resizeBarAbsolute(barLabelName, valueNow, valueMax)
  local width = math.floor(valueNow * self:contentWidth() / valueMax)
  local height = self:contentHeight()
  
  resizeWindow(barLabelName, width, height)
end

function MuMeM.Prompt.Widget.Gauge3:resizeBarPercentage(barLabelName, valuePerc)
  local width = math.floor(valuePerc * self:contentWidth() / 100)
  local height = self:contentHeight()
  
  resizeWindow(barLabelName, width, height)
end

function MuMeM.Prompt.Widget.Gauge3:repositionPercentageScaleBar(scaleLabelName, bLow, bHigh)
  --local scaleX = math.floor(bLow * self:contentWidth() / 100)                     -- 1px border
  local scaleX = math.floor(bLow * self:contentWidth() / 100) - 1                 -- 2px border
  local scaleWidth = math.floor(bHigh * self:contentWidth() / 100) - scaleX + 1
  local scaleHeight = math.floor(self:contentHeight() * 40 / 100)
  local scaleY = self:contentHeight() - scaleHeight
    
  moveWindow(scaleLabelName, self:absContentX() + scaleX, self:absContentY() + scaleY)
  resizeWindow(scaleLabelName, scaleWidth, scaleHeight)
end

function MuMeM.Prompt.Widget.Gauge3:repositionAbsoluteScaleBar(scaleLabelName, bLow, bHigh)
  --local scaleX = math.floor(bLow * self:contentWidth() / self._valueMax)          -- 1px border
  local scaleX = math.floor(bLow * self:contentWidth() / self._valueMax) - 1       -- 2px border
  local scaleWidth = math.floor(bHigh * self:contentWidth() / self._valueMax) - scaleX + 1
  local scaleHeight = math.floor(self:contentHeight() * 40 / 100)
  local scaleY = self:contentHeight() - scaleHeight
    
  moveWindow(scaleLabelName, self:absContentX() + scaleX, self:absContentY() + scaleY)
  resizeWindow(scaleLabelName, scaleWidth, scaleHeight)
end

function MuMeM.Prompt.Widget.Gauge3:repositionScale()
  if self._boundaryCalculation == MuMeM.Prompt.Widget.BOUNDARY_CALCULATION_PERCENTAGE then
    self:repositionPercentageScaleBar(self._scaleLowLabelName, self._boundaries[5], self._boundaries[4] )
    self:repositionPercentageScaleBar(self._scaleHighLabelName, self._boundaries[3], self._boundaries[2] )
  elseif self._boundaryCalculation == MuMeM.Prompt.Widget.BOUNDARY_CALCULATION_ABSOLUTE then
    self:repositionAbsoluteScaleBar(self._scaleLowLabelName, self._boundaries[5], self._boundaries[4] )
    self:repositionAbsoluteScaleBar(self._scaleHighLabelName, self._boundaries[3], self._boundaries[2] )
  end
end

function MuMeM.Prompt.Widget.Gauge3:showMarker()
  if self._markerIsHidden then
    sel._markerIsHidden = false
    
    showWindow(self._bars[4].labelName)
  end
end

function MuMeM.Prompt.Widget.Gauge3:hideMarker()
  if not self._markerIsHidden then
    sel._markerIsHidden = true
    
    hideWindow(self._bars[4].labelName)
  end
end

function MuMeM.Prompt.Widget.Gauge3:positionMarkerAbsolute(pos, max)
  local markerX = math.floor(pos * self:contentWidth() / max) - 1
  local markerY = 0
  
  if pos == max then
    markerX = markerX - 1
  elseif pos &lt;= 0 then
    markerX = 0
  end

  moveWindow(self._bars[4].labelName, self:absContentX() + markerX, self:absContentY() + markerY)
end

function MuMeM.Prompt.Widget.Gauge3:positionMarkerPercentage(pos)
  local markerX = math.floor(pos * self:contentWidth() / 100) - 1
  local markerY = 0
  
  if pos == 100 then
    markerX = self:contentWidth() - 2
  elseif pos == 0 then
    markerX = 0
  end

  moveWindow(self._bars[4].labelName, self:absContentX() + markerX, self:absContentY() + markerY)
end


function MuMeM.Prompt.Widget.Gauge3:setValue(now, max, force)
  if now == nil or max == nil or now == false or max == false then
    return
  elseif (now == self._valueNow and max == self._valueMax) and not force then
    return
  elseif self:editMode() and not force then
    return
  end
  
  local prevValueMax = self._valueMax
  local prevValueNow = self._valueNow

  self._valueMax = math.max(max, 0)
  self._valueNow = math.min(math.max(now, -1), self._valueMax)

  if self._valueNow == self._valueMax then
    self:resizeBarAbsolute(self._bars[2].labelName, self._valueNow, self._valueMax)
    self:resizeBarAbsolute(self._bars[3].labelName, self._valueNow, self._valueMax)
    self:positionMarkerAbsolute(self._valueNow, self._valueMax)
  elseif self._valueNow &lt; 0 then
    self:resizeBarAbsolute(self._bars[2].labelName, 0, self._valueMax)
    self:resizeBarAbsolute(self._bars[3].labelName, 0, self._valueMax)
    self:positionMarkerAbsolute(0, self._valueMax)
  elseif self._boundaryCalculation == MuMeM.Prompt.Widget.BOUNDARY_CALCULATION_ABSOLUTE then
    local upperUpper = self._valueMax
    local i,upper = next(self._boundaries)
    while i and upper &gt; self._valueNow do
      upperUpper = upper
      i,upper = next(self._boundaries,i)
    end
    if i then 
      self:resizeBarAbsolute(self._bars[2].labelName, math.min(upperUpper, self._valueMax), self._valueMax)
      self:resizeBarAbsolute(self._bars[3].labelName, upper, self._valueMax)
    else
      self:resizeBarAbsolute(self._bars[2].labelName, upperUpper, self._valueMax)
      self:resizeBarAbsolute(self._bars[3].labelName, 0, self._valueMax)
    end
    
    if MuMeM.Player.position == "fighting" then
      if self._valueNow ~= math.floor(self._valueMax * upper / 100) then
       self:positionMarkerAbsolute(self._valueNow, self._valueMax)     
      elseif prevValueNow &lt; self._valueNow then
        self:positionMarkerAbsolute(upper, self._valueMax)
      elseif prevValueNow &gt;= upperUpper then
        self:positionMarkerAbsolute(upperUpper, self._valueMax)
      end
    else
      self:positionMarkerAbsolute(self._valueNow, self._valueMax)
    end

    if self._valueMax ~= prevValueMax and self._valueMax ~= 0 then  -- at valueMax == 0 we hide scale below
      self:repositionScale()
    end
  elseif self._boundaryCalculation == MuMeM.Prompt.Widget.BOUNDARY_CALCULATION_PERCENTAGE then
    local upperUpper = 100
    local i,upper = next(self._boundaries)
    while i and math.floor(self._valueMax * upper / 100) &gt; self._valueNow  do
      upperUpper = upper
      i,upper = next(self._boundaries,i)
    end
    if i then
      self:resizeBarPercentage(self._bars[2].labelName, upperUpper)
      self:resizeBarPercentage(self._bars[3].labelName, upper)
    else
      self:resizeBarPercentage(self._bars[2].labelName, upperUpper)
      self:resizeBarPercentage(self._bars[3].labelName, 0)
    end
    
    if MuMeM.Player.position() == "fighting" then
      if self._valueNow ~= math.floor(self._valueMax * upper / 100) then
       self:positionMarkerAbsolute(self._valueNow, self._valueMax)     
      elseif prevValueNow &lt; self._valueNow then
        self:positionMarkerPercentage(upper)
      elseif prevValueNow &gt;= math.floor(self._valueMax * upperUpper / 100) then
        self:positionMarkerPercentage(upperUpper)
      end
    else
      self:positionMarkerAbsolute(self._valueNow, self._valueMax)
    end
  end
    
  if self._valueMax == 0 then
    self:hideScale()
  else
    self:showScale()
  end
end

-- ################################################################################################

function MuMeM.Prompt.Widget.Gauge3:enableEditMode()
  MuMeM.Prompt.Widget.Gauge3.parentClass.enableEditMode(self)
  
  self:setValue(35, 100, true)
end

function MuMeM.Prompt.Widget.Gauge3:disableEditMode()
  MuMeM.Prompt.Widget.Gauge3.parentClass.disableEditMode(self)

  self:update()
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.Gauge5</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.Gauge5 = MuMeM.Prompt.Widget.Gauge5 or 
{
  _boundaryCalculation = MuMeM.Prompt.Widget.BOUNDARY_CALCULATION_PERCENTAGE,
  
  _markerIsHidden = false,
} 

mumem_inherit("MuMeM.Prompt.Widget.Gauge5", "MuMeM.Prompt.Widget.Gauge0")


function MuMeM.Prompt.Widget.Gauge5:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("Gauge5")
  props._valueMax = 100

  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  me:addBar("bar3", [[background-color: yellow;]])
   
  return me
end

function MuMeM.Prompt.Widget.Gauge5:resizeBarPercentage(barLabelName, valuePerc)
  local width = math.floor(valuePerc * self:contentWidth() / 100)
  local height = self:contentHeight()
  
  resizeWindow(barLabelName, width, height)
end

function MuMeM.Prompt.Widget.Gauge5:repositionPercentageScaleBar(scaleLabelName, bLow, bHigh)
  --local scaleX = math.floor(bLow * self:contentWidth() / 100)                     -- 1px border
  local scaleX = math.floor(bLow * self:contentWidth() / 100) - 1                 -- 2px border
  local scaleWidth = math.floor(bHigh * self:contentWidth() / 100) - scaleX + 1
  local scaleHeight = math.floor(self:contentHeight() * 40 / 100)
  local scaleY = self:contentHeight() - scaleHeight
    
  moveWindow(scaleLabelName, self:absContentX() + scaleX, self:absContentY() + scaleY)
  resizeWindow(scaleLabelName, scaleWidth, scaleHeight)
end

function MuMeM.Prompt.Widget.Gauge5:repositionScale()
  self:repositionPercentageScaleBar(self._scaleLowLabelName, self._boundaries[5], self._boundaries[4] )
  self:repositionPercentageScaleBar(self._scaleHighLabelName, self._boundaries[3], self._boundaries[2] )
end

function MuMeM.Prompt.Widget.Gauge5:setValue(now, force)
  if type(now) == "string" then
    now = MuMeM.Prompt.Widget.Gauge0.HEALTH_MAP[now] or 100
  end

  if now == nil or now == false then
    self:hide()
    return
  end
  
  if now == self._valueNow and not force then
    return
  elseif self:editMode() and not force then
    return
  end
  
  self:show()
  
  self._valueNow = math.min(math.max(now, -1), self._valueMax)

  if self._valueNow == self._valueMax then
    self:resizeBarPercentage(self._bars[2].labelName, self._valueNow)
    self:resizeBarPercentage(self._bars[3].labelName, self._valueNow)
  elseif self._valueNow &lt; 0 then
    self:resizeBarPercentage(self._bars[2].labelName, 0)
    self:resizeBarPercentage(self._bars[3].labelName, 0)
  else
    local upperUpper = 100
    local i,upper = next(self._boundaries)
    while i and math.floor(self._valueMax * upper / 100) &gt; self._valueNow  do
      upperUpper = upper
      i,upper = next(self._boundaries,i)
    end
    if i then
      self:resizeBarPercentage(self._bars[2].labelName, upperUpper)
      self:resizeBarPercentage(self._bars[3].labelName, upper)
    else
      self:resizeBarPercentage(self._bars[2].labelName, upperUpper)
      self:resizeBarPercentage(self._bars[3].labelName, 0)
    end
  end
end

-- ################################################################################################

function MuMeM.Prompt.Widget.Gauge5:enableEditMode()
  MuMeM.Prompt.Widget.Gauge5.parentClass.enableEditMode(self)
  
  self:setValue("hurt", true)
end

function MuMeM.Prompt.Widget.Gauge5:disableEditMode()
  MuMeM.Prompt.Widget.Gauge3.parentClass.disableEditMode(self)

  self:update()
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.Spacer</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.Spacer = MuMeM.Prompt.Widget.Spacer or 
{
  _textStyleSheet = [[
    background-color: green;
    color: white;
    font-size: 10pt;
    qproperty-alignment: 'AlignHCenter | AlignVCenter';
  ]],
} 

mumem_inherit("MuMeM.Prompt.Widget.Spacer", "MuMeM.Prompt.Widget.TextWidget")

function MuMeM.Prompt.Widget.Spacer:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("Spacer")
    
  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  me._widthCons:setFlexible(5, 200)

  return me
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>MuMeM.Prompt.Layout</name>
				<packageName></packageName>
				<script>MuMeM.Prompt.Layout = MuMeM.Prompt.Layout or {}
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Layout.Manager</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Layout.Manager = MuMeM.Prompt.Layout.Manager or {} 

function MuMeM.Prompt.Layout.Manager.initialize()
  MuMeM.Prompt.Layout.Manager._nextId = 1       -- table of Layout.Panel

  MuMeM.Prompt.Layout.Manager._panels = {}      -- table of Layout.Panel
  
  MuMeM.Prompt.Layout.Manager._layoutDefintionTable = nil
 
  registerAnonymousEventHandler("sysWindowResizeEvent", "MuMeM.Prompt.Layout.Manager.repositionAll" )
  registerAnonymousEventHandler("MuMeM.Prompt.Widget.GeometryChanged", "MuMeM.Prompt.Layout.Manager.repositionWidget")
end

function MuMeM.Prompt.Layout.Manager.nameGen(windowType)
  local index = MuMeM.Prompt.Layout.Manager._nextId
  local t = windowType or "window"
  
  MuMeM.Prompt.Layout.Manager._nextId = MuMeM.Prompt.Layout.Manager._nextId + 1
  
  return "MuMeM.Prompt_" .. t .. "_" .. index
end

function MuMeM.Prompt.Layout.Manager.activeLayoutName()
  return MuMeM.Prompt.Layout.Manager._layoutDefinitionTable 
          and MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.name
end

function MuMeM.Prompt.Layout.Manager.getPanel(panelName)
  for _,panel in pairs(MuMeM.Prompt.Layout.Manager._panels) do
    if panelName == panel:panelName() then
      return panel
    end
  end
  
  return nil
end

function MuMeM.Prompt.Layout.Manager.getPanelNames()
  return table.keys(MuMeM.Prompt.Layout.Manager._panels)
end

function MuMeM.Prompt.Layout.Manager.panelExists(panel)
  local panelName = panel
  
  if mumem_isa(panel,"MuMeM.Prompt.Layout.Panel") then
    panelName = panelPanelName()
  end
  
  return MuMeM.Prompt.Layout.Manager.getPanel(panelName) ~= nil
end

function MuMeM.Prompt.Layout.Manager.activateLayout(layoutName)
  if layoutName == nil or layoutName == false then
    MuMeM.Prompt.Layout.Manager.setLayout(nil)
  else
    local layout = MuMeM.Prompt.Layout.Manager.loadLayout(layoutName)
    if layout then
      MuMeM.Prompt.Layout.Manager.setLayout(layout)
    end
  end
end

function MuMeM.Prompt.Layout.Manager.setLayout(layoutDefinition)
  MuMeM.Prompt.Layout.Manager.disableEditMode()

  MuMeM.Prompt.Layout.Manager.teardown()

  MuMeM.Prompt.Layout.Manager._layoutDefinitionTable = table.deepcopy(layoutDefinition)
  if MuMeM.Prompt.Layout.Manager._layoutDefinitionTable then
    MuMeM.Prompt.Layout.Manager.build()
  end
end

function MuMeM.Prompt.Layout.Manager.build()
  if not MuMeM.Prompt.Layout.Manager._layoutDefinitionTable then
    return
  end
  
  if MuMeM.Prompt.Layout.Manager._panels and not table.is_empty(MuMeM.Prompt.Layout.Manager._panels) then
    MuMeM.Log.notice("MuMeM.Prompt.Layout.Manager.build() called where panels are active!", "MuMeM.Prompt")
    return
  end
  
  if MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.borders then
    if MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.borders.top then
      setBorderTop(MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.borders.top)
    end
    if MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.borders.bottom then
      setBorderBottom(MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.borders.bottom)
    end
  end
  
  for panelName,panelDefinition in pairs(MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.panels) do
    MuMeM.Prompt.Layout.Manager.buildPanel(panelName, panelDefinition)
  end
end

function MuMeM.Prompt.Layout.Manager.buildPanel(panelName, panelDefinition)
  local panel = MuMeM.Prompt.Layout.Panel:new({
                    _panelName = panelName,
                    _name = nil,                            -- window/label name, will be auto-generated
                    _anchor = panelDefinition.anchor,
                    _row = panelDefinition.row,
                    _x = panelDefinition.x,
                    _width = panelDefinition.width,
                  })
  
  MuMeM.Prompt.Layout.Manager._panels[panelName] = panel
  
  for _,widgetDefinition in pairs(panelDefinition.widgets) do
    MuMeM.Prompt.Layout.Manager.buildWidget(panel, widgetDefinition)
  end
  
  MuMeM.Prompt.Layout.Manager.repositionPanel(panel)
  
  return panel
end

function MuMeM.Prompt.Layout.Manager.buildWidget(panel, widgetDefinition)
  local widgetObj = loadstring("return " .. widgetDefinition.className)()

  local widget = widgetObj:new({
    _panel = panel,
    _marginLeft = widgetDefinition.marginLeft,
    _marginRight = widgetDefinition.marginRight,
    _widthHint = widgetDefinition.widthHint,
  })
  widget:create()
  widget:configure(widgetDefinition)
  widget:update()
  
  panel:addWidget(widget)
  
  return widget
end

function MuMeM.Prompt.Layout.Manager.repositionWidget(eventName, eventWidget)
  for _,panel in pairs(MuMeM.Prompt.Layout.Manager._panels) do
    if panel._name == eventWidget:panel():name() then
      MuMeM.Prompt.Layout.Manager.repositionPanel(panel)
      break
    end
  end
end

function MuMeM.Prompt.Layout.Manager.repositionAll()
  for _,panel in pairs(MuMeM.Prompt.Layout.Manager._panels) do
    MuMeM.Prompt.Layout.Manager.repositionPanel(panel)
  end
end

function MuMeM.Prompt.Layout.Manager.repositionPanel(panel)
  MuMeM.Log.debug("MuMeM.Prompt.Layout.Manager.reposition() called", "MuMeM.Prompt")
  
  --if not panel then _,panel = next(MuMeM.Prompt.Layout.Manager._panels) end    -- TESTING / DEV !!!!!
  
  local needUpdate = false
  local panelWidth = panel:width()
  local fixedWidth = 0
  local flexMinWidth = 0
  local flexMaxWidth = 0
  local flexSumRatio = 0
  local flexWidgets = {}
    
  -- get (fixed) sizes and flexible widgets
  for pos,widget in pairs(panel._widgets) do
    widgetWidthCons = widget:widthCons()
    if widgetWidthCons:elasticity() == MuMeM.Prompt.Widget.ELASTICITY_FIXED then
      fixedWidth = fixedWidth + widgetWidthCons:width() + widget:marginLeft() + widget:marginRight()
    else
      local flexMin,flexMax,flexRatio = widgetWidthCons:flexibleWidth()
      flexMinWidth = flexMinWidth + flexMin + widget:marginLeft() + widget:marginRight()
      flexMaxWidth = flexMaxWidth + flexMax + widget:marginLeft() + widget:marginRight()
      flexSumRatio = flexSumRatio + flexRatio
      table.insert(flexWidgets, widget)
    end
  end
  
  local availableWidth = panelWidth - fixedWidth

  -- reposition the panel  
  panel:reposition()

--print("FLEX", panelWidth, availableWidth, flexMinWidth, flexMaxWidth, flexSumRatio, #flexWidgets)
  -- enough room for all max 
  if availableWidth &gt;= flexMaxWidth then
--print("ALL MAX")
    for _,widget in pairs(flexWidgets) do
      local minWidth,maxWidth,ratio = widget:widthCons():flexibleWidth()
      widget:widthCons():setRealWidth(maxWidth)
    end
    needUpdate = true
  -- not even enough room for all min
  elseif availableWidth &lt;= flexMinWidth then
--print("ALL MIN")
    for _,widget in pairs(flexWidgets) do
      local minWidth,maxWidth,ratio = widget:widthCons():flexibleWidth()
      widget:widthCons():setRealWidth(minWidth)
    end
    needUpdate = true
  -- apply ratio
  else
--print("RATIO")
    -- pass #1: at least achieve min size
    local i,widget = next(flexWidgets, nil)
    while widget do
      local minWidth,maxWidth,ratio = widget:widthCons():flexibleWidth()
      local width = math.floor(availableWidth * ratio / flexSumRatio)
      if width &lt;= minWidth + widget:marginLeft() + widget:marginRight()then
--print("RATIO-MIN", widget._name, minWidth, maxWidth, ratio, width, availableWidth)
        widget:widthCons():setRealWidth(minWidth)
        availableWidth = availableWidth - minWidth - widget:marginLeft() - widget:marginRight()
        flexSumRatio = flexSumRatio - ratio
        flexWidgets[i] = nil
        
        local oldI = i      
        i,widget = next(flexWidgets, i)
        flexWidgets[oldI] = nil
      else
        i,widget = next(flexWidgets, i)
      end
    end
    -- pass #2: width bigger than max, "limit" to max
    local i,widget = next(flexWidgets, nil)
    while widget do
      local minWidth,maxWidth,ratio = widget:widthCons():flexibleWidth()
      local width = math.floor(availableWidth * ratio / flexSumRatio)
      if width &gt;= maxWidth + widget:marginLeft() + widget:marginRight() then
--print("RATIO-MAX", widget._name, minWidth, maxWidth, ratio, width, availableWidth)
        widget:widthCons():setRealWidth(maxWidth)
        availableWidth = availableWidth - maxWidth - widget:marginLeft() - widget:marginRight()
        flexSumRatio = flexSumRatio - ratio
        
        local oldI = i      
        i,widget = next(flexWidgets, i)
        flexWidgets[oldI] = nil
      else
        i,widget = next(flexWidgets, i)
      end
    end
    -- pass #3: scale to ratio
    local i,widget = next(flexWidgets, nil)
    while widget do
      local minWidth,maxWidth,ratio = widget:widthCons():flexibleWidth()
      local width = math.floor(availableWidth * ratio / flexSumRatio)
--print("RATIO-SCALE", widget._name, minWidth, maxWidth, ratio, width, availableWidth)
      widget:widthCons():setRealWidth(width - widget:marginLeft() - widget:marginRight())
      availableWidth = availableWidth - width
      flexSumRatio = flexSumRatio - ratio
      
      local oldI = i      
      i,widget = next(flexWidgets, i)
      flexWidgets[oldI] = nil
    end
    -- pass #4: add "left-overs" to ...
    if availableWidth ~= 0 then
      print("LEFTOVER", availableWidth)       -- TODO -&gt; leftovers
    end
    
    needUpdate = true
  end

  if needUpdate then
    -- iterate through all widget and setX() and call reposition()
    local offsetLeft = 0
    for pos,widget in pairs(panel._widgets) do
      width = widget:width()
      widget:reposition(offsetLeft)
      offsetLeft = offsetLeft + width
    end
  end
end

function MuMeM.Prompt.Layout.Manager.teardown()
  if MuMeM.Prompt.Layout.Manager._layoutDefinitionTable and
    MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.borders
  then
    if MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.borders.top then
      setBorderTop(0)
    end
    if MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.borders.bottom then
      setBorderBottom(0)
    end
  end

  for _,panel in pairs(MuMeM.Prompt.Layout.Manager._panels) do
    panel:teardown()
  end

  MuMeM.Prompt.Layout.Manager._panels = {}
end

-- ################################################################################################

function MuMeM.Prompt.Layout.Manager.enableEditMode()
  local activeLayoutName = MuMeM.Prompt.Layout.Manager.activeLayoutName()
  
  if activeLayoutName and MuMeM.Prompt.Layout.Manager.isMasterLayout(activeLayoutName) then
    return
  end
  
  for _,panel in pairs(MuMeM.Prompt.Layout.Manager._panels) do
    panel:enableEditMode()
  end
end

function MuMeM.Prompt.Layout.Manager.disableEditMode()
  for _,panel in pairs(MuMeM.Prompt.Layout.Manager._panels) do
    panel:disableEditMode()
  end
end

-- ################################################################################################

function MuMeM.Prompt.Layout.Manager.deployPanelSimple(panelName)
  local panelDefintion = nil
  
  if MuMeM.Prompt.Layout.Manager.panelExists(panelName) then
    return nil
  elseif panelName == "Top Panel" then
    panelDefinition = {name=panelName, anchor="topleft", x=0, y=0, width=999, widgets={},}
  elseif panelName == "Bottom Panel" then
    panelDefinition = {name=panelName, anchor="bottomleft",x=0, y=0, width=999, widgets={}, } 
  else
    MuMeM.Log.warn(f"MuMeM.Prompt.Layout.Manager.deployPanelSimple() called with invalid panelName ({panelName})", "MuMeM.Panel")
    return nil
  end
    
  -- borders
  if panelName == "Top Panel" then
    setBorderTop(20)
  elseif panelName == "Bottom Panel" then
    setBorderBottom(20)
  end
  
  -- build the panel
  local panel = MuMeM.Prompt.Layout.Manager.buildPanel(panelName, panelDefinition)
  
  return panel
end

function MuMeM.Prompt.Layout.Manager.killPanelSimple(panelName, onlyIfEmpty)
  -- checks
  if not MuMeM.Prompt.Layout.Manager.panelExists(panelName) then
    return true
  elseif panelName ~= "Top Panel" and panelName ~= "Bottom Panel" then
    MuMeM.Log.warn(f"MuMeM.Prompt.Layout.Manager.killPanelSimple() called with invalid panelName ({panelName})", "MuMeM.Panel")
    return false
  end
  
  -- only if empty   (THIS IS A DIRTY HACK -&gt; ._widgets!)
  if onlyIfEmpty and not table.is_empty(MuMeM.Prompt.Layout.Manager._panels[panelName]._widgets) then
    return false
  end
  
  -- teardown and remove the panel
  MuMeM.Prompt.Layout.Manager._panels[panelName]:teardown()
  MuMeM.Prompt.Layout.Manager._panels[panelName] = nil
  
  -- reset borders
  if panelName == "Top Panel" then
    setBorderTop(0)
  elseif panelName == "Bottom Panel" then
    setBorderBottom(0)
  end

  return true
end

function MuMeM.Prompt.Layout.Manager.deployWidget(panelName, widgetClassName)
  local widgetDefinition = MuMeM.Prompt.Layout.Manager.createWidgetDefinition(widgetClassName)
  local panel = MuMeM.Prompt.Layout.Manager.getPanel(panelName)
  
  if not panel then
    return nil
  end
  
  local widget = MuMeM.Prompt.Layout.Manager.buildWidget(panel, widgetDefinition)
  MuMeM.Prompt.Layout.Manager.repositionPanel(panel)
    
  return widget
end

-- ################################################################################################

--function MuMeM.Prompt.Layout.Manager.appendPanelDefinition(panelDefinition)
--  MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.panels[panelDefinition.name] = panelDefinition
--end

--function MuMeM.Prompt.Layout.Manager.removePanelDefinition(panelName)
--  MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.panels[panelName] = nil
--end

function MuMeM.Prompt.Layout.Manager.createWidgetDefinition(className)
  return {className=className, marginLeft=0, marginRight=0, widthHint={"="},}
end

--function MuMeM.Prompt.Layout.Manager.appendWidgetDefinition(panel, widgetDefinition)
--  local ldp = MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.panels[panel:panelName()]
--  
--  if not ldp then
--    MuMeM.Log.error(f"MuMeM.Prompt.Layout.Manager.removeWidgetDefinition(): Panel ({panel:panelName()}) does not exist", "MuMeM.Prompt")
--    return
--  end
--
--  table.insert(ldp.widgets, widgetDefinition)
--end

--function MuMeM.Prompt.Layout.Manager.removeWidgetDefinition(panel, widget, fromIndex)
--  local ldp = MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.panels[panel:panelName()]
--  
--  if not ldp then
--    MuMeM.Log.error(f"MuMeM.Prompt.Layout.Manager.removeWidgetDefinition(): Panel ({panel:panelName()}) does not exist", "MuMeM.Prompt")
--    return
--  end
--
--  table.remove(ldp.widgets, fromIndex)
--end

--function MuMeM.Prompt.Layout.Manager.moveWidgetDefinition(panel, widget, fromIndex, destination)
--  local ldp = MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.panels[panel:panelName()]
--  
--  if not ldp then
--    MuMeM.Log.error(f"MuMeM.Prompt.Layout.Manager.moveWidgetDefinition(): Panel ({panel:panelName()}) does not exist", "MuMeM.Prompt")
--    return
--  end

--  local wd = ldp.widgets[fromIndex]
--  table.remove(ldp.widgets, fromIndex)
-- 
--  if destination == "start" then
--    table.insert(ldp.widgets, 1, wd)
--  elseif destination == "end" then
--    table.insert(ldp.widgets, wd)
--  elseif destination == "left" then
--      table.insert(ldp.widgets, fromIndex-1, wd)
--  elseif destination == "right" then
--      table.insert(ldp.widgets, fromIndex+1, wd)
--  else
--    MuMeM.Log.error(f"MuMeM.Prompt.Layout.Manager.moveWidgetDefinition(): destination ({destinnation}) invalid", "MuMeM.Prompt")
--  end
--end

function MuMeM.Prompt.Layout.Manager.assembleLayoutDefintion(layoutName, layoutDescription)
  local layoutDefinition = {}
  
  -- name
  layoutDefinition.name = layoutName or MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.name
  layoutDefinition.description = layoutName or MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.description
  layoutDefinition.editable = true
  
  -- borders                                            -- TODO, this is hardcoded!!!!
  layoutDefinition.borders = {}
  if MuMeM.Prompt.Layout.Manager._panels["Top Panel"] then
    layoutDefinition.borders.top = 20
  end
  if MuMeM.Prompt.Layout.Manager._panels["Bottom Panel"] then
    layoutDefinition.borders.bottom = 20
  end  

  -- panels
  layoutDefinition.panels = {}
  
  for panelName,panel in pairs(MuMeM.Prompt.Layout.Manager._panels) do
    layoutDefinition.panels[panel:panelName()] = panel:assemblePanelDefinition()
  end

  -- return the new layout definition
  return layoutDefinition
end

-- ################################################################################################

function MuMeM.Prompt.Layout.Manager.isMasterLayout(layoutName)
  return MuMeM.Prompt.Layout[layoutName] ~= nil
end

function MuMeM.Prompt.Layout.Manager.layoutExists(layoutName)
  if MuMeM.Prompt.Layout.Manager.isMasterLayout(layoutName) then
    return true
  end
  
  local promptLayout = MuMeM.Prompt.Layout.Manager.loadLayout(layoutName)
  
  if promptLayout then
    return true
  end
  
  return false
end

function MuMeM.Prompt.Layout.Manager.getLayoutDescription(layoutName)
  local promptLayout = MuMeM.Prompt.Layout.Manager.loadLayout(layoutName)
  
  if promptLayout then
    return promptLayout.description
  end
  
  return nil
end

function MuMeM.Prompt.Layout.Manager.moveLayout(fromLayoutName, toLayoutName, toLayoutDescription)
  if not fromLayoutName or not toLayoutName or toLayoutName == "" or toLayoutDescription == "" then
    return false
  elseif MuMeM.Prompt.Layout.Manager.isMasterLayout(fromLayoutName) then
    return false
  elseif MuMeM.Prompt.Layout.Manager.isMasterLayout(toLayoutName) then
    return false
  end
  
  local saveDir = MuMeM.Core.IO.concatPath(getMudletHomeDir(), "mumem-config")
  local saveFile = "MuMeM-Prompt_PromptLayouts.json"

  local promptLayouts = MuMeM.Core.IO.loadTable(MuMeM.Core.IO.concatPath(saveDir, saveFile))
  if not promptLayouts then
    promptLayouts = {}
  end
  
  if fromLayoutName ~= toLayoutName and promptLayouts[toLayoutName] then
    return false 
  end
  
  -- do the rename
  if fromLayoutName == toLayoutName then
    promptLayouts[fromLayoutName].description = toLayoutDescription
  else
    promptLayouts[toLayoutName] = promptLayouts[fromLayoutName]
    promptLayouts[fromLayoutName] = nil
    promptLayouts[toLayoutName].name = toLayoutName
    promptLayouts[toLayoutName].description = toLayoutDescription
  end
  
  -- active layout?
  if fromLayoutName == MuMeM.Prompt.Layout.Manager.activeLayoutName() then
    MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.name = toLayoutName
    MuMeM.Prompt.Layout.Manager._layoutDefinitionTable.description = toLayoutDescription
  end
      
  MuMeM.Core.IO.createDir(saveDir)
  MuMeM.Core.IO.saveTable(MuMeM.Core.IO.concatPath(saveDir, saveFile), promptLayouts)
  
  return true
end

function MuMeM.Prompt.Layout.Manager.copyLayout(fromLayoutName, toLayoutName, toLayoutDescription)
  if not fromLayoutName or not toLayoutName or toLayoutName == "" or toLayoutDescription == "" then
    return false
  elseif MuMeM.Prompt.Layout.Manager.isMasterLayout(toLayoutName) then
    return false
  end
    
  local saveDir = MuMeM.Core.IO.concatPath(getMudletHomeDir(), "mumem-config")
  local saveFile = "MuMeM-Prompt_PromptLayouts.json"

  local promptLayouts = MuMeM.Core.IO.loadTable(MuMeM.Core.IO.concatPath(saveDir, saveFile))
  if not promptLayouts then
    promptLayouts = {}
  end
  
  if promptLayouts[toLayoutName] then
    return false 
  end
  
  -- do the copy
  if MuMeM.Prompt.Layout[fromLayoutName] then
    promptLayouts[toLayoutName] = table.deepcopy(MuMeM.Prompt.Layout[fromLayoutName])
  else
    promptLayouts[toLayoutName] = table.deepcopy(promptLayouts[fromLayoutName])
  end

  promptLayouts[toLayoutName].name = toLayoutName
  promptLayouts[toLayoutName].description = toLayoutDescription
  promptLayouts[toLayoutName].editable = true
  
      
  MuMeM.Core.IO.createDir(saveDir)
  MuMeM.Core.IO.saveTable(MuMeM.Core.IO.concatPath(saveDir, saveFile), promptLayouts)
  
  return true
end

function MuMeM.Prompt.Layout.Manager.getLayoutList(excludeMaster)
  local layoutList = {}
  
  if not excludeMaster then
    MuMeM.Log.notice("MuMeM.Prompt.Layout.Manager.getLayoutList() EXCLUDE MASTER flag not implementd", "MuMeM.Prompt")
  end

  local saveDir = MuMeM.Core.IO.concatPath(getMudletHomeDir(), "mumem-config")
  local saveFile = "MuMeM-Prompt_PromptLayouts.json"

  local promptLayouts = MuMeM.Core.IO.loadTable(MuMeM.Core.IO.concatPath(saveDir, saveFile))
  promptLayouts = promptLayouts or {}

  for k,v in pairs(promptLayouts) do
    table.insert(layoutList, {name=v.name, description=v.description, editable=v.editable})
  end
     
  return layoutList
end

function MuMeM.Prompt.Layout.Manager.loadLayout(layoutName)
  if MuMeM.Prompt.Layout[layoutName] then
    return MuMeM.Prompt.Layout[layoutName]
  end

  local saveDir = MuMeM.Core.IO.concatPath(getMudletHomeDir(), "mumem-config")
  local saveFile = "MuMeM-Prompt_PromptLayouts.json"

  local promptLayouts = MuMeM.Core.IO.loadTable(MuMeM.Core.IO.concatPath(saveDir, saveFile))
  if not promptLayouts then
    MuMeM.Log.warning("Could not load savefile: "..MuMeM.Core.IO.concatPath(saveDir, saveFile), "MuMeM.Prompt")
    return nil
  end
  
  if not promptLayouts[layoutName] then
    return nil
  end
     
  return promptLayouts[layoutName]
end

function MuMeM.Prompt.Layout.Manager.saveLayout(layout)
  if not layout then
    return false
  end

  if MuMeM.Prompt.Layout.Manager.isMasterLayout(layout.name) then
    return true
  end
  
  local saveDir = MuMeM.Core.IO.concatPath(getMudletHomeDir(), "mumem-config")
  local saveFile = "MuMeM-Prompt_PromptLayouts.json"

  local promptLayouts = MuMeM.Core.IO.loadTable(MuMeM.Core.IO.concatPath(saveDir, saveFile))
  if not promptLayouts then
    promptLayouts = {}
  end
  
  promptLayouts[layout.name] = layout
      
  MuMeM.Core.IO.createDir(saveDir)
  MuMeM.Core.IO.saveTable(MuMeM.Core.IO.concatPath(saveDir, saveFile), promptLayouts)
  
  return true
end

function MuMeM.Prompt.Layout.Manager.deleteLayout(layoutName)
  if MuMeM.Prompt.Layout.Manager.isMasterLayout(layoutName) then
    return false
  end
  
  if layoutName == MuMeM.Prompt.Layout.Manager.activeLayoutName() then
    return false
  end
  
  local saveDir = MuMeM.Core.IO.concatPath(getMudletHomeDir(), "mumem-config")
  local saveFile = "MuMeM-Prompt_PromptLayouts.json"

  local promptLayouts = MuMeM.Core.IO.loadTable(MuMeM.Core.IO.concatPath(saveDir, saveFile))
  if not promptLayouts then
    promptLayouts = {}
  end
  
  promptLayouts[layoutName] = nil
      
  MuMeM.Core.IO.createDir(saveDir)
  MuMeM.Core.IO.saveTable(MuMeM.Core.IO.concatPath(saveDir, saveFile), promptLayouts)
  
  return true
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Layout.Panel</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Layout.Panel = MuMeM.Prompt.Layout.Panel or {
  _panelName = "undefined",

  _name = "undefined",
  _anchor = "topleft",
  _row = 1,                         -- starting with 1
  _x = 0,                           -- relative to anchor
  _y = 0,                           -- relative to anchor
  _width = 600,
  _height = 20,
  
  _absX = 0,
  _absY = 0,

  _widgets = {},                  -- table of MuMeM.Prompt.Widget.Widget
} 

mumem_inherit("MuMeM.Prompt.Layout.Panel", "MuMeM.Prompt.Layout.Panel")

function MuMeM.Prompt.Layout.Panel:new(props)
  local me = props or {}

  me._name = me._name or MuMeM.Prompt.Layout.Manager.nameGen("Panel")
  
  me._widgets = {}
  
  setmetatable(me, self)
  self.__index = self
    
  me:setAbsX(me:x())
  me:setAbsY(me:y())
  
  -- --- rootPane ---
  --createLabel("main", me._name, me:absX(), me:absY(), me:width(), me:height(), true)  
  --setBackgroundColor(me._name, Geyser.Color.parse("yellow"))
  
  return me
end

function MuMeM.Prompt.Layout.Panel:panelName()
  return self._panelName
end

function MuMeM.Prompt.Layout.Panel:name()
  return self._name
end

function MuMeM.Prompt.Layout.Panel:anchor()
  return self._anchor
end

function MuMeM.Prompt.Layout.Panel:x()
  return self._x
end

function MuMeM.Prompt.Layout.Panel:y()
  return self._y
end

function MuMeM.Prompt.Layout.Panel:width()
  local mwW,mwH = getMainWindowSize()

  return math.min(self._width, mwW)
end

function MuMeM.Prompt.Layout.Panel:height()
  local mwW,mwH = getMainWindowSize()

  return math.min(self._height, mwH)
end

function MuMeM.Prompt.Layout.Panel:absX()
  return self._absX
end

function MuMeM.Prompt.Layout.Panel:absY()
  return self._absY
end

function MuMeM.Prompt.Layout.Panel:setAbsX(x)
  local mwW,mwH = getMainWindowSize()

  if self:anchor() == "topleft" or self:anchor() == "bottomleft" then
    self._absX = x
  elseif self:anchor() == "topright" or self:anchor() == "bottomright" then
    self._absX = mwW - self:width() + x
  end
end

function MuMeM.Prompt.Layout.Panel:setAbsY(y)
  local mwW,mwH = getMainWindowSize()

  if self:anchor() == "topleft" or self:anchor() == "topright" then
    self._absY = y
  elseif self:anchor() == "bottomleft" or self:anchor() == "bottomright" then
    self._absY = mwH - self:height() + y
  end
end

function MuMeM.Prompt.Layout.Panel:addWidget(widget)
  -- called by Layout.Manager
  table.insert(self._widgets, widget)
end

function MuMeM.Prompt.Layout.Panel:reposition()
  self:setAbsX(self:x())
  self:setAbsY(self:y())
  
  if windowType(self._name) then
    moveWindow(self._name, self:absX(), self:absY())
    resizeWindow(self._name, self:width(), self:height())
  end
end

function MuMeM.Prompt.Layout.Panel:deleteWidget(widget)
  for i,panelWidget in pairs(self._widgets) do
    if widget:name() == panelWidget:name() then
      table.remove(self._widgets, i)
      panelWidget:teardown()
      -- MuMeM.Prompt.Layout.Manager.removeWidgetDefinition(self, widget, i)  [REMOVE]
      MuMeM.Prompt.Layout.Manager.repositionPanel(self)
      break
    end
  end
end

function MuMeM.Prompt.Layout.Panel:moveWidgetStart(widget)
  for i,panelWidget in pairs(self._widgets) do
    if widget:name() == panelWidget:name() then
      if i &gt; 1 then
        table.remove(self._widgets, i)
        table.insert(self._widgets, 1, panelWidget)
        -- MuMeM.Prompt.Layout.Manager.moveWidgetDefinition(self, widget, i, "start")   [REMOVE]
        MuMeM.Prompt.Layout.Manager.repositionPanel(self)
        break
      end
    end
  end
end

function MuMeM.Prompt.Layout.Panel:moveWidgetEnd(widget)
  for i,panelWidget in pairs(self._widgets) do
    if widget:name() == panelWidget:name() then
      if i &lt; table.getn(self._widgets) then
        table.remove(self._widgets, i)
        table.insert(self._widgets, panelWidget)
        -- MuMeM.Prompt.Layout.Manager.moveWidgetDefinition(self, widget, i, "end")   [REMOVE]
        MuMeM.Prompt.Layout.Manager.repositionPanel(self)
        break
      end
    end
  end
end

function MuMeM.Prompt.Layout.Panel:moveWidgetLeft(widget)
  for i,panelWidget in pairs(self._widgets) do
    if widget:name() == panelWidget:name() then
      if i &gt; 1 then
        table.remove(self._widgets, i)
        table.insert(self._widgets, i-1, panelWidget)
        -- MuMeM.Prompt.Layout.Manager.moveWidgetDefinition(self, widget, i, "left")  [REMOVE]
        MuMeM.Prompt.Layout.Manager.repositionPanel(self)
        break
      end
    end
  end
end

function MuMeM.Prompt.Layout.Panel:moveWidgetRight(widget)
  for i,panelWidget in pairs(self._widgets) do
    if widget:name() == panelWidget:name() then
      if i &lt; table.getn(self._widgets) then
        table.remove(self._widgets, i)
        table.insert(self._widgets, i+1, panelWidget)
        -- MuMeM.Prompt.Layout.Manager.moveWidgetDefinition(self, widget, i, "right")   [REMOVE]
        MuMeM.Prompt.Layout.Manager.repositionPanel(self)
        break
      end
    end
  end
end

function MuMeM.Prompt.Layout.Panel:offsetLeft(widget)
  local offset = 0
  
  local i,c = next(self._widgets, nil)
  while c and c ~= wiget do
    offset = offset + c:width()
    i,c = next(self._widgets, i)
  end
  
  return offset
end

function MuMeM.Prompt.Layout.Panel:teardown()
  for _,widget in pairs(self._widgets) do
    widget:teardown()
  end
  
  self.widgets = false

  if windowType(self._name) then
    hideWindow(self._name)
    deleteLabel(self._name)
  end
end

-- ################################################################################################

function MuMeM.Prompt.Layout.Panel:enableEditMode()
  for _,widget in pairs(self._widgets) do
    widget:enableEditMode()
  end
end

function MuMeM.Prompt.Layout.Panel:disableEditMode()
  for _,widget in pairs(self._widgets) do
    widget:disableEditMode()
  end
end

-- ################################################################################################

function MuMeM.Prompt.Layout.Panel:assemblePanelDefinition()
  local panelDefinition = {
          name = self._panelName,
          anchor = self._anchor,
          x = self._x,
          y = self._y,
          width = self._width,
          widgets = {},
        }
  
  for _,widget in pairs(self._widgets) do
    table.insert(panelDefinition.widgets, widget:assembleWidgetDefinition())
  end
    
  return panelDefinition
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Layout.STANDARD80</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Layout.STANDARD80 = MuMeM.Prompt.Layout.STANDARD80 or
{
  name = "STANDARD80",
  description = "Bottom, 80 chars",
  editable = false,
  borders = {
    bottom = 20,
  },
  panels = {
    ["Bottom Panel"] = {
      name = "Bottom Panel",
      anchor = "bottomleft",
      x = 0,
      y = 0,
      width = 999,
      widgets = {
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.PlayerHealthBar",
        },
        {
          marginLeft = 10,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.PlayerManaBar",
        },
        {
          marginLeft = 10,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.PlayerMoveBar",
        },
        {
          marginLeft = 10,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.OpponentHealthBar",
        },
        {
          marginLeft = 10,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusPosition",
        },
        {
          marginLeft = 2,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusRiding",
        },
        {
          marginLeft = 2,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusLight",
        },
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusTerrain",
        },
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusWeather",
        },
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusFog",
        },
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusClimb",
        },
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusSwim",
        },
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusMood",
        },
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusCarrying",
        },
        -- {
          -- marginLeft = 10,
          -- marginRight = 0,
          -- widthHint = { "=" },
          -- className = "MuMeM.Prompt.Widget.Spacer",
        -- },
      },
    },
  },
}
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Layout.VITALS_TOP</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Layout["VITALS-TOP"] = MuMeM.Prompt.Layout["VITALS-TOP"] or
{
  name = "VITALS-TOP",
  description = "Player vitals on top",
  editable = false,
  borders = {
    top = 20,
  },
  panels = {
    ["Top Panel"] = {
      name = "Top Panel",
      anchor = "topleft",
      x = 0,
      y = 0,
      width = 999,
      widgets = {
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.PlayerHealthBar",
        },
        {
          marginLeft = 10,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.PlayerManaBar",
        },
        {
          marginLeft = 10,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.PlayerMoveBar",
        },
      },
    },
  }
}
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Layout.STANDARD_DUAL</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Layout["STANDARD-DUAL"] = MuMeM.Prompt.Layout["STANDARD-DUAL"] or
{
  name = "STANDARD-DUAL",
  description = "Vitals top, status bottom",
  editable = false,
  borders = {
    top = 20,
    bottom = 20,
  },
  panels = {
    ["Top Panel"] = {
      name = "Top Panel",
      anchor = "topleft",
      x = 0,
      y = 0,
      width = 999,
      widgets = {
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.PlayerHealthBar",
        },
        {
          marginLeft = 10,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.PlayerManaBar",
        },
        {
          marginLeft = 10,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.PlayerMoveBar",
        },
      },
    },
    ["Bottom Panel"] = {
      name = "Bottom Panel",
      anchor = "bottomleft",
      x = 0,
      y = 0,
      width = 999,
      widgets = {
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.OpponentHealthBar",
        },
        {
          marginLeft = 5,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.BufferHealthBar",
        },        {
          marginLeft = 10,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusPosition",
        },
        {
          marginLeft = 5,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusRiding",
        },
        {
          marginLeft = 2,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusLight",
        },
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusTerrain",
        },
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusWeather",
        },
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusFog",
        },
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusClimb",
        },
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusSwim",
        },
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusMood",
        },
        {
          marginLeft = 0,
          marginRight = 0,
          widthHint = { "=" },
          className = "MuMeM.Prompt.Widget.StatusCarrying",
        },
        -- {
          -- marginLeft = 10,
          -- marginRight = 0,
          -- widthHint = { "=" },
          -- className = "MuMeM.Prompt.Widget.Spacer",
        -- },
      },
    },
  }
}
</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>MuMeM.Prompt.Statuses</name>
				<packageName></packageName>
				<script>-- THIS IS NOT  A NAMESPACE
-- just a folder/directory to group all the status widgets</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.StatusCarrying</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.StatusCarrying = MuMeM.Prompt.Widget.StatusCarrying or
{
  classSelectable = true,
}

mumem_inherit("MuMeM.Prompt.Widget.StatusCarrying", "MuMeM.Prompt.Widget.TextWidget")

function MuMeM.Prompt.Widget.StatusCarrying:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("StatusCarrying")
  props._text = "Carrying"
  props._editText = "Carry"
  
  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  me._widthCons:setFlexible(50, 100, 100)
  
  return me
end

function MuMeM.Prompt.Widget.StatusCarrying:create()
  MuMeM.Prompt.Widget.StatusCarrying.parentClass.create(self)

  self:registerEventHandler("MuMeM.Player.Carrying", function() self:update() end)
end

function MuMeM.Prompt.Widget.StatusCarrying:update(carrying)
  carrying = carrying or MuMeM.Player.carrying() or ""
  
  self:setText(carrying)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.StatusClimb</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.StatusClimb = MuMeM.Prompt.Widget.StatusClimb or
{
  classSelectable = true,
}

mumem_inherit("MuMeM.Prompt.Widget.StatusClimb", "MuMeM.Prompt.Widget.TextWidget")

function MuMeM.Prompt.Widget.StatusClimb:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("StatusClimb")
  props._text = "?"
  props._editText = "C"

  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  return me
end

function MuMeM.Prompt.Widget.StatusClimb:create()
  MuMeM.Prompt.Widget.StatusClimb.parentClass.create(self)

  self:registerEventHandler("MuMeM.Player.Climb", function() self:update() end)
end

function MuMeM.Prompt.Widget.StatusClimb:update(climb)
  climb = climb or MuMeM.Player.climb() or ""
  
  if self:editMode() then
    carrying = "Carry"
  end
  
  self:setText(climb)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.StatusFog</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.StatusFog = MuMeM.Prompt.Widget.StatusFog or 
{
  classSelectable = true,

  FOG_MAP = {
    [""]  = "fog-none-white.svg",
    ["-"] = "fog-light-white-20.png",
    ["="] = "fog-heavy-white-20.png",
    
    ["EDIT"] = "fog-light-white.svg",
    ["UNKNOWN"] = "fog-unknown-white.svg",
  },
} 

mumem_inherit("MuMeM.Prompt.Widget.StatusFog", "MuMeM.Prompt.Widget.IconWidget")

function MuMeM.Prompt.Widget.StatusFog:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("StatusFog")
  props._iconDir = "fog"
  props._iconOrigin = MuMeM.Prompt.Widget.ICON_ORIGIN_BORDER
  props._iconMap = self.FOG_MAP                       -- pointer
  
  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  return me
end

function MuMeM.Prompt.Widget.StatusFog:create()
  MuMeM.Prompt.Widget.StatusFog.parentClass.create(self)

  self:registerEventHandler("MuMeM.Player.Fog", function() self:update() end)
end

function MuMeM.Prompt.Widget.StatusFog:update(fog)
  self:applyStatusIcon(fog or MuMeM.Player.fog() or "")
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.StatusLight</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.StatusLight = MuMeM.Prompt.Widget.StatusLight or
{
  classSelectable = true,

  LIGHT_MAP = {
    ["*"] = "light-sun-white-20.png",
    ["!"] = "light-artificial-white-20.png",
    [")"] = "light-moon-white-20.png",
    ["o"] = "light-darkness-white-20.png",

    ["EDIT"] = "light-sun-white.svg",
    ["UNKNOWN"] = "light-unknown-white.svg",
  },
} 

mumem_inherit("MuMeM.Prompt.Widget.StatusLight", "MuMeM.Prompt.Widget.IconWidget")

function MuMeM.Prompt.Widget.StatusLight:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("StatusLight")
  props._iconDir = "light"
  props._iconOrigin = MuMeM.Prompt.Widget.ICON_ORIGIN_BORDER
  props._iconMap = self.LIGHT_MAP                       -- pointer

  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  return me
end

function MuMeM.Prompt.Widget.StatusLight:create()
  MuMeM.Prompt.Widget.StatusLight.parentClass.create(self)

  self:registerEventHandler("MuMeM.Player.Light", function() self:update() end)
end

function MuMeM.Prompt.Widget.StatusLight:update(light)
  self:applyStatusIcon(light or MuMeM.Player.light())
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.StatusMood</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.StatusMood = MuMeM.Prompt.Widget.StatusMood or
{
  classSelectable = true,
}

mumem_inherit("MuMeM.Prompt.Widget.StatusMood", "MuMeM.Prompt.Widget.TextWidget")

function MuMeM.Prompt.Widget.StatusMood:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("StatusMood")
  props._text = "m?"
  props._editText = "m?"
  
  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  me._widthCons:setFixed(20)
  
  return me
end

function MuMeM.Prompt.Widget.StatusMood:create()
  MuMeM.Prompt.Widget.StatusMood.parentClass.create(self)

  self:registerEventHandler("MuMeM.Player.Mood", function() self:update() end)
end

function MuMeM.Prompt.Widget.StatusMood:update(mood)
  mood = mood or MuMeM.Player.mood()
  local moodAbbr = "m?"
  
  if mood == "wimpy" then
    moodAbbr = "mW"
  elseif mood == "prudent" then
    moodAbbr = "mP"
  elseif mood == "normal" then
    moodAbbr = "mN"
  elseif mood == "brave" then
    moodAbbr = "mB"
  elseif mood == "aggressive" then
    moodAbbr = "mA"
  elseif mood == "berzerk" then
    moodAbbr = "mZ"
  end
  
  self:setText(moodAbbr)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.StatusPosition</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.StatusPosition = MuMeM.Prompt.Widget.StatusPosition or
{
  classSelectable = true,
  
  POSITION_MAP = {
    ["standing"] = "position-standing-18.png",
    ["sitting"] = "position-sitting-18.png",
    ["resting"] = "position-resting-18.png",
    ["sleeping"] = "position-sleeping-18.png",
    ["incapacitated"] = "position-incapacitated-18.png",
    ["dying"] = "position-dying-18.png",
    ["fighting"] = "position-fighting-18.png",
    ["stunned"] = "position-stunned-18.png",

    ["EDIT"] = "position-standing-18.png",
    ["UNKNOWN"] = "position-unknown-18.png",
  },
}

mumem_inherit("MuMeM.Prompt.Widget.StatusPosition", "MuMeM.Prompt.Widget.IconWidget")

function MuMeM.Prompt.Widget.StatusPosition:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("StatusPosition")
  props._iconDir = "position"
  props._iconOrigin = MuMeM.Prompt.Widget.ICON_ORIGIN_BACKGROUND
  props._iconMap = self.POSITION_MAP                       -- pointer
  
  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  return me
end

function MuMeM.Prompt.Widget.StatusPosition:create()
  MuMeM.Prompt.Widget.StatusPosition.parentClass.create(self)

  self:registerEventHandler("MuMeM.Player.Position", function() self:update() end)
end

function MuMeM.Prompt.Widget.StatusPosition:update(position)
  position = position or MuMeM.Player.position()
  local styleSheetOverrides = nil

  if position == "incapacitated" then
    styleSheetOverrides = {["background-color"]="red"}
  elseif position == "dying" then
    styleSheetOverrides = {["background-color"]="red"}
  elseif position == "stunned" then
    styleSheetOverrides = {["background-color"]="yellow"}
  end
  
  self:applyStatusIcon(position, styleSheetOverrides)
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.StatusRiding</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.StatusRiding = MuMeM.Prompt.Widget.StatusRiding or
{
  classSelectable = true,
}

mumem_inherit("MuMeM.Prompt.Widget.StatusRiding", "MuMeM.Prompt.Widget.IconWidget")

function MuMeM.Prompt.Widget.StatusRiding:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("StatusRiding")
  --props._iconDir = "XXX"
  props._iconOrigin = MuMeM.Prompt.Widget.ICON_ORIGIN_BACKGROUND
  props._icon = "affect-riding-18.png"
  
  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  return me
end

function MuMeM.Prompt.Widget.StatusRiding:create()
  MuMeM.Prompt.Widget.StatusRiding.parentClass.create(self)

  self:registerEventHandler("MuMeM.Player.Ride", function() self:update() end)
end

function MuMeM.Prompt.Widget.StatusRiding:update(riding)
  riding = riding or MuMeM.Player.ride()
  local styleSheetOverrides = nil

--[[
  if riding == true then
    self:setIcon("position-standing-18.png")
    styleSheetOverrides = {["background-color"]="green"}
  else
    self:setIcon("affect-riding-18.png")
  end
--]]

  if riding == true then
    styleSheetOverrides = {["background-color"]="green"}
  end
    
  self:applyIconStyleSheet(styleSheetOverrides)
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.StatusSwim</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.StatusSwim = MuMeM.Prompt.Widget.StatusSwim or
{
  classSelectable = true,
}

mumem_inherit("MuMeM.Prompt.Widget.StatusSwim", "MuMeM.Prompt.Widget.TextWidget")

function MuMeM.Prompt.Widget.StatusSwim:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("StatusSwim")
  props._text = "?"
  props._editText = "S"
 
  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  return me
end

function MuMeM.Prompt.Widget.StatusSwim:create()
  MuMeM.Prompt.Widget.StatusSwim.parentClass.create(self)

  self:registerEventHandler("MuMeM.Player.Swim", function() self:update() end)
end

function MuMeM.Prompt.Widget.StatusSwim:update(swim)
  swim = swim or MuMeM.Player.swim()
  
  if swim == false or swim == nil then
    self:setText("")
  else
    self:setText("W")
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.StatusTerrain</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.StatusTerrain = MuMeM.Prompt.Widget.Terrain or
{
  classSelectable = true,

  TERRAIN_MAP = {
    ["building"]   = "terrain-building-white.svg",
    ["city"]       = "terrain-city-white.svg",
    ["field"]      = "terrain-field-white.svg",
    ["forest"]     = "terrain-forest-white.svg",
    ["hills"]      = "terrain-hills-white.svg",
    ["mountains"]  = "terrain-mountains-white.svg",
    ["shallows"]   = "terrain-shallows-white.svg",
    ["water"]      = "terrain-water-white.svg",     
    ["road"]       = "terrain-road-white.svg",   
    ["path"]       = "terrain-path-white.svg", 
    ["rapids"]     = "terrain-rapids-white.svg", 
    ["underwater"] = "terrain-underwater-white.svg", 
    ["brush"]      = "terrain-brush-white.svg",
    ["tunnel"]     = "terrain-tunnel-white.svg", 
    ["cavern"]     = "terrain-cavern-white.svg", 

    ["EDIT"]       = "terrain-city-white.svg",
    ["UNKNOWN"]    = "terrain-unknown-white.svg",
  }
} 

mumem_inherit("MuMeM.Prompt.Widget.StatusTerrain", "MuMeM.Prompt.Widget.IconWidget")

function MuMeM.Prompt.Widget.StatusTerrain:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("StatusTerrain")
  props._iconDir = "terrain"
  props._iconOrigin = MuMeM.Prompt.Widget.ICON_ORIGIN_BORDER
  props._iconMap = self.TERRAIN_MAP                       -- pointer
  
  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  return me
end

function MuMeM.Prompt.Widget.StatusTerrain:create()
  MuMeM.Prompt.Widget.StatusTerrain.parentClass.create(self)

  self:registerEventHandler("MuMeM.Room.Info.Environment", function() self:update() end)
end

function MuMeM.Prompt.Widget.StatusTerrain:update(terrain)
  self:applyStatusIcon(terrain or MuMeM.Room.environment())
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.StatusWeather</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.StatusWeather = MuMeM.Prompt.Widget.StatusWeather or
{
  classSelectable = true,

  WEATHER_ICON = {
    [""]  = "weather-normal-white-20.png",
    ["~"] = "weather-clouds-white-20.png",
    ["'"] = "weather-rain-white-20.png",
    ['"'] = "weather-heavyrain-white-20.png",
    ["*"] = "weather-snow-white-20.png",

    ["EDIT"]    = "weather-normal-white.svg",            
    ["UNKNOWN"] = "weather-unknown-white.svg",
  },
} 

mumem_inherit("MuMeM.Prompt.Widget.StatusWeather", "MuMeM.Prompt.Widget.IconWidget")

function MuMeM.Prompt.Widget.StatusWeather:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("StatusWeather")
  props._iconDir = "weather"
  props._iconOrigin = MuMeM.Prompt.Widget.ICON_ORIGIN_BORDER
  props._iconMap = self.WEATHER_ICON                       -- pointer
  
  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  return me
end

function MuMeM.Prompt.Widget.StatusWeather:create()
  MuMeM.Prompt.Widget.StatusWeather.parentClass.create(self)

  self:registerEventHandler("MuMeM.Player.Weather", function() self:update() end)
end

function MuMeM.Prompt.Widget.StatusWeather:update(weather)
  self:applyStatusIcon(weather or MuMeM.Player.weather() or "")
end
</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>MuMeM.Prompt.Gauges</name>
				<packageName></packageName>
				<script>-- THIS IS NOT  A NAMESPACE
-- just a folder/directory to group all the gauge widgets</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.PlayerHealthB</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.PlayerHealthBar = MuMeM.Prompt.Widget.PlayerHealthBar or 
{
  classSelectable = true,
} 

mumem_inherit("MuMeM.Prompt.Widget.PlayerHealthBar", "MuMeM.Prompt.Widget.Gauge3")
--mumem_inherit("MuMeM.Prompt.Widget.PlayerHealthBar", "MuMeM.Prompt.Widget.Gauge9")

function MuMeM.Prompt.Widget.PlayerHealthBar:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("PlayerHealthBar")
  
  props._boundaries = { 100, 70, 45, 25, 10, 0}

  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  me:setBarColor(1, "#FF0000")
  me:setBarColor(2, "#C00000")
  me:setBarColor(3, "#800000")
  me:setBarColor(4, "#999999")
--  me:setBarColor(1, "#FF0000")
--  me:setBarColor(2, "#800000")
--  me:setBarColor(3, "QLinearGradient( x1: 0, y1: 0, x2: 1, y2: 0, stop: 0 #800000, stop: 1 #FF0000);")

  return me
end

function MuMeM.Prompt.Widget.PlayerHealthBar:create()
  MuMeM.Prompt.Widget.PlayerHealthBar.parentClass.create(self)

  self:registerEventHandler("MuMeM.Player.Hp", function() self:update() end)
  self:registerEventHandler("MuMeM.Player.MaxHp", function() self:update() end)
end

function MuMeM.Prompt.Widget.PlayerHealthBar:update()
  self:setValue(MuMeM.Player.hp(), MuMeM.Player.maxHp())
end    
   </script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.PlayerManaBar</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.PlayerManaBar = MuMeM.Prompt.Widget.PlayerManaBar or 
{
  classSelectable = true,
} 

mumem_inherit("MuMeM.Prompt.Widget.PlayerManaBar", "MuMeM.Prompt.Widget.Gauge3")

function MuMeM.Prompt.Widget.PlayerManaBar:new(props)
  local props = props or {}

  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("PlayerManaBar")

  props._boundaries = { 100, 75, 45, 25, 10, 0}
  --props._scaleColor = "gray"  

  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  me:setBarColor(1, "#000080")
  me:setBarColor(2, "#0000C0")
  me:setBarColor(3, "#0000FF")
  me:setBarColor(4, "#888888")
  me:setScaleBorder("gray")
  
  return me
end

function MuMeM.Prompt.Widget.PlayerManaBar:create()
  MuMeM.Prompt.Widget.PlayerManaBar.parentClass.create(self)

  self:registerEventHandler("MuMeM.Player.Sp", function() self:update() end)
  self:registerEventHandler("MuMeM.Player.MaxSp", function() self:update() end)
end

function MuMeM.Prompt.Widget.PlayerManaBar:update()
  self:setValue(MuMeM.Player.sp(), MuMeM.Player.maxSp())
end </script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.PlayerMoveBar</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.PlayerMoveBar = MuMeM.Prompt.Widget.PlayerMoveBar or
{
  classSelectable = true,
}

mumem_inherit("MuMeM.Prompt.Widget.PlayerMoveBar", "MuMeM.Prompt.Widget.Gauge3")

function MuMeM.Prompt.Widget.PlayerMoveBar:new(props)
  local props = props or {}

  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("PlayerManaBar")

  props._boundaries = { 999, 50, 30, 15, 5, 0}
  props._boundaryCalculation = MuMeM.Prompt.Widget.BOUNDARY_CALCULATION_ABSOLUTE

  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  me:setBarColor(1, "#00FF00")
  me:setBarColor(2, "#00C000")
  me:setBarColor(3, "#008000")
  me:setBarColor(4, "#00FF00")
  
  return me
end

function MuMeM.Prompt.Widget.PlayerMoveBar:create()
  MuMeM.Prompt.Widget.PlayerMoveBar.parentClass.create(self)

  self:registerEventHandler("MuMeM.Player.Mp", function() self:update() end)
  self:registerEventHandler("MuMeM.Player.MaxMp", function() self:update() end)
end

function MuMeM.Prompt.Widget.PlayerMoveBar:update()
  self:setValue(MuMeM.Player.mp(), MuMeM.Player.maxMp())
end  </script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.OpponentHealthBar</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.OpponentHealthBar = MuMeM.Prompt.Widget.OpponentHealthBar or
{
  classSelectable = true,
}

mumem_inherit("MuMeM.Prompt.Widget.OpponentHealthBar", "MuMeM.Prompt.Widget.Gauge5")

function MuMeM.Prompt.Widget.OpponentHealthBar:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("OpponentHealthBar")

  --props._boundaries = { 100, 70, 45, 25, 10, 0}

  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
  
  me:setBarColor(1, "#A0522D")
  me:setBarColor(2, "#FFBF00")
  me:setBarColor(3, "#FF4433")
  
  return me
end


function MuMeM.Prompt.Widget.OpponentHealthBar:create()
  MuMeM.Prompt.Widget.OpponentHealthBar.parentClass.create(self)

  self:registerEventHandler("MuMeM.Player.Opponent.Health", function() self:update() end)
end

function MuMeM.Prompt.Widget.OpponentHealthBar:update()
  self:setValue(MuMeM.Player.Opponent.health())
end  </script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Widget.BufferHealthBar</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Widget.BufferHealthBar = MuMeM.Prompt.Widget.BufferHealthBar or
{
  classSelectable = true,
}

mumem_inherit("MuMeM.Prompt.Widget.BufferHealthBar", "MuMeM.Prompt.Widget.Gauge5")

function MuMeM.Prompt.Widget.BufferHealthBar:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("BufferHealthBar")

  --props._boundaries = { 100, 70, 45, 25, 10, 0}

  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self

--  me.back:setColor(204,119,34)     OLD
--  me.front:setColor(255,170,51)    OLD

--  me._back:setColor(160, 82, 45)    ORANGE
--  me._front:setColor(255,68,51)
  me:setBarColor(1, "#A0522D")
  me:setBarColor(2, "#FF4433")
  
  return me
end


function MuMeM.Prompt.Widget.BufferHealthBar:create()
  MuMeM.Prompt.Widget.BufferHealthBar.parentClass.create(self)

  self:registerEventHandler("MuMeM.Player.Buffer.Health", function() self:update() end)
end

function MuMeM.Prompt.Widget.BufferHealthBar:update()
  self:setValue(MuMeM.Player.Buffer.health())
end  </script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>MuMeM.Prompt.Preferences</name>
				<packageName></packageName>
				<script>MuMeM.Prompt.Preferences = MuMeM.Prompt.Preferences or 
{
  _activeLayoutId = "STANDARD80"
}</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Preferences.Library</name>
					<packageName></packageName>
					<script>function MuMeM.Prompt.Preferences.load()
  local saveDir = MuMeM.Core.IO.concatPath(getMudletHomeDir(), "mumem-config")
  local saveFile = "MuMeM-Prompt_Preferences.json"

  local config = MuMeM.Core.IO.loadTable(MuMeM.Core.IO.concatPath(saveDir, saveFile))
  if not config then
    MuMeM.Log.warning("Could not load savefile: "..MuMeM.Core.IO.concatPath(saveDir, saveFile), "MuMeM.Prompt")
    return false
  end
 
  MuMeM.Prompt.Layout.Manager.activateLayout(config._activeLayoutName)
  
  return true
end

function MuMeM.Prompt.Preferences.save()
  local saveDir = MuMeM.Core.IO.concatPath(getMudletHomeDir(), "mumem-config")
  local saveFile = "MuMeM-Prompt_Preferences.json"
  
  local config = {
    _activeLayoutName = MuMeM.Prompt.Layout.Manager.activeLayoutName(),
  }
    
  MuMeM.Core.IO.createDir(saveDir)
  MuMeM.Core.IO.saveTable(MuMeM.Core.IO.concatPath(saveDir, saveFile), config)
  
  return true
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Preferences.Dialog</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Preferences.Dialog = MuMeM.Prompt.Preferences.Dialog or 
{
  MAX_LAYOUTS = 9,
  
  _isHidden = true,
  
  _dialogWidth = 450,
  _dialogHeight = 300,
  
  _visuals = nil,
  
  _styleSheetPane = Geyser.StyleSheet:new([[
    background-color: #D3D3D3;
    border: 5px solid darkgreen;
  ]]),
}

function MuMeM.Prompt.Preferences.Dialog.create()

  MuMeM.Prompt.Preferences.Dialog._visuals = {}
  
  -- --- root pane ---
  MuMeM.Prompt.Preferences.Dialog._visuals.rootPane = Geyser.Label:new({
    _name = "MuMeM.Prompt.Preferences.Dialog._visuals.rootPane",
    x = "50%-"..(MuMeM.Prompt.Preferences.Dialog._dialogWidth/2),
    y = "50%-"..(MuMeM.Prompt.Preferences.Dialog._dialogHeight/2),
    width = MuMeM.Prompt.Preferences.Dialog._dialogWidth,
    height = MuMeM.Prompt.Preferences.Dialog._dialogHeight,
    stylesheet = MuMeM.Prompt.Preferences.Dialog._styleSheetPane:getCSS(),
  })

  -- --- Layout presets ---
  MuMeM.Prompt.Preferences.Dialog._visuals.layoutList = MuMeM.Widget.ItemList:new({
    _name = "MuMeM.Prompt.Preferences.Dialog._visuals.layoutList",
    _x = 10,_y = 10,
    _width = "100%-20", _height = 200,
    _numRows = MuMeM.Prompt.Preferences.Dialog.MAX_LAYOUTS,
    _rowHeight = 20,
    _columnLayout = {
      {title="Layout",x="0%",width="30%",columnKey="name",},
      {title="Description",x="30%",width="80%-40",columnKey="description",},
      {title="A",x="100%-40",width=20,columnKey="isActiveLayout",renderer="CellRendererBorderImage",},
      {title="M",x="100%-20",width=20,columnKey="isMasterLayout",renderer="CellRendererBorderImage",},
    },
  },MuMeM.Prompt.Preferences.Dialog._visuals.rootPane)

  -- --- Layout delete ---
  MuMeM.Prompt.Preferences.Dialog._visuals.buttonDelete = MuMeM.Widget.TextButton:new({
    _text = "delete",
    _x = 15, _y = 220,
    _width = 80, _height = 20,
    _clickCallback = function (event) MuMeM.Prompt.Preferences.Dialog.deletePromptLayout(event) end,
  }, MuMeM.Prompt.Preferences.Dialog._visuals.rootPane)

  -- --- Layout copy ---
  MuMeM.Prompt.Preferences.Dialog._visuals.buttonCopy = MuMeM.Widget.TextButton:new({
    _text = "copy",
    _x = "50%-85", _y = 220,
    _width = 80, _height = 20,
    _clickCallback = function (event) MuMeM.Prompt.Preferences.Dialog.copyPromptLayout(event) end,
  }, MuMeM.Prompt.Preferences.Dialog._visuals.rootPane)
    
  -- --- Layout rename ---
  MuMeM.Prompt.Preferences.Dialog._visuals.buttonRename = MuMeM.Widget.TextButton:new({
    _text = "rename",
    _x = "50%+5", _y = 220,
    _width = 80, _height = 20,
    _clickCallback = function (event) MuMeM.Prompt.Preferences.Dialog.renamePromptLayout(event) end,
  }, MuMeM.Prompt.Preferences.Dialog._visuals.rootPane)

  -- --- Layout apply  ---
  MuMeM.Prompt.Preferences.Dialog._visuals.buttonApply = MuMeM.Widget.TextButton:new({
    _text = "activate",
    _x = "100%-95", _y = 220,
    _width = 80, _height = 20,
    _clickCallback = function (event) MuMeM.Prompt.Preferences.Dialog.applyPromptLayout(event) end,
  }, MuMeM.Prompt.Preferences.Dialog._visuals.rootPane)

  -- --- separator line  ---
  MuMeM.Prompt.Preferences.Dialog._visuals.separator1 = Geyser.Label:new({
    x = 10, y = -50,
    width = "100%-20", height = 2,
    stylesheet = "background-color: darkGray;",
  }, MuMeM.Prompt.Preferences.Dialog._visuals.rootPane)

  -- --- Revert button ---  
  MuMeM.Prompt.Preferences.Dialog._visuals.buttonRevert = MuMeM.Widget.TextButton:new({
    _text = "Revert",
    _x = 10, _y = -40,
    _width = 100, _height = 30,
    _clickCallback = function (event) MuMeM.Prompt.Preferences.Dialog.revertPromptLayout(event) end,
  }, MuMeM.Prompt.Preferences.Dialog._visuals.rootPane)

  -- --- Edit button ---  
  MuMeM.Prompt.Preferences.Dialog._visuals.buttonEdit = MuMeM.Widget.TextButton:new({
    _text = "Edit",
    _x = "50%-50", _y = -40,
    _width = 100, _height = 30,
    _clickCallback = function (event) MuMeM.Prompt.Preferences.Dialog.enableEditMode(event) end,
  }, MuMeM.Prompt.Preferences.Dialog._visuals.rootPane)
    
  -- --- Close button ---  
  MuMeM.Prompt.Preferences.Dialog._visuals.buttonClose = MuMeM.Widget.TextButton:new({
    _text = "Close",
    _x = "100%-110", _y = -40,
    _width = 100, _height = 30,
    _clickCallback = function (event) MuMeM.Prompt.Preferences.Dialog.hide() end,
  }, MuMeM.Prompt.Preferences.Dialog._visuals.rootPane)

  -- --- selection changed event ---
  registerAnonymousEventHandler("MuMeM.Widget.ItemList.SelectionChanged.MuMeM.Prompt.Preferences.Dialog._visuals.layoutList",
                                function() MuMeM.Prompt.Preferences.Dialog.layoutSelectionChanged() end)

  MuMeM.Prompt.Preferences.Dialog.layoutSelectionChanged()
end

function MuMeM.Prompt.Preferences.Dialog.updateDialogButtons()
  local activeLayoutName = MuMeM.Prompt.Layout.Manager.activeLayoutName()
  local mayEdit = activeLayoutName ~= nil and not MuMeM.Prompt.Layout.Manager.isMasterLayout(activeLayoutName)
  local mayRevert = activeLayoutName ~= nil
  
  MuMeM.Prompt.Preferences.Dialog._visuals.buttonEdit:setEnabled(mayEdit)
  MuMeM.Prompt.Preferences.Dialog._visuals.buttonRevert:setEnabled(mayRevert)
end

function MuMeM.Prompt.Preferences.Dialog.updateWindowList()
  local activeLayoutName = MuMeM.Prompt.Layout.Manager.activeLayoutName()
  local activeLayoutImage = nil
  local dataTable = {}
  
  for k,v in pairs(MuMeM.Prompt.Layout) do
    activeLayoutImage = nil
    if v.className == nil and v.name ~= nil and v.description ~= nil and v.editable ~= nil then
      if activeLayoutName == v.name then activeLayoutImage = MuMeM.Core.IO.concatPath(MuMeM.Prompt.getResourceDir(), "config", "valid.svg") else activeLayoutImage = nil end
      table.insert(dataTable, {
                      name = v.name, 
                      description = v.description,
                      isActiveLayout = activeLayoutImage,
                      isMasterLayout = MuMeM.Core.IO.concatPath(MuMeM.Prompt.getResourceDir(), "config", "locked.svg"),
                      _value = {name=v.name, description=v.description, editable=v.editable},
                      _uuid = v.name,
                    })
    end
  end
  
  local savedLayouts = MuMeM.Prompt.Layout.Manager.getLayoutList(true)
  for k,v in pairs(savedLayouts) do
    if activeLayoutName == v.name then activeLayoutImage = MuMeM.Core.IO.concatPath(MuMeM.Prompt.getResourceDir(), "config", "valid.svg") else activeLayoutImage = nil end
    table.insert(dataTable, {
                    name = v.name, 
                    description = v.description,
                    isActiveLayout = activeLayoutImage,
                    isMasterLayout = MuMeM.Core.IO.concatPath(MuMeM.Prompt.getResourceDir(), "config", "edit.svg"),
                    _value = {name=v.name, description=v.description, editable=v.editable},
                    _uuid = v.name,
                  })
  end
  
  MuMeM.Prompt.Preferences.Dialog._visuals.layoutList:setDataTable(dataTable)
end

function MuMeM.Prompt.Preferences.Dialog.layoutSelectionChanged()
  local selectedValue = MuMeM.Prompt.Preferences.Dialog._visuals.layoutList:selectedValue()
  MuMeM.Prompt.Preferences.Dialog._visuals.buttonRename:setEnabled(selectedValue ~= nil and selectedValue.editable)
  MuMeM.Prompt.Preferences.Dialog._visuals.buttonDelete:setEnabled(selectedValue ~= nil and selectedValue.editable and selectedValue.name ~= MuMeM.Prompt.Layout.Manager.activeLayoutName())
  MuMeM.Prompt.Preferences.Dialog._visuals.buttonCopy:setEnabled(selectedValue ~= nil)
  MuMeM.Prompt.Preferences.Dialog._visuals.buttonApply:setEnabled(selectedValue ~= nil)
end

function MuMeM.Prompt.Preferences.Dialog.applyPromptLayout(event)
  local selectedValue = MuMeM.Prompt.Preferences.Dialog._visuals.layoutList:selectedValue()
  if selectedValue then
    MuMeM.Prompt.Layout.Manager.activateLayout(selectedValue.name)
    MuMeM.Prompt.Preferences.Dialog.layoutSelectionChanged()
    MuMeM.Prompt.Preferences.save()
    
    MuMeM.Prompt.Preferences.Dialog.updateWindowList()
    MuMeM.Prompt.Preferences.Dialog.updateDialogButtons()
  end
end

function MuMeM.Prompt.Preferences.Dialog.copyPromptLayout(event)
  local selectedValue = MuMeM.Prompt.Preferences.Dialog._visuals.layoutList:selectedValue()
  if selectedValue then
    MuMeM.Prompt.Preferences.RenameDialog.show(MuMeM.Prompt.Preferences.RenameDialog.RENAME_AND_COPY,
                                                selectedValue.name, selectedValue.description)
  end
end

function MuMeM.Prompt.Preferences.Dialog.renamePromptLayout(event)
  local selectedValue = MuMeM.Prompt.Preferences.Dialog._visuals.layoutList:selectedValue()
  if selectedValue and selectedValue.editable then
    MuMeM.Prompt.Preferences.RenameDialog.show(MuMeM.Prompt.Preferences.RenameDialog.RENAME_ONLY,
                                                selectedValue.name, selectedValue.description)
  end
end

function MuMeM.Prompt.Preferences.Dialog.deletePromptLayout(event)
  local selectedValue = MuMeM.Prompt.Preferences.Dialog._visuals.layoutList:selectedValue()
  if selectedValue and selectedValue.editable then
    MuMeM.Prompt.Preferences.DeleteDialog.show(selectedValue.name, selectedValue.description)
  end
end

function MuMeM.Prompt.Preferences.Dialog.revertPromptLayout(event)
  MuMeM.Prompt.Layout.Manager.activateLayout(nil)
  MuMeM.Prompt.Preferences.Dialog.layoutSelectionChanged()
  MuMeM.Prompt.Preferences.save()

  MuMeM.Prompt.Preferences.Dialog.updateWindowList()  
  MuMeM.Prompt.Preferences.Dialog.updateDialogButtons()
end

function MuMeM.Prompt.Preferences.Dialog.enableEditMode(event)
  MuMeM.Prompt.enableEditMode()
end

function MuMeM.Prompt.Preferences.Dialog.show()
  if not MuMeM.Prompt.Preferences.Dialog._visuals then
    MuMeM.Prompt.Preferences.Dialog.create()
  end
 
  if MuMeM.Prompt.Preferences.Dialog._isHidden then
    MuMeM.Prompt.Preferences.Dialog._isHidden = false
    MuMeM.Prompt.Preferences.Dialog.updateWindowList()
    MuMeM.Prompt.Preferences.Dialog.updateDialogButtons()
    MuMeM.Prompt.Preferences.Dialog._visuals.rootPane:show()
  end
end

function MuMeM.Prompt.Preferences.Dialog.hide()
  if not MuMeM.Prompt.Preferences.Dialog._isHidden then
    MuMeM.Prompt.Preferences.Dialog._isHidden = true
    MuMeM.Prompt.Preferences.Dialog._visuals.rootPane:hide()
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Preferences.RenameDialog</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Preferences.RenameDialog = MuMeM.Prompt.Preferences.RenameDialog or 
{
  RENAME_ONLY = 1,
  RENAME_AND_COPY = 2,
  
  _masterLayoutName = nil,
  _masterLayoutDesc = nil,
  _action = 1,                          -- RENAME_ONLY
  
  _errorMessage = "",
  
  _isHidden = true,
  
  _dialogWidth = 300,
  _dialogHeight = 105,
  
  _visuals = nil,

  _styleSheetRootPane = [[
    background-color: rgb(80,80,80,100);
  ]],
  
  _styleSheetBoxPane = [[
    background-color: #D3D3D3;
    border: 5px solid darkgreen;
  ]],
}

function MuMeM.Prompt.Preferences.RenameDialog.create()

  MuMeM.Prompt.Preferences.RenameDialog._visuals = {}
  
  -- --- root pane ---
  MuMeM.Prompt.Preferences.RenameDialog._visuals.rootPane = Geyser.Label:new({
    _name = "MuMeM.Prompt.Preferences.RenameDialog._visuals.rootPane",
    x = 5, y = 5,
    width = "100%-10", height = "100%-10",
    stylesheet = MuMeM.Prompt.Preferences.RenameDialog._styleSheetRootPane,
  }, MuMeM.Prompt.Preferences.Dialog._visuals.rootPane)

  -- --- box pane ---
  MuMeM.Prompt.Preferences.RenameDialog._visuals.boxPane = Geyser.Label:new({
    x = "50%-"..(MuMeM.Prompt.Preferences.RenameDialog._dialogWidth/2),
    y = 50,
    width = MuMeM.Prompt.Preferences.RenameDialog._dialogWidth,
    height = MuMeM.Prompt.Preferences.RenameDialog._dialogHeight,
    stylesheet = MuMeM.Prompt.Preferences.RenameDialog._styleSheetBoxPane,
  }, MuMeM.Prompt.Preferences.RenameDialog._visuals.rootPane)

  -- --- name ---
  MuMeM.Prompt.Preferences.RenameDialog._visuals.nameLabel = MuMeM.Widget.Label:new({
    _x = 15, _y = 10, 
    _width = 50, _height = 20,
    _text = "Name:"
  },MuMeM.Prompt.Preferences.RenameDialog._visuals.boxPane)

  MuMeM.Prompt.Preferences.RenameDialog._visuals.nameInput = MuMeM.Widget.TextInput:new({
    _x = 65, _y = 10, 
    _width = 120, _height = 20,
  },MuMeM.Prompt.Preferences.RenameDialog._visuals.boxPane)
  
    -- --- description ---
  MuMeM.Prompt.Preferences.RenameDialog._visuals.descLabel = MuMeM.Widget.Label:new({
    _x = 15, _y = 31, 
    _width = 50, _height = 20,
    _text = "Descr:"
  },MuMeM.Prompt.Preferences.RenameDialog._visuals.boxPane)

  MuMeM.Prompt.Preferences.RenameDialog._visuals.descInput = MuMeM.Widget.TextInput:new({
    _x = 65, _y = 31, 
    _width = "100%-75", _height = 20,
  },MuMeM.Prompt.Preferences.RenameDialog._visuals.boxPane)
  
    -- --- errorLabel ---
  MuMeM.Prompt.Preferences.RenameDialog._visuals.errorLabel = MuMeM.Widget.Label:new({
    _x = 5, _y = 52, 
    _width = "100%-10", _height = 20,
    _text = "Name:"
  },MuMeM.Prompt.Preferences.RenameDialog._visuals.boxPane)
  MuMeM.Prompt.Preferences.RenameDialog._visuals.errorLabel:editStyleSheet({
            ["color"]="red",
            ["qproperty-alignment"]="'AlignHCenter | AlignVCenter'",
        });

  -- --- cancel ---
  MuMeM.Prompt.Preferences.RenameDialog._visuals.buttonDelete = MuMeM.Widget.TextButton:new({
    _text = "cancel",
    _x = 15, _y = -30,
    _width = 80, _height = 20,
    _clickCallback = function (event) MuMeM.Prompt.Preferences.RenameDialog.hide() end,
  }, MuMeM.Prompt.Preferences.RenameDialog._visuals.boxPane)
  
  -- --- submit ---
  MuMeM.Prompt.Preferences.RenameDialog._visuals.buttonSubmit = MuMeM.Widget.TextButton:new({
    _text = "submit",
    _x = "100%-95", _y = -30,
    _width = 80, _height = 20,
    _clickCallback = function (event) MuMeM.Prompt.Preferences.RenameDialog.submit() end,
  }, MuMeM.Prompt.Preferences.RenameDialog._visuals.boxPane)

end

function MuMeM.Prompt.Preferences.RenameDialog.submit(event)
  MuMeM.Prompt.Preferences.RenameDialog.wipeErrorMessage()

  local layoutName = MuMeM.Prompt.Preferences.RenameDialog._visuals.nameInput:value()
  local layoutDesc = MuMeM.Prompt.Preferences.RenameDialog._visuals.descInput:value()
  
  if not layoutName or layoutName == "" then
    MuMeM.Prompt.Preferences.RenameDialog.addErrorMessage("Name is empty ")
  elseif string.len(layoutName) &gt; 20 then
    MuMeM.Prompt.Preferences.RenameDialog.addErrorMessage("Name too long ")
  end
  
  if not layoutDesc or layoutDesc == "" then
    MuMeM.Prompt.Preferences.RenameDialog.addErrorMessage("Desc is empty ")
  elseif string.len(layoutDesc) &gt; 100 then
    MuMeM.Prompt.Preferences.RenameDialog.addErrorMessage("Desc too long ")
  end
  
  if not MuMeM.Prompt.Preferences.RenameDialog.hasError() then
    if MuMeM.Prompt.Preferences.RenameDialog._action == MuMeM.Prompt.Preferences.RenameDialog.RENAME_AND_COPY then
      if MuMeM.Prompt.Layout.Manager.layoutExists(layoutName) then               -- EXPENSIVE call!
        MuMeM.Prompt.Preferences.RenameDialog.addErrorMessage("Name already exists ")
      else
        local copyRtc = MuMeM.Prompt.Layout.Manager.copyLayout(
                                      MuMeM.Prompt.Preferences.RenameDialog._masterLayoutName,
                                      layoutName, layoutDesc
                                    )
        if not copyRtc then
          MuMeM.Prompt.Preferences.RenameDialog.addErrorMessage("Could not copy layout")
        end
      end
    elseif MuMeM.Prompt.Preferences.RenameDialog._action == MuMeM.Prompt.Preferences.RenameDialog.RENAME_ONLY then
      if layoutName ~= MuMeM.Prompt.Preferences.RenameDialog._masterLayoutName
          and MuMeM.Prompt.Layout.Manager.layoutExists(layoutName)                -- EXPENSIVE call!
      then
        MuMeM.Prompt.Preferences.RenameDialog.addErrorMessage("Name already exists ")
      else
        local renameRtc = MuMeM.Prompt.Layout.Manager.moveLayout(
                                      MuMeM.Prompt.Preferences.RenameDialog._masterLayoutName,
                                      layoutName, layoutDesc
                                    )
        if not renameRtc then
          MuMeM.Prompt.Preferences.RenameDialog.addErrorMessage("Could not rename layout")
        end
      end
    end
  end

  if MuMeM.Prompt.Preferences.RenameDialog.hasError() then
    MuMeM.Prompt.Preferences.RenameDialog.showErrorMessage()
  else
    MuMeM.Prompt.Preferences.RenameDialog.hide()
    MuMeM.Prompt.Preferences.Dialog.updateWindowList()
  end
end

function MuMeM.Prompt.Preferences.RenameDialog.hasError()
  return MuMeM.Prompt.Preferences.RenameDialog._errorMessage ~= ""
end

function MuMeM.Prompt.Preferences.RenameDialog.addErrorMessage(errMsg)
  if MuMeM.Prompt.Preferences.RenameDialog._errorMessage ~= "" then
    MuMeM.Prompt.Preferences.RenameDialog._errorMessage =
          MuMeM.Prompt.Preferences.RenameDialog._errorMessage 
          .. ", "
          .. errMsg
  else
    MuMeM.Prompt.Preferences.RenameDialog._errorMessage = errMsg
  end
end

function MuMeM.Prompt.Preferences.RenameDialog.showErrorMessage()
  MuMeM.Prompt.Preferences.RenameDialog._visuals.errorLabel:setText(MuMeM.Prompt.Preferences.RenameDialog._errorMessage)
end

function MuMeM.Prompt.Preferences.RenameDialog.wipeErrorMessage()
  MuMeM.Prompt.Preferences.RenameDialog._errorMessage = ""
  MuMeM.Prompt.Preferences.RenameDialog._visuals.errorLabel:setText("")
end

function MuMeM.Prompt.Preferences.RenameDialog.show(action, layoutName, layoutDesc)
  MuMeM.Prompt.Preferences.RenameDialog._masterLayoutName = layoutName
  MuMeM.Prompt.Preferences.RenameDialog._masterLayoutDesc = layoutDesc
  MuMeM.Prompt.Preferences.RenameDialog._action = action
  
  if not MuMeM.Prompt.Preferences.RenameDialog._visuals then
    MuMeM.Prompt.Preferences.RenameDialog.create()
  end
  
  if MuMeM.Prompt.Preferences.RenameDialog._isHidden then
    MuMeM.Prompt.Preferences.RenameDialog._isHidden = false
    if MuMeM.Prompt.Preferences.RenameDialog._action == MuMeM.Prompt.Preferences.RenameDialog.RENAME_AND_COPY then
      MuMeM.Prompt.Preferences.RenameDialog._visuals.buttonSubmit:setText("copy")
    else
      MuMeM.Prompt.Preferences.RenameDialog._visuals.buttonSubmit:setText("rename")
    end
    MuMeM.Prompt.Preferences.RenameDialog._visuals.nameInput:setText(MuMeM.Prompt.Preferences.RenameDialog._masterLayoutName)
    MuMeM.Prompt.Preferences.RenameDialog._visuals.descInput:setText(MuMeM.Prompt.Preferences.RenameDialog._masterLayoutDesc)
    MuMeM.Prompt.Preferences.RenameDialog.wipeErrorMessage()
    MuMeM.Prompt.Preferences.RenameDialog._visuals.rootPane:raiseAll()
    MuMeM.Prompt.Preferences.RenameDialog._visuals.rootPane:show()
  end
end

function MuMeM.Prompt.Preferences.RenameDialog.hide()
  if not MuMeM.Prompt.Preferences.RenameDialog._isHidden then
    MuMeM.Prompt.Preferences.RenameDialog._isHidden = true
    MuMeM.Prompt.Preferences.RenameDialog._visuals.rootPane:hide()
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Preferences.DeleteDialog</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Preferences.DeleteDialog = MuMeM.Prompt.Preferences.DeleteDialog or 
{
  _masterLayoutName = nil,
  _masterLayoutDescription = nil,

  _isHidden = true,
  
  _dialogWidth = 300,
  _dialogHeight = 105,
  
  _visuals = nil,

  _styleSheetRootPane = [[
    background-color: rgb(80,80,80,100);
  ]],
  
  _styleSheetBoxPane = [[
    background-color: #D3D3D3;
    border: 5px solid red;
  ]],
}

function MuMeM.Prompt.Preferences.DeleteDialog.create()

  MuMeM.Prompt.Preferences.DeleteDialog._visuals = {}
  
  -- --- root pane ---
  MuMeM.Prompt.Preferences.DeleteDialog._visuals.rootPane = Geyser.Label:new({
    _name = "MuMeM.Prompt.Preferences.DeleteDialog._visuals.rootPane",
    x = 5, y = 5,
    width = "100%-10", height = "100%-10",
    stylesheet = MuMeM.Prompt.Preferences.DeleteDialog._styleSheetRootPane,
  }, MuMeM.Prompt.Preferences.Dialog._visuals.rootPane)

  -- --- box pane ---
  MuMeM.Prompt.Preferences.DeleteDialog._visuals.boxPane = Geyser.Label:new({
    x = "50%-"..(MuMeM.Prompt.Preferences.DeleteDialog._dialogWidth/2),
    y = 50,
    width = MuMeM.Prompt.Preferences.DeleteDialog._dialogWidth,
    height = MuMeM.Prompt.Preferences.DeleteDialog._dialogHeight,
    stylesheet = MuMeM.Prompt.Preferences.DeleteDialog._styleSheetBoxPane,
  }, MuMeM.Prompt.Preferences.DeleteDialog._visuals.rootPane)

  -- --- message ---
  MuMeM.Prompt.Preferences.DeleteDialog._visuals.message = MuMeM.Widget.Label:new({
    _x = 10, _y = 10, 
    _width = "100%-20", _height = 50,
    _text = "&lt;b&gt;Really delete this layout?&lt;/b&gt;"
  },MuMeM.Prompt.Preferences.DeleteDialog._visuals.boxPane)
  MuMeM.Prompt.Preferences.DeleteDialog._visuals.message:editStyleSheet({
      ["qproperty-alignment"] = "'AlignHCenter | AlignVCenter'",
  })

  -- --- cancel ---
  MuMeM.Prompt.Preferences.DeleteDialog._visuals.buttonDelete = MuMeM.Widget.TextButton:new({
    _text = "Cancel",
    _x = 15, _y = -40,
    _width = 80, _height = 30,
    _clickCallback = function (event) MuMeM.Prompt.Preferences.DeleteDialog.hide() end,
  }, MuMeM.Prompt.Preferences.DeleteDialog._visuals.boxPane)
  
  -- --- delete ---
  MuMeM.Prompt.Preferences.DeleteDialog._visuals.buttonDelete = MuMeM.Widget.TextButton:new({
    _text = "Delete",
    _x = "100%-95", _y = -40,
    _width = 80, _height = 30,
    _clickCallback = function (event) MuMeM.Prompt.Preferences.DeleteDialog.delete() end,
  }, MuMeM.Prompt.Preferences.DeleteDialog._visuals.boxPane)

end

function MuMeM.Prompt.Preferences.DeleteDialog.delete(event)  
  MuMeM.Prompt.Layout.Manager.deleteLayout(MuMeM.Prompt.Preferences.RenameDialog._masterLayoutName)
  MuMeM.Prompt.Preferences.Dialog.updateWindowList()

  MuMeM.Prompt.Preferences.DeleteDialog.hide()
end

function MuMeM.Prompt.Preferences.DeleteDialog.show(layoutName, layoutDescription)
  if not MuMeM.Prompt.Preferences.DeleteDialog._visuals then
    MuMeM.Prompt.Preferences.DeleteDialog.create()
  end
    
  if MuMeM.Prompt.Preferences.DeleteDialog._isHidden then
    MuMeM.Prompt.Preferences.DeleteDialog._isHidden = false
    MuMeM.Prompt.Preferences.RenameDialog._masterLayoutName = layoutName
    MuMeM.Prompt.Preferences.RenameDialog._masterLayoutDescription = layoutDescription
    
    MuMeM.Prompt.Preferences.DeleteDialog._visuals.message:setText(
        "&lt;b&gt;Really delete this layout?&lt;/b&gt;&lt;br&gt;"
        ..MuMeM.Prompt.Preferences.RenameDialog._masterLayoutName
        .."&lt;br&gt;"
        ..MuMeM.Prompt.Preferences.RenameDialog._masterLayoutDescription
    )
    
    MuMeM.Prompt.Preferences.DeleteDialog._visuals.rootPane:raiseAll()
    MuMeM.Prompt.Preferences.DeleteDialog._visuals.rootPane:show()
  end
end

function MuMeM.Prompt.Preferences.DeleteDialog.hide()
  if not MuMeM.Prompt.Preferences.DeleteDialog._isHidden then
    MuMeM.Prompt.Preferences.DeleteDialog._isHidden = true
    MuMeM.Prompt.Preferences.DeleteDialog._visuals.rootPane:hide()
  end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>MuMeM.Prompt.Config</name>
				<packageName></packageName>
				<script>MuMeM.Prompt.Config = MuMeM.Prompt.Config or {}</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Config.Factory</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Config.Factory = MuMeM.Prompt.Config.Factory or 
{
  _classMap = {
    -- ["MuMeM.Prompt.Widget.Gauge0"] = "MuMeM.Prompt.Config.DialogBasic",  &lt;== OVERRIDES Gauge3
    ["MuMeM.Prompt.Widget.Gauge3"] = "MuMeM.Prompt.Config.DialogGauge3",
    ["MuMeM.Prompt.Widget.Gauge5"] = "MuMeM.Prompt.Config.DialogGauge3",
    ["MuMeM.Prompt.Widget.TextWidget"] = "MuMeM.Prompt.Config.DialogBasic",
    ["MuMeM.Prompt.Widget.IconWidget"] = "MuMeM.Prompt.Config.DialogBasic",
  },
  
  _activeDialogInstance = nil,
} 

function MuMeM.Prompt.Config.Factory.configureMe(widget)
  local dialog = nil
  
  MuMeM.Prompt.Config.Factory.closeAll()
  
  for widgetClass,dialogClass in pairs(MuMeM.Prompt.Config.Factory._classMap) do
    if mumem_isa(widget, widgetClass) then
      dialog = loadstring("return " .. dialogClass)()
    end
  end
    
  if dialog == nil then
    MuMeM.Log.notice("MuMeM.Prompt.Config.Factory.configureMe() no edit-dialog associated", "MuMeM.Prompt")
    return
  end

  if not dialog.instance then
    dialog.instance = dialog:new()
    dialog.instance:create()
  end
  
  dialog.instance:show(widget)
  
  MuMeM.Prompt.Config.Factory._activeDialogInstance = dialog.instance
end

function MuMeM.Prompt.Config.Factory.closeAll()
  for widgetClass,dialogClass in pairs(MuMeM.Prompt.Config.Factory._classMap) do
    dialog = loadstring("return " .. dialogClass)()
    if dialog.instance then
      dialog.instance:hide()
    end
  end
  
  MuMeM.Prompt.Config.Factory._activeDialogInstance = nil
end

</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Config.PanelDialog</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Config.PanelDialog = MuMeM.Prompt.Config.PanelDialog or
{
  instance = false,
  
  _name = "UndefinedPanelDialog",
  _isHidden = true,
  
  _dialogWidth = 300,
  _dialogHeight = 200,
  
  _visuals = false,
  
  _styleSheetPane = Geyser.StyleSheet:new([[
    background-color: #D3D3D3;
    border: 5px solid darkgreen;
  ]]),

  _styleSheetPanel = Geyser.StyleSheet:new([[
    background-color: transparent;
    border: 1px solid black;
  ]]),
}

mumem_inherit("MuMeM.Prompt.Config.PanelDialog", "MuMeM.Prompt.Config.PanelDialog")


function MuMeM.Prompt.Config.PanelDialog:new(props)
  local me = props or {}
  
  me._name = me._name or MuMeM.Prompt.Layout.Manager.nameGen("PanelDialog")
    
  setmetatable(me, self)
  self.__index = self
 
  return me
end

function MuMeM.Prompt.Config.PanelDialog:create(force)
  if self._visuals and not force then
    return
  end
  
  self._isHidden = false
  self._visuals = {}
  
  -- --- root pane ---
  self._visuals.rootPane = Geyser.Label:new({
    _name = "MuMeM.Prompt.Preferences.Dialog._visuals.rootPane",
    x = "50%-"..(MuMeM.Prompt.Config.PanelDialog._dialogWidth/2),
    y = "50%-"..(MuMeM.Prompt.Config.PanelDialog._dialogHeight/2),
    width = MuMeM.Prompt.Config.PanelDialog._dialogWidth,
    height = MuMeM.Prompt.Config.PanelDialog._dialogHeight,
    stylesheet = MuMeM.Prompt.Config.PanelDialog._styleSheetPane:getCSS(),
  })

  -- --- info box ---  
  self._visuals.infoBox = MuMeM.Widget.Label:new({
    _text = "Click on the bars/gauges and statuses&lt;br&gt;to configure them.&lt;br&gt;Click on the (+) below to add widgets.",
    _x = 10, _y = 10,
    _width = "100%-20", _height = 60,
    _clickCallback = function (event) MuMeM.Prompt.disableEditMode() end,
  }, self._visuals.rootPane)
  self._visuals.infoBox:editStyleSheet({
    ["border"] = "3px solid black",
    ["qproperty-alignment"] = "'AlignHCenter | AlignVCenter'",
    ["background-color"] = "darkgreen",
    ["color"] = "white",
  })
  
  -- --- panels ---
  self._visuals.panels = {}
  self:createPanel("Top Panel", 90)
  self:createPanel("Bottom Panel", 120)

  -- --- Revert button ---  
  self._visuals.buttonClose = MuMeM.Widget.TextButton:new({
    _text = "Revert",
    _x = "10", _y = -40,
    _width = 100, _height = 30,
    _clickCallback = function(event) self:revertLayout() end,
  }, self._visuals.rootPane)
    
  -- --- Save button ---  
  self._visuals.buttonSave = MuMeM.Widget.TextButton:new({
    _text = "Save",
    _x = "100%-110", _y = -40,
    _width = 100, _height = 30,
    _clickCallback = function(event) self:saveLayout() end,
  }, self._visuals.rootPane)
  
  -- update visibility
  self:updatePanelVisibility()
end

function MuMeM.Prompt.Config.PanelDialog:createPanel(panelName, panelY)
  self._visuals.panels[panelName] = {}
  local panelVisual = self._visuals.panels[panelName]    -- shorthand / shortcut / pointer
  local visibilityIcon = "hidden.svg"

  -- --- panel box ---
  panelVisual.pane = MuMeM.Widget.Label:new({
    _x = 10, _y = panelY, 
    _width = "100%-20", _height = 20,
    _text = panelName,
  },self._visuals.rootPane)
  panelVisual.pane:editStyleSheet({border="1px solid black"})

  -- --- panel visibility ---
  panelVisual.visibility = MuMeM.Widget.BorderImage:new({
    _x = -45, _y = 0, 
    _width = 20, _height = 20,
    _image = MuMeM.Core.IO.concatPath(MuMeM.Prompt.getResourceDir(), "config", visibilityIcon),
  },panelVisual.pane)
  
  -- --- add widget ---
  panelVisual.addWidget = MuMeM.Widget.BorderImage:new({
    _x = -20, _y = 0, 
    _width = 20, _height = 20,
    _image = MuMeM.Core.IO.concatPath(MuMeM.Prompt.getResourceDir(), "config", "add.svg"),
    _clickCallback = function(event) self:openAddWidget(panelVisual.addWidget, panelName, event) end,
  },panelVisual.pane)
end

function MuMeM.Prompt.Config.PanelDialog:updatePanelVisibility()
  for panelName,panelVisual in pairs(self._visuals.panels) do
    local visibilityIcon = "hidden.svg"
    if table.contains(MuMeM.Prompt.Layout.Manager.getPanelNames(),panelName) then
      visibilityIcon = "visible.svg"
    end    
    panelVisual.visibility:setImage(MuMeM.Core.IO.concatPath(MuMeM.Prompt.getResourceDir(), "config", visibilityIcon))
  end
end

function MuMeM.Prompt.Config.PanelDialog:openAddWidget(widget, panelName, event)
  self._addWidgetDialog = MuMeM.Widget.ItemSelection:new({
    _x = event.x,
    _y = event.y,
    _width = 250,
    _anchor = "center",
    _itemSelectedCallback = function(selectedValue) self:closeAddWidget(selectedValue, panelName) end,
  },widget:window())
  
  local dataList = {}
  local sortedKeys = table.keys(MuMeM.Prompt.Widget)
  table.sort(sortedKeys)
  for _,className in pairs(sortedKeys) do
    if mumem_isa(MuMeM.Prompt.Widget[className],"MuMeM.Prompt.Widget.Widget") 
        and MuMeM.Prompt.Widget[className].classSelectable == true
    then
      table.insert(dataList, {title=className, _value="MuMeM.Prompt.Widget."..className})
    end
  end
  self._addWidgetDialog:setDataList(dataList)
end

function MuMeM.Prompt.Config.PanelDialog:closeAddWidget(selectedClassName, panelName)
  if selectedClassName then
    if not MuMeM.Prompt.Layout.Manager.panelExists(panelName) then
        panel = MuMeM.Prompt.Layout.Manager.deployPanelSimple(panelName)
    end
  
    local widget = MuMeM.Prompt.Layout.Manager.deployWidget(panelName, selectedClassName)
    widget:enableEditMode()
  end

  self._addWidgetDialog:destroy()
  self._addWidgetDialog = nil

  self:updatePanelVisibility()            -- Just do it, Nike!
end

function MuMeM.Prompt.Config.PanelDialog:revertLayout()
  MuMeM.Prompt.disableEditMode()

  MuMeM.Prompt.Layout.Manager.activateLayout(MuMeM.Prompt.Layout.Manager.activeLayoutName())
end

function MuMeM.Prompt.Config.PanelDialog:saveLayout()
  MuMeM.Prompt.disableEditMode() 

  local layoutDefinition = MuMeM.Prompt.Layout.Manager.assembleLayoutDefintion()
  MuMeM.Prompt.Layout.Manager.saveLayout(layoutDefinition)
end

function MuMeM.Prompt.Config.PanelDialog:isHidden()
  return self._isHidden
end

function MuMeM.Prompt.Config.PanelDialog:show()
   if self:isHidden() then
    self._isHidden = false
    self:updatePanelVisibility()
    self._visuals.rootPane:show()
  end
end

function MuMeM.Prompt.Config.PanelDialog:hide()
  if not self:isHidden() then
    self._isHidden = true
    self._visuals.rootPane:hide()
  end
end

function MuMeM.Prompt.Config.PanelDialog.open()
  if not MuMeM.Prompt.Config.PanelDialog.instance then
    MuMeM.Prompt.Config.PanelDialog.instance = MuMeM.Prompt.Config.PanelDialog:new()
    MuMeM.Prompt.Config.PanelDialog.instance:create()
  end
    
  MuMeM.Prompt.Config.PanelDialog.instance:show()
end

function MuMeM.Prompt.Config.PanelDialog.close()
  if MuMeM.Prompt.Config.PanelDialog.instance then
    MuMeM.Prompt.Config.PanelDialog.instance:hide()
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Config.Dialog</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Config.Dialog = MuMeM.Prompt.Config.Dialog or 
{
  instance = false,
  
  _promptWidget = false,
  
  _name = null,
  _dialogX = 0,
  _dialogY = 0,
  _dialogWidth = 300,
  _dialogHeight = 310,
  
  _visuals = false,

  _styleSheetFont = Geyser.StyleSheet:new([[
    ["font-family"] = "liberation black, sans-serif"
  ]]),
  
  _styleSheetDialog = Geyser.StyleSheet:new([[
    background-color: #D3D3D3;
    border: 5px solid darkgreen;
  ]]),
  
  _styleSheetArrow = Geyser.StyleSheet:new([[
    background-color: transparent;
  ]]),
} 

mumem_inherit("MuMeM.Prompt.Config.Dialog", "MuMeM.Prompt.Config.Dialog")

function MuMeM.Prompt.Config.Dialog:new(props)
  local me = props or {}
  
  me._name = me._name or MuMeM.Prompt.Layout.Manager.nameGen("ConfigDialog")
    
  setmetatable(me, self)
  self.__index = self
 
  return me
end

function MuMeM.Prompt.Config.Dialog:create(force)
  if self._visuals and not force then
    return
  end
  if self._visuals and force then
    print("-------------------------------------")
    print("CREATTION FORCED")
    print("-------------------------------------")
  end

  local mwW,mwH = getMainWindowSize()

  self._visuals = {}
  
  -- --- dialog ---
  self._visuals.dialog = Geyser.Label:new({
    x = "50%-"..(self._dialogWidth/2),
    y = 40,
    width = self._dialogWidth,
    height = self._dialogHeight,
    stylesheet = self._styleSheetDialog:getCSS(),
  })
  
  -- --- MoveStart --
  self._visuals.moveStart = MuMeM.Widget.ImageButton:new({
    _x = 10, _y = 10, 
    _width = 25, _height = 25,
    _image = MuMeM.Core.IO.concatPath(MuMeM.Prompt.getResourceDir(), "config", "move_start.svg"),
    _imageLayer = MuMeM.Widget.ImageButton.IMAGE_LAYER_BORDER,
    _clickCallback = function(event) self:promptWidget():panel():moveWidgetStart(self:promptWidget()) end,
  },self._visuals.dialog)
  
  -- --- MoveLeft --
  self._visuals.moveLeft = MuMeM.Widget.ImageButton:new({
    _x = 40, _y = 10,
    _width = 25, _height = 25,
    _image = MuMeM.Core.IO.concatPath(MuMeM.Prompt.getResourceDir(), "config", "move_left.svg"),
    _imageLayer = MuMeM.Widget.ImageButton.IMAGE_LAYER_BORDER,
    _clickCallback = function(event) self:promptWidget():panel():moveWidgetLeft(self:promptWidget()) end,
  },self._visuals.dialog)

  -- --- title --
  self._visuals.title = MuMeM.Widget.Label:new({
    _x = 70, _y = 10,
    _width = -70, _height = 25,
    _text = "Title",
  },self._visuals.dialog)
  self._visuals.title:editStyleSheet({
    ["font-size"] = "12",
    ["border"] = "2px solid black",
    ["qproperty-alignment"] = "'AlignHCenter | AlignVCenter'",
  })

  -- --- MoveRight --
  self._visuals.moveLeft = MuMeM.Widget.ImageButton:new({
    _x = -65, _y = 10,
    _width = 25, _height = 25,
    _image = MuMeM.Core.IO.concatPath(MuMeM.Prompt.getResourceDir(), "config", "move_right.svg"),
    _imageLayer = MuMeM.Widget.ImageButton.IMAGE_LAYER_BORDER,
    _clickCallback = function(event) self:promptWidget():panel():moveWidgetRight(self:promptWidget()) end,
  },self._visuals.dialog)
  
  -- --- MoveEnd --
  self._visuals.moveLeft = MuMeM.Widget.ImageButton:new({
    _x = -35, _y = 10,
    _width = 25, _height = 25,
    _image = MuMeM.Core.IO.concatPath(MuMeM.Prompt.getResourceDir(), "config", "move_end.svg"),
    _imageLayer = MuMeM.Widget.ImageButton.IMAGE_LAYER_BORDER,
    _clickCallback = function(event) self:promptWidget():panel():moveWidgetEnd(self:promptWidget()) end,
  },self._visuals.dialog)
  
  -- --- geometry box ---
  self._visuals.geometryBox = MuMeM.Widget.Frame:new({
    _title = "Geometry",
    _x = 10, _y = 45,
    _width = "100%-20", _height = 90,
  },self._visuals.dialog)
  
  -- --- Gap Left --
  self._visuals.gapLeft = MuMeM.Widget.NumberInput:new({
    _x = 10, _y = 15, 
    _width = 80, _height = 20,
    _number = 20, _minNumber = 0, _maxNumber = 999,
    _valueChangedCallback = function(widget) self:gapLeftChanged(widget) end,
  },self._visuals.geometryBox)
  
  -- --- Gap Title --
  self._visuals.gapTitle = MuMeM.Widget.Label:new({
    _x = "50%-30", _y = 15,
    _width = 60, _height = 20,
    _text = "&lt; Gap &gt;",
  },self._visuals.geometryBox)
  self._visuals.gapTitle:editStyleSheet({
    ["qproperty-alignment"] = "'AlignHCenter | AlignVCenter'",
  })
  
  -- --- Gap Right --
  self._visuals.gapRight = MuMeM.Widget.NumberInput:new({
    _x = -90, _y = 15, 
    _width = 80, _height = 20,
    _number = 20, _minNumber = 0, _maxNumber = 999,
    _valueChangedCallback = function(widget) self:gapRightChanged(widget) end,
  },self._visuals.geometryBox)
  
  -- --- Width --
  self._visuals.widthInfo = MuMeM.Widget.Label:new({
    _x = 10, _y = 40,
    _width = "100%-20", _height = 40,
    _text = "Width",
  },self._visuals.geometryBox)
  self._visuals.widthInfo:editStyleSheet({
    ["qproperty-alignment"] = "'AlignHCenter | AlignVCenter'",
  })
  
  -- --- Remove button ---  
  self._visuals.buttonClose = MuMeM.Widget.TextButton:new({
    _text = "remove",
    _x = "10", _y = -30,
    _width = 100, _height = 20,
    _clickCallback = function(event) self:removeWidget() end,
  },self._visuals.dialog)
    
  -- --- Close button ---  
  self._visuals.buttonSave = MuMeM.Widget.TextButton:new({
    _text = "close",
    _x = "100%-110", _y = -30,
    _width = 100, _height = 20,
    _clickCallback = function(event) self:closeSelf() end,
  },self._visuals.dialog)
end

function MuMeM.Prompt.Config.Dialog:gapLeftChanged(widget)
  self:promptWidget():setMarginLeft(widget:value())
end

function MuMeM.Prompt.Config.Dialog:gapRightChanged(widget)
  self:promptWidget():setMarginRight(widget:value())
end

function MuMeM.Prompt.Config.Dialog:name()
  return self._name
end

function MuMeM.Prompt.Config.Dialog:removeWidget()
  self:promptWidget():panel():deleteWidget(self:promptWidget())
  self:hide()

  MuMeM.Prompt.Layout.Manager.killPanelSimple(self:promptWidget():panel():panelName(), true) -- onlyIfEmpty
  MuMeM.Prompt.Config.PanelDialog.instance:updatePanelVisibility()  
end

function MuMeM.Prompt.Config.Dialog:promptWidget()
  return self._promptWidget
end

function MuMeM.Prompt.Config.Dialog:setPromptWidget(promptWidget)
  self._promptWidget = promptWidget
  self:fill()
end

function MuMeM.Prompt.Config.Dialog:fill()
  local cn = self:promptWidget().className
  local cnS,cnE = string.find(cn, "\.[^\.]*$")

  self._visuals.title:setText(string.sub(cn,cnS+1,cnE))

  self._visuals.gapLeft:setNumber(self:promptWidget():marginLeft())  
  self._visuals.gapRight:setNumber(self:promptWidget():marginRight())
  self._visuals.widthInfo:setText(self:promptWidget():widthCons():asString():gsub("elastic, ","elastic&lt;br&gt;"))
end

function MuMeM.Prompt.Config.Dialog:move(x, y)
  if x == nil then
    x = "50%-"..(self._dialogWidth/2)
  end
  
  if y == nil and self:promptWidget() then
    if self:promptWidget():panel():anchor() == "topleft" then
      y = 40
    elseif self:promptWidget():panel():anchor() == "bottomleft" then
      y = (40 + self._dialogHeight) * -1
    else
      y = 40
    end
  elseif y == nil then
    y = 40
  end
  
  self._visuals.dialog:move(x, y)
end

function MuMeM.Prompt.Config.Dialog:closeSelf()
  self:promptWidget():removeAsActiveEdit()          -- I am no longer the active widget
  self:hide()
end

function MuMeM.Prompt.Config.Dialog:show(promptWidget)
--  self:create(true)                       -- REMVOE THIS, DEBUGGING AND DEVELOPMENT ONLY
  self:setPromptWidget(promptWidget)
  self:move()
  self._visuals.dialog:show()
end

function MuMeM.Prompt.Config.Dialog:hide()
  self._visuals.dialog:hide()
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Config.DialogBasic</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Config.DialogBasic = MuMeM.Prompt.Config.DialogBasic or 
{
} 

mumem_inherit("MuMeM.Prompt.Config.DialogBasic", "MuMeM.Prompt.Config.Dialog")

function MuMeM.Prompt.Config.DialogBasic:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("DialogBasic")

  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
 
  return me
end

function MuMeM.Prompt.Config.DialogBasic:create(force)
  MuMeM.Prompt.Config.DialogBasic.parentClass.create(self, force)

  if self._visuals.content and not force then
    return
  end
 
  self._visuals.content = {}
    
  -- --- content box gauge ---
  self._visuals.content.frame = MuMeM.Widget.Frame:new({
    _title = "Content",
    _x = 10, _y = 140,
    _width = "100%-20", _height = 130,
  }, self._visuals.dialog)
  
  -- --- labelEmpty ---
  self._visuals.content.labelEmpty = MuMeM.Widget.Label:new({
    _text = "Nothing to configure",
    _x = 10, _y = 30,
    _width = "100%-20", _height = 20,
  }, self._visuals.content.frame)
  self._visuals.content.labelEmpty:editStyleSheet({
    ["qproperty-alignment"] = "'AlignHCenter | AlignVCenter'",
  })
  
end

function MuMeM.Prompt.Config.DialogBasic:fill()
  MuMeM.Prompt.Config.DialogBasic.parentClass.fill(self, force)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Prompt.Config.DialogGauge3</name>
					<packageName></packageName>
					<script>MuMeM.Prompt.Config.DialogGauge3 = MuMeM.Prompt.Config.DialogGauge3 or 
{
} 

mumem_inherit("MuMeM.Prompt.Config.DialogGauge3", "MuMeM.Prompt.Config.Dialog")

function MuMeM.Prompt.Config.DialogGauge3:new(props)
  local props = props or {}
  
  props._name = props._name or MuMeM.Prompt.Layout.Manager.nameGen("GaugeConfigDialog")

  local me = self.parentClass:new(props)

  setmetatable(me, self)
  self.__index = self
 
  return me
end

function MuMeM.Prompt.Config.DialogGauge3:create(force)
  MuMeM.Prompt.Config.DialogGauge3.parentClass.create(self, force)

  if self._visuals.content and not force then
    return
  end
   
  self._visuals.content = {}
    
  -- --- content box gauge ---
  self._visuals.content.frame = MuMeM.Widget.Frame:new({
    _title = "Gauge",
    _x = 10, _y = 140,
    _width = "100%-20", _height = 130,
  }, self._visuals.dialog)
  
  -- --- remaining ---
  self._visuals.content.labelColor1 = MuMeM.Widget.Label:new({
    _text = "Color Lost",
    _x = 10, _y = 20,
    _width = "50%-15", _height = 20,
  }, self._visuals.content.frame)
  self._visuals.content.labelColor1:editStyleSheet({
    ["qproperty-alignment"] = "'AlignRight | AlignVCenter'",
  })
  
  self._visuals.content.inputColor1 = MuMeM.Widget.TextInput:new({
    _x = "50%", _y = 20,
    _width = "50%-10", _height = 20,
  }, self._visuals.content.frame)

  -- --- contested ---
  self._visuals.content.labelColor1 = MuMeM.Widget.Label:new({
    _text = "Color Contested",
    _x = 10, _y = 41,
    _width = "50%-15", _height = 20,
  }, self._visuals.content.frame)
  self._visuals.content.labelColor1:editStyleSheet({
    ["qproperty-alignment"] = "'AlignRight | AlignVCenter'",
  })

  self._visuals.content.inputColor2 = MuMeM.Widget.TextInput:new({
    _x = "50%", _y = 41,
    _width = "50%-10", _height = 20,
  }, self._visuals.content.frame)
    
  -- --- lost ---
   self._visuals.content.labelColor3 = MuMeM.Widget.Label:new({
    _text = "Color Remaining",
    _x = 10, _y = 62,
    _width = "50%-15", _height = 20,
  }, self._visuals.content.frame)
  self._visuals.content.labelColor3:editStyleSheet({
    ["qproperty-alignment"] = "'AlignRight | AlignVCenter'",
  })

  self._visuals.content.inputColor3 = MuMeM.Widget.TextInput:new({
    _x = "50%", _y = 62,
    _width = "50%-10", _height = 20,
  }, self._visuals.content.frame)
  
    -- --- apply ---
   self._visuals.content.applyButton = MuMeM.Widget.TextButton:new({
    _text = "apply",
    _x = "100%-60", _y = 90,
    _clickCallback = function(event) self:applyGauge() end,
  }, self._visuals.content.frame)
  
end

function MuMeM.Prompt.Config.DialogGauge3:fill()
  MuMeM.Prompt.Config.DialogGauge3.parentClass.fill(self, force)
  
  for i=1,3 do
    self._visuals.content[f"inputColor{i}"]:setText(self:promptWidget():barColor(i))  
  end 
end

function MuMeM.Prompt.Config.DialogGauge3:getAndValidateColor(widgetName)
  local color = self._visuals.content[widgetName]:getText()

  local isValid = color and ( color_table[color]
                      or string.match(color,"^#[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]$")
                    )
  if isValid then
    self._visuals.content[widgetName]:clearError()
    return color
  else
    self._visuals.content[widgetName]:highlightError()
    return nil
  end
end

function MuMeM.Prompt.Config.DialogGauge3:applyGauge()
  local color = {
    self:getAndValidateColor("inputColor1"),
    self:getAndValidateColor("inputColor2"),
    self:getAndValidateColor("inputColor3"),
  }
  
  if color[1] and color[2] and color[3] then
    for i=1,3 do
      self:promptWidget():setBarColor(i, color[i])
      self:promptWidget():applyBarStyleSheet(i)
    end
  end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
</MudletPackage>
