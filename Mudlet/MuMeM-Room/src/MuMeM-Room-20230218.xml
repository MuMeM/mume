<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<Script isActive="yes" isFolder="no">
			<name>MuMeM.Room.Exits</name>
			<packageName></packageName>
			<script>function MuMeM.Room.Exits.initialize()
  MuMeM.Room.Exits._exitSanitizeMap = {
    ["north"] = "n", ["east"] = "e", ["south"] = "s", ["west"] = "w", ["up"] = "u", ["down"] = "d",
    ["n"] = "n", ["e"] = "e", ["s"] = "s", ["w"] = "w", ["u"] = "u", ["d"] = "d",
  }
   
  MuMeM.Room.Exits._exits = {}
end

function MuMeM.Room.Exits.empty()
  MuMeM.Room.Exits._exits = {}
end

function MuMeM.Room.Exits.get(direction)
  direction = MuMeM.Room.Exits.sanitizeDirection(direction)
  return MuMeM.Room.Exits._exits[direction]
end

function MuMeM.Room.Exits.add(direction, exit)
  direction = MuMeM.Room.Exits.sanitizeDirection(direction)
  MuMeM.Room.Exits._exits[direction] = exit
end

function MuMeM.Room.Exits.remove(direction)
  direction = MuMeM.Room.Exits.sanitizeDirection(direction)
  MuMeM.Room.Exits._exits[direction] = nil
end

function MuMeM.Room.Exits.update(direction, exitProps)
  direction = MuMeM.Room.Exits.sanitizeDirection(direction)
  exit = MuMeM.Room.Exits.get(direction)
  exit:updateProperties(exitProps)
end

function MuMeM.Room.Exits.exists(direction)
  direction = MuMeM.Room.Exits.sanitizeDirection(direction)
  return MuMeM.Room.Exits._exits[direction] ~= nil
end

function MuMeM.Room.Exits.isEmpty()
  --return MuMeM.Room.Exits._exits and next(MuMeM.Room.Exits._exits) == nil
  return next(MuMeM.Room.Exits._exits) == nil
end

function MuMeM.Room.Exits.sanitizeDirection(direction)
  return MuMeM.Room.Mobiles._exitSanitizeMap[direction]
end

-- ----------------------------------------------------------------------

function MuMeM.Room.Exits.getNext(key)
  local returnNext = false
  
--  if not MuMeM.Room.Exits._exits then
--    return nil, nil
--  end
  
  if not key then
    key = "_"
  end
  
  for _,k in pairs({"_","n","e","s","w","u","d"}) do
    if returnNext then
      if MuMeM.Room.Exits._exits[k] then
        return k, MuMeM.Room.Exits._exits[k]
      end
    elseif key == k then
      returnNext = true
    end
  end
  
  return nil, nil
end

function MuMeM.Room.Exits.dumpExits()
  print("Exits in room:")
  for k,v in pairs(MuMeM.Room.Exits._exits) do
    v:dump()
  end
end

-- ----------------------------------------------------------------------

function MuMeM.Room.Exits.gmcpSet(exitsTable, silently)
  MuMeM.Room.Exits.empty()
  
  for direction,exitTable in pairs(exitsTable) do
    local props = MuMeM.Room.Exit.gmcpToProps(direction, exitTable)
    MuMeM.Room.Exits.add(direction, MuMeM.Room.Exit:new(props))
  end
  
  if not silently then
    raiseEvent("MuMeM.Room.Exits")
  end
end

function MuMeM.Room.Exits.gmcpAdd(direction, exitTable)
  local props = MuMeM.Room.Exit.gmcpToProps(direction, exitTable)

  MuMeM.Room.Exits.add(exitTable.id, MuMeM.Room.Exit:new(props))

  raiseEvent("MuMeM.Room.Exits")
end

function MuMeM.Room.Exits.gmcpRemove(direction)
  MuMeM.Room.Exits.remove(direction)

  raiseEvent("MuMeM.Room.Exits")
end

function MuMeM.Room.Exits.gmcpUpdate(direction, exitTable)
  local props = MuMeM.Room.Exit.gmcpToProps(direction, exitTable)

  if MuMeM.Room.Exits.exists(direction) then
    MuMeM.Room.Exits.update(direction, props)
  else
    MuMeM.Room.Exits.add(direction, MuMeM.Room.Exit:new(props))
  end
  
  raiseEvent("MuMeM.Room.Exits")
end</script>
			<eventHandlerList />
		</Script>
	</ScriptPackage>
</MudletPackage>
