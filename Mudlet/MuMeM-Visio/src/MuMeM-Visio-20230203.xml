<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>MuMeM.Visio</name>
			<packageName></packageName>
			<script>echo("MuMeM.Visio: init\n")

MuMeM = MuMeM or {}
MuMeM.Visio = MuMeM.Visio or {}
MuMeM.Visio.Alias = MuMeM.Visio.Alias or {}
MuMeM.Visio.EventHandler = MuMeM.Visio.EventHandler or {}
MuMeM.Visio.Visual = MuMeM.Visio.Visual or {}

MuMeM.Visio.IMAGE_PACK_URL = [[https://github.com/MuMeM/mume/raw/main/Mudlet/MuMeM-Visio/image-pack.zip]]

MuMeM.Visio.Alias.visere = MuMeM.Visio.Alias.visere or
                            tempAlias("^visere$", function () MuMeM.Visio.activate() end)
                            
-- --- Module setup ----------------------------------------------

MuMeM.Visio.module_name = "MuMeM.Visio"
MuMeM.Visio.module_dependencies = {"MuMeM.Core","MuMeM.Room"}
MuMeM.modules = MuMeM.modules or {}
MuMeM.modules[MuMeM.Visio.module_name] = MuMeM.modules[MuMeM.Visio.module_name] or {module=MuMeM.Visio}</script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>MuMeM.Visio.Library</name>
				<packageName></packageName>
				<script>-- ########################################################################################################
-- # INITIALIZATION AND HELPERS
-- ########################################################################################################

function MuMeM.Visio.initialize()
  MuMeM.Visio.dataDir = getMudletHomeDir().."/MuMeM-Visio"
  MuMeM.Visio.roomImageDir = MuMeM.Visio.dataDir.."/RoomImages"
  MuMeM.Visio.mobileImageDir = MuMeM.Visio.dataDir.."/MobileImages"

  MuMeM.Visio.isRooming = false
  MuMeM.Visio.MainConsoleBackground = "OFF"   -- OFF | CENTER | BORDER | TILED
  MuMeM.Visio.isDownloading = false
  MuMeM.Visio.isUnzipping = false
  
  MuMeM.Visio.MAX_MOBILES = 12      -- will be two rows, so must be even
  
  MuMeM.Visio.createDataDir()
  MuMeM.Visio.setupGUI(false)
  
  MuMeM.Visio.log("MuMeM.Visio initialized")
end

function MuMeM.Visio.appendPath(path, append)
  if append then
    if string.sub(append,1,1) == "/" then
      return path..append
    else
      return path.."/"..append
    end
  end
  
  return path
end

function MuMeM.Visio.getDataDir(appendPath)
  return MuMeM.Visio.appendPath(MuMeM.Visio.dataDir, appendPath)
end

function MuMeM.Visio.getRoomImageDir(appendPath)
  return MuMeM.Visio.appendPath(MuMeM.Visio.roomImageDir, appendPath)
end

function MuMeM.Visio.getMobileImageDir(appendPath)
  return MuMeM.Visio.appendPath(MuMeM.Visio.mobileImageDir, appendPath)
end

function MuMeM.Visio.createDataDir()
  MuMeM.Core.IO.createDir(MuMeM.Visio.getDataDir())
end

-- ########################################################################################################
-- # Import
-- ########################################################################################################

function MuMeM.Visio.importImage()
  local path = invokeFileDialog(true, "Chose impage to import")
  if path then
    local roomHash = MuMeM.Visio.calcRoomHash()
    if roomHash and roomHash ~= "unknown" then
      if MuMeM.Core.IO.fileExists(path, MuMeM.Visio.getRoomImageDir(roomHash)) then
        MuMeM.Visio.redrawRoomImage(roomHash)
        MuMeM.Visio.log("[IMPORT] Image imported successfully")
      else
        MuMeM.Visio.log("[IMPORT] Import failed, error during copy")
      end
    else
      MuMeM.Visio.log("[IMPORT] Import failed, cannot calculate room hash")
    end
  end
end

-- ########################################################################################################
-- # UNZIP
-- ########################################################################################################

function MuMeM.Visio.unzipImagePackDone(event, ...)
  MuMeM.Visio.log("[UNZIP] Image pack sucessfully unzipped.")  
  
  MuMeM.Visio.isUnzipping = false
end
  
function MuMeM.Visio.unzipImagePackError(event, zipFile, destination)
  MuMeM.Visio.log("[UNZIP] Error while unzipping file!") 
  MuMeM.Visio.log("[UNZIP] zip-file: "..zipFile) 
  MuMeM.Visio.log("[UNZIP] destination: "..destination) 

  MuMeM.Visio.isUnzipping = false
end

function MuMeM.Visio.unzipImagePack(event, zipFile, destination)
  if not MuMeM.Core.IO.fileExists(MuMeM.Visio.getDataDir("/image-pack.zip")) then
    MuMeM.Visio.log("[UNZIP] Image pack does not exist.")
    return
  end
  
  if MuMeM.Visio.isUnzipping then
    MuMeM.Visio.log("[UNZIP] An unzip operation is already in progress")
    return
  end
  
  MuMeM.Visio.isUnzipping = true
  registerAnonymousEventHandler("sysUnzipDone", "MuMeM.Visio.unzipImagePackDone")
  registerAnonymousEventHandler("sysUnzipError", "MuMeM.Visio.unzipImagePackError")
  unzipAsync(MuMeM.Visio.getDataDir("/image-pack.zip"), MuMeM.Visio.getDataDir("/"))

  MuMeM.Visio.log("[UNZIP] Unzip of image pack started in the background.")
end

-- ########################################################################################################
-- # DOWNLOAD
-- ########################################################################################################

function MuMeM.Visio.downloadImagePackDone(event, fileName)
  if fileName ~= MuMeM.Visio.getDataDir("/image-pack.zip") then        -- not my download
    MuMeM.Visio.log("[DOWNLOAD] sysDownloadDone event received, but not my download, keep waiting...")
    return
  end

  MuMeM.Visio.log("[DOWNLOAD] Image pack successfully downloaded")  
  
  MuMeM.Visio.isDownloading = false
  
  MuMeM.Visio.unzipImagePack()
end

function MuMeM.Visio.downloadImagePackError(event, message)
  if not string.find(message, MuMeM.Visio.IMAGE_PACK_URL,nil,true) then  -- not my download
    MuMeM.Visio.log("[DOWNLOAD] sysDownloadError received, but not my download, keep waiting...")  
    return
  end
  
  MuMeM.Visio.log("[DOWNLOAD] Error while downlaoding file!") 
  MuMeM.Visio.log("[DOWNLOAD] "..message)   

  MuMeM.Visio.isDownloading = false
end

function MuMeM.Visio.downloadImagePack()
  if MuMeM.Visio.isDownloading or MuMeM.Visio.isUnzipping then
    MuMeM.Visio.log("[DOWNLOAD] File download already in progress, aborting")
    return
  end

  MuMeM.Visio.isDownloading = true
  registerAnonymousEventHandler("sysDownloadDone", "MuMeM.Visio.downloadImagePackDone")
  registerAnonymousEventHandler("sysDownloadError", "MuMeM.Visio.downloadImagePackError")
  downloadFile(MuMeM.Visio.getDataDir("/image-pack.zip"), MuMeM.Visio.IMAGE_PACK_URL)

  MuMeM.Visio.log("[DOWNLOAD] File download started in the background, please wait")    
end

-- ########################################################################################################
-- # MAIN CONSOLE BACKGROUND
-- ########################################################################################################

function MuMeM.Visio.setMainConsoleBackground()
  if MuMeM.Visio.MainConsoleBackground == "OFF" then
    MuMeM.Visio.MainConsoleBackground = "BORDER"
  elseif MuMeM.Visio.MainConsoleBackground == "BORDER" then
    MuMeM.Visio.MainConsoleBackground = "CENTER"
  elseif MuMeM.Visio.MainConsoleBackground == "CENTER" then
    MuMeM.Visio.MainConsoleBackground = "TILED"
  else
    MuMeM.Visio.MainConsoleBackground = "OFF"
  end
  MuMeM.Visio.redrawMainConsoleBackground()
end

function MuMeM.Visio.redrawMainConsoleBackground(roomHash)
  if MuMeM.Visio.MainConsoleBackground == "OFF" then
    resetBackgroundImage("main")
  else
    local roomHash = roomHash or MuMeM.Visio.calcRoomHash()
    local fileName = MuMeM.Visio.getDataDir("/RoomImages/"..roomHash)

    if MuMeM.Core.IO.fileExists(fileName) then
      if MuMeM.Visio.MainConsoleBackground == "TILED" then
        local styleSheet = [[
          background-image: url(]]..fileName..[[);
        ]]
        --local styleSheet = [[
        --  border-image: url(]]..fileName..[[) 0 0 0 0 repeat stretch;
        --]]
        setBackgroundImage("main", styleSheet, "style")
      else
        setBackgroundImage("main", fileName, string.lower(MuMeM.Visio.MainConsoleBackground))
      end
    else
      resetBackgroundImage("main")
    end
  end
end

-- ########################################################################################################
-- # CALLBACKS
-- ########################################################################################################

function MuMeM.Visio.printRoomHash()
  local roomHash = roomHash or MuMeM.Visio.calcRoomHash()
  MuMeM.Visio.log("Room hash: "..roomHash)
end

function MuMeM.Visio.enableRooming()
  MuMeM.Visio.isRooming = true
  MuMeM.Visio.Visual.statusToggle:echo("de-activate")
  MuMeM.Visio.Visual.statusIndicatorRed:hide()
  MuMeM.Visio.Visual.statusIndicatorGreen:show()
  MuMeM.Visio.redrawRoomText()
  MuMeM.Visio.redrawRoomImage()
  MuMeM.Visio.redrawMobiles()
end

function MuMeM.Visio.disableRooming()
  MuMeM.Visio.isRooming = false
  MuMeM.Visio.Visual.statusToggle:echo("activate")
  MuMeM.Visio.Visual.statusIndicatorRed:show()
  MuMeM.Visio.Visual.statusIndicatorGreen:hide()
  MuMeM.Visio.hideMobiles()
  MuMeM.Visio.Visual.roomImage:setBackgroundImage(MuMeM.Visio.getDataDir("/RoomImages/deactivated"))
  MuMeM.Visio.Visual.roomText:clear()
  MuMeM.Visio.Visual.roomText:echo("Deactivated")
  MuMeM.Visio.Visual.roomHashEntry:echo("deactivated")
end

function MuMeM.Visio.toggleRooming()
  if MuMeM.Visio.isRooming then
    MuMeM.Visio.disableRooming()
  else
    MuMeM.Visio.enableRooming()
  end
end

function MuMeM.Visio.calcRoomHash(roomHash)
  if not gmcp.Room.Info.area or not gmcp.Room.Info.name or not gmcp.Room.Info.desc then
    return "unknown"
  end
  
  return md5.Calc(gmcp.Room.Info.area..gmcp.Room.Info.name..gmcp.Room.Info.desc)
end

function MuMeM.Visio.redrawRoomText(roomHash)
  local roomHash = roomHash or MuMeM.Visio.calcRoomHash()
  local roomName = gmcp.Room.Info.name or "Unknown room (pitch black?)"
  local roomDesc
  local roomExitAbbr = { n="north", e="east", s="south", w="west", u="up", d="down" }

  MuMeM.Visio.Visual.roomText:clear()
  
  if gmcp.Room.Info.desc then 
    --roomDesc = gmcp.Room.Info.desc:gsub("\n","&lt;br&gt;")
    roomDesc = gmcp.Room.Info.desc
  else
    roomDesc = "Unknown or pitch black"
  end

  MuMeM.Visio.Visual.roomText:decho("&lt;b&gt;&lt;0,128,0&gt;"..roomName.."&lt;/b&gt;&lt;200,200,200&gt;\n"..roomDesc)
  
  -- TODO: refactor his exit block !!!!       TODO           TODO
  MuMeM.Visio.Visual.roomText:decho"\n&lt;b&gt;Exits:&lt;/b&gt;\n"
  if gmcp.Room.Info.exits then
    for exitDir,exitData in pairs(gmcp.Room.Info.exits) do
      local roomExit = roomExitAbbr[exitDir]
      local exitName = exitData.name
      local exitIsClosed = nil
      local exitIsRoad = nil
      local exitIsTrail = nil
      local exitIsWater = nil
      if exitData.flags then
        for _,exitFlag in pairs(exitData.flags) do
          if exitFlag == "closed" then
            exitIsClosed = true
          elseif exitFlag == "road" then
            exitIsRoad = true
          elseif exitFlag == "trail" then
            exitIsTrail = true
          elseif exitFlag == "water" then
            exitIsWater = true
          else
            MuMeM.Visio.log(f"Unknown room exit flag: {exitFlag}")
          end
        end
      end
      
      MuMeM.Visio.Visual.roomText:echo("- ")
      MuMeM.Visio.Visual.roomText:echoLink(roomExit, function() send(exitDir) end, "", true)
      
      local exitInfo = nil
      local isActionable = false
      if exitName then
        if exitIsClosed then
          exitInfo = exitName.." [closed]"
        else
          exitInfo = exitName.." (open)"
        end
        isActionable = true
      elseif exitIsRoad then
        exitInfo = "=road="
      elseif exitIsTrail then
        exitInfo = "-trail-"
      elseif exitIsWater then
        exitInfo = "~water~"
      end

      if exitInfo then
        MuMeM.Visio.Visual.roomText:echo(" : "..exitInfo)
        if isActionable then
          moveCursorEnd("MuMeM.Visio.Visual.roomText")
          if selectString("MuMeM.Visio.Visual.roomText",exitInfo, 1) &gt; -1 then
            setPopup("MuMeM.Visio.Visual.roomText", 
                      {function() send("open "..exitName) end, 
                       function() send("close "..exitName) end,
                       function() send("unlock "..exitName) end,
                       function() send("lock "..exitName) end,
                       function() send("pick "..exitName) end,
                      }, 
                      {"open", "close", "unlock", "lock", "pick"}
                    )
          end
        end
      end
  
      MuMeM.Visio.Visual.roomText:echo("\n")
    end
  else
    MuMeM.Visio.Visual.roomText:echo("- None\n")
  end

  MuMeM.Visio.Visual.roomHashEntry:echo(roomHash)
end

function MuMeM.Visio.redrawRoomImage(roomHash)
  local roomHash = roomHash or MuMeM.Visio.calcRoomHash()
  local fileName = MuMeM.Visio.getRoomImageDir(roomHash)

  if not MuMeM.Core.IO.fileExists(fileName) then
    MuMeM.Visio.log("Image for room does not exist in Image Directory")
    fileName = MuMeM.Visio.getRoomImageDir("notfound")
  end
    
  MuMeM.Visio.Visual.roomImage:setBackgroundImage(fileName)
end

function MuMeM.Visio.redrawMobiles()
  if not MuMeM.Visio.isRooming then 
    return
  end

  local redrawDuration = getEpoch()
  local idx = 1
  local mobileKey = nil
  local mobileKey,mobile = MuMeM.Room.Mobiles.getNext(mobileKey)
  
  while mobileKey and mobile do
    local mobileImageFile = MuMeM.Visio.getMobileImageDir(mobile:fileName())
    if not MuMeM.Core.IO.fileExists(mobileImageFile) then
      mobileImageFile = MuMeM.Visio.getMobileImageDir("mobile")
    end
    MuMeM.Visio.Visual.roomMobile[idx]:setBackgroundImage(mobileImageFile)
    MuMeM.Visio.Visual.roomMobileLabel[idx]:echo(mobile:name())
    MuMeM.Visio.Visual.roomMobile[idx]:show()
    idx = idx + 1
    mobileKey,mobile = MuMeM.Room.Mobiles.getNext(mobileKey)
  end
  
  while idx &lt;= MuMeM.Visio.MAX_MOBILES do
    MuMeM.Visio.Visual.roomMobile[idx]:hide()
    idx = idx + 1
  end
  
  redrawDuration = math.ceil((getEpoch()-redrawDuration)*10000)/10000
  MuMeM.Visio.log(f"Redraw of mobiles done, took {redrawDuration} seconds.")
end

function MuMeM.Visio.hideMobiles()
  for idx=1,MuMeM.Visio.MAX_MOBILES do
    MuMeM.Visio.Visual.roomMobile[idx]:hide()
  end
end

function MuMeM.Visio.redraw()
  if not MuMeM.Visio.isRooming then 
    MuMeM.Visio.log("Room updates deactivated")
  elseif gmcp and gmcp.Room and gmcp.Room.Info then
    local overallDuration = getEpoch()
    MuMeM.Visio.log("Redrawing...")
    
    local roomHashDuration = getEpoch()
    local roomHash = md5.Calc(gmcp.Room.Info.area..gmcp.Room.Info.name..gmcp.Room.Info.desc)
    roomHashDuration = getEpoch() - roomHashDuration
   
    local redrawDuration = getEpoch()
    MuMeM.Visio.redrawRoomText(roomHash)
    MuMeM.Visio.redrawRoomImage(roomHash)
    --MuMeM.Visio.redrawMobiles()
    redrawDuration = getEpoch() - redrawDuration
    
    local mainConsoleDuration = getEpoch()
    MuMeM.Visio.redrawMainConsoleBackground(roomHash)
    mainConsoleDuration = getEpoch() - mainConsoleDuration
    
    overallDuration = math.ceil((getEpoch()-overallDuration)*10000)/10000
    roomHashDuration = math.ceil(roomHashDuration*10000)/10000
    redrawDuration = math.ceil(redrawDuration*10000)/10000
    mainConsoleDuration = math.ceil(mainConsoleDuration*10000)/10000

    MuMeM.Visio.log(f"Redraw done, took {overallDuration} seconds (hash: {roomHashDuration} sec, gui: {redrawDuration} sec, mainConsole: {mainConsoleDuration})")
  else
    MuMeM.Visio.log("Redraw called, but no gmcp info available")
  end
end

-- ########################################################################################################
-- # SIMPLE LOGGING
-- ########################################################################################################

function MuMeM.Visio.log(msg)
  if MuMeM.Visio.Visual.loggingConsole then
    MuMeM.Visio.Visual.loggingConsole:echo("["..getTime(true,"hh:mm:ss").."] "..msg.."\n")
  end
end


-- ########################################################################################################
-- # ACTION "visere"
-- ########################################################################################################

function MuMeM.Visio.activate()
  if not MuMeM.Visio.Visual.mainWindow then
    MuMeM.Visio.initialize()
    MuMeM.Visio.disableRooming()
  end
  
  showWindow("MuMeM.Visio.Visual.mainWindow")
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>MuMeM.Visio.GUI</name>
				<packageName></packageName>
				<script>function MuMeM.Visio.setupGUI(force)
  if MuMeM.Visio.Visual.mainWindow and not force then
    return
  end
  
  -- --- Main Window ---
  MuMeM.Visio.Visual.mainWindow = Geyser.UserWindow:new({
    name = "MuMeM.Visio.Visual.mainWindow",
    titleText = "MuMeM - Visio",
    x = "10%", y="10%",
    width = "1100", height = "800",
    color = "black",
    autodock = true,
  })

  -- --- roomText (top left) ---
  --MuMeM.Visio.Visual.roomText = Geyser.Label:new({
  --  name = "MuMeM.Visio.Visual.roomText",
  --  x = 0, y = 0,
  --  width = "100%-400", height = "400",
  --  --color = "black", fgcolor = "white",
  --  fontSize = 10,
  --  },MuMeM.Visio.Visual.mainWindow)
--  MuMeM.Visio.Visual.roomText:setStyleSheet([[
--    background-color: black;
--    border-width: 15px;
--    border-style: solid;
--    qproperty-alignment: 'AlignLeft | AlignTop'
--  ]])
  MuMeM.Visio.Visual.roomText = Geyser.MiniConsole:new({
    name="MuMeM.Visio.Visual.roomText",
    x = 0, y = 0,
    width = "100%-400", height = "250",
    autoWrap = false,
    color = "black", fgcolor = white,
    scrollBar = false,
    fontSize = 10,
  },MuMeM.Visio.Visual.mainWindow)

  -- --- roomMobiles (top left, below roomText) ---
  MuMeM.Visio.Visual.roomMobiles = Geyser.Container:new({
    name="MuMeM.Visio.Visual.roomMobiles",
    x = 0, y = 240,
    width = "100%-400", height = 160,
  },MuMeM.Visio.Visual.mainWindow)
  
  MuMeM.Visio.Visual.roomMobile = {}
  MuMeM.Visio.Visual.roomMobileLabel = {}
  local lx = 0
  local ly = 0
  for n=1,MuMeM.Visio.MAX_MOBILES do
    if n &lt;= MuMeM.Visio.MAX_MOBILES/2 then
      lx = (n-1)*80
      ly = 0
    else
      lx = (n-MuMeM.Visio.MAX_MOBILES/2-1)*80
      ly = 75+10
    end
    MuMeM.Visio.Visual.roomMobile[n] = Geyser.Label:new({
      name = f"MuMeM.Visio.Visual.roomMobile{n}",
      x = lx, y = ly,
      width = 75, height = 75,
      color = "black", fontSize = 20,
    },MuMeM.Visio.Visual.roomMobiles)
    
    MuMeM.Visio.Visual.roomMobileLabel[n] = Geyser.Label:new({
      name = f"MuMeM.Visio.Visual.roomMobileLabel{n}",
      x = 0, y = 0,
      width = 75, height = 75,
      fgColor = "white",
    },MuMeM.Visio.Visual.roomMobile[n])
    MuMeM.Visio.Visual.roomMobileLabel[n]:setStyleSheet([[
      background-color: transparent;
      qproperty-alignment: 'AlignHCenter | AlignBottom';
      font: bold 14px;
      color: black;
    ]])
  end

  -- --- roomImage (top rigth) ---
  MuMeM.Visio.Visual.roomImage = Geyser.Label:new({
    name = "MuMeM.Visio.Visual.roomImage",
    x = "-400", y = 0,
    width = "400", height = "400",
    color = "black", fontSize = 20,
    },MuMeM.Visio.Visual.mainWindow)
  --MuMeM.Visio.Visual.roomImage:setStyleSheet([[
  --  background-image: url(]]..MuMeM.Visio.getDataDir("/RoomImages/deactivated")..[[);
  --  background-repeat: no-repeat;
  --  background-position: top right;
  --  background-origin: margin;
  --]])
  MuMeM.Visio.Visual.roomImage:setBackgroundImage(MuMeM.Visio.getDataDir("/RoomImages/deactivated"))

  -- --- buttonPane (middle) ---
  MuMeM.Visio.Visual.buttonPane = Geyser.Label:new({
    name = "MuMeM.Visio.Visual.buttonPane",
    x = 0, y = "400",
    width = "100%", height = "40",
    color = "#191970",
    },MuMeM.Visio.Visual.mainWindow)
    
  MuMeM.Visio.Visual.redrawRoom = Geyser.Label:new({
    name = "MuMeM.Visio.Visual.redrawRoom",
    x = "10", y = "5",
    width = "80", height = "30",fontSize=12,
    message = "redraw"
    },MuMeM.Visio.Visual.buttonPane)
  MuMeM.Visio.Visual.redrawRoom:setStyleSheet([[
    background-color: grey;
    border-width: 2px;
    border-style: solid;
    border-color: white;
    border-radius: 5px;
    qproperty-alignment: 'AlignHCenter | AlignVCenter';
  ]])
  MuMeM.Visio.Visual.redrawRoom:setClickCallback(function () MuMeM.Visio.redraw() end )

  MuMeM.Visio.Visual.setBackground = Geyser.Label:new({
    name = "MuMeM.Visio.Visual.setBackground",
    x = 100, y = "5",
    width = "100", height = "30",fontSize=12,
    message = "background"
    },MuMeM.Visio.Visual.buttonPane)
  MuMeM.Visio.Visual.setBackground:setStyleSheet([[
    background-color: grey;
    border-width: 2px;
    border-style: solid;
    border-color: white;
    border-radius: 5px;
    qproperty-alignment: 'AlignHCenter | AlignVCenter';
  ]])
  MuMeM.Visio.Visual.setBackground:setClickCallback(function () MuMeM.Visio.setMainConsoleBackground() end )
  
  MuMeM.Visio.Visual.printRoomHash = Geyser.Label:new({
    name = "MuMeM.Visio.Visual.printRoomHash",
    x = 210, y = "5",
    width = "90", height = "30",fontSize=12,
    message = "print hash"
    },MuMeM.Visio.Visual.buttonPane)
  MuMeM.Visio.Visual.printRoomHash:setStyleSheet([[
    background-color: grey;
    border-width: 2px;
    border-style: solid;
    border-color: white;
    border-radius: 5px;
    qproperty-alignment: 'AlignHCenter | AlignVCenter';
  ]])
  MuMeM.Visio.Visual.printRoomHash:setClickCallback(function () MuMeM.Visio.printRoomHash() end )
  
  MuMeM.Visio.Visual.downloadImages = Geyser.Label:new({
    name = "MuMeM.Visio.Visual.downloadImages",
    x = "330", y = "5",
    width = "160", height = "30",fontSize=12,
    message = "download images"
    },MuMeM.Visio.Visual.buttonPane)
  MuMeM.Visio.Visual.downloadImages:setStyleSheet([[
    background-color: grey;
    border-width: 2px;
    border-style: solid;
    border-color: white;
    border-radius: 5px;
    qproperty-alignment: 'AlignHCenter | AlignVCenter';
  ]])
  MuMeM.Visio.Visual.downloadImages:setClickCallback(function () MuMeM.Visio.downloadImagePack() end )
  
  MuMeM.Visio.Visual.ImportImage = Geyser.Label:new({
    name = "MuMeM.Visio.Visual.ImportImage",
    x = "500", y = "5",
    width = "130", height = "30",fontSize=12,
    message = "import image"
    },MuMeM.Visio.Visual.buttonPane)
  MuMeM.Visio.Visual.ImportImage:setStyleSheet([[
    background-color: grey;
    border-width: 2px;
    border-style: solid;
    border-color: white;
    border-radius: 5px;
    qproperty-alignment: 'AlignHCenter | AlignVCenter';
  ]])
  MuMeM.Visio.Visual.ImportImage:setClickCallback(function () MuMeM.Visio.importImage() end )
  
  MuMeM.Visio.Visual.statusToggle = Geyser.Label:new({
    name = "MuMeM.Visio.Visual.statusToggle",
    x = "-180", y = "5",
    width = "120", height = "30",fontSize=12,
    message = "activate"
    },MuMeM.Visio.Visual.buttonPane)
  MuMeM.Visio.Visual.statusToggle:setStyleSheet([[
    background-color: grey;
    border-width: 2px;
    border-style: solid;
    border-color: white;
    border-radius: 5px;
    qproperty-alignment: 'AlignHCenter | AlignVCenter';
  ]])
  MuMeM.Visio.Visual.statusToggle:setClickCallback(function () MuMeM.Visio.toggleRooming() end )

  MuMeM.Visio.Visual.statusIndicatorGreen = Geyser.Label:new({
    name = "MuMeM.Visio.Visual.statusIndicatorGreen",
    x = "-40", y = "5",
    width = "30", height = "30",
    },MuMeM.Visio.Visual.buttonPane)
  MuMeM.Visio.Visual.statusIndicatorGreen:setStyleSheet([[
    background-color: green;
    border-width: 3px;
    border-style: solid;
    border-color: white;
    border-radius: 15px;
  ]])
  MuMeM.Visio.Visual.statusIndicatorGreen:hide()
  
  MuMeM.Visio.Visual.statusIndicatorRed = Geyser.Label:new({
    name = "MuMeM.Visio.Visual.statusIndicatorRed",
    x = "-40", y = "5",
    width = "30", height = "30",
    },MuMeM.Visio.Visual.buttonPane)
  MuMeM.Visio.Visual.statusIndicatorRed:setStyleSheet([[
    background-color: red;
    border-width: 3px;
    border-style: solid;
    border-color: white;
    border-radius: 15px;
  ]])

  -- --- infoPane (middleLow) ---
  MuMeM.Visio.Visual.infoPane = Geyser.Label:new({
    name = "MuMeM.Visio.Visual.infoPane",
    x = 0, y = 400+40,
    width = "100%", height = "50",
    },MuMeM.Visio.Visual.mainWindow)

  MuMeM.Visio.Visual.roomHashLabel = Geyser.Label:new({
    name = "MuMeM.Visio.Visual.roomHashLabel",
    x = 5, y = 5,
    width = "25%-5", height = "18",
    color = "grey", fgColor = "black", fontSize = 12,
    message = "Room hash"
    },MuMeM.Visio.Visual.infoPane)
  MuMeM.Visio.Visual.roomHashEntry = Geyser.Label:new({
    name = "MuMeM.Visio.roomHashEntry",
    x = "25%+2", y = 5,
    width = "75%-7", height = "18",
    color = "grey", fgColor = "black", fontSize = 12,
    message="Unknown"
    },MuMeM.Visio.Visual.infoPane) 
    
  MuMeM.Visio.Visual.DataDirLabel = Geyser.Label:new({
    name = "MuMeM.Visio.Visual.DataDirLabel",
    x = 5, y = 25,
    width = "25%-5", height = "18",
    color = "grey", fgColor = "black", fontSize = 12,
    message="Data Directory"
    },MuMeM.Visio.Visual.infoPane)
  MuMeM.Visio.Visual.DataDirEntry = Geyser.Label:new({
    name = "MuMeM.Visio.Visual.DataDirEntry",
    x = "25%+2", y = 25,
    width = "75%-7", height = "18",
    color = "grey", fgColor = "black", fontSize = 12,
    message = MuMeM.Visio.getDataDir("/")
    },MuMeM.Visio.Visual.infoPane)
    
  -- --- logging (bottom) ---
  MuMeM.Visio.Visual.loggingPane = Geyser.Container:new({
    name = "MuMeM.Visio.Visual.loggingPane",
    x = 0, y = 400+40+50,
    width = "100%", height = "100%-490", --"100%-400-40-50",
    },MuMeM.Visio.Visual.mainWindow)
    
  MuMeM.Visio.loggingLabel = Geyser.Label:new({
    name = "MuMeM.Visio.loggingLabel",
    x = "0", y = "0",
    width = "100%", height = "20",
    color = "red", fgColor = "white", fontSize = 12,
    message="&lt;b&gt;&amp;nbsp;Logging&lt;b&gt;"
    },MuMeM.Visio.Visual.loggingPane)
    
  MuMeM.Visio.Visual.loggingConsole = Geyser.MiniConsole:new({
    name="MuMeM.Visio.Visual.loggingConsole",
    x="0", y="20",
    width="100%", height="100%-20",
    autoWrap = true,
    color = "black",
    scrollBar = true,
    fontSize = 8,
  },MuMeM.Visio.Visual.loggingPane)
  MuMeM.Visio.Visual.loggingConsole:setBufferSize(1000,100)
    
  MuMeM.Visio.log("MuMeM.Visio.setupGUI() done")
end</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>MuMeM.Visio.EventHandler</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Visio.EventHandler.RoomInfo</name>
					<packageName></packageName>
					<script>function MuMeM.Visio.EventHandler.RoomInfo()
  MuMeM.Visio.redraw()
end</script>
					<eventHandlerList>
						<string>gmcp.Room.Info</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.Visio.EventHandler.RoomMobiles</name>
					<packageName></packageName>
					<script>function MuMeM.Visio.EventHandler.RoomMobiles()
  MuMeM.Visio.redrawMobiles()
end</script>
					<eventHandlerList>
						<string>MuMeM.Room.Mobiles</string>
					</eventHandlerList>
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>MuMeM.Visio.Tools</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>md5</name>
					<packageName></packageName>
					<script>--[[---------------
LuaBit v0.4
-------------------
a bitwise operation lib for lua.

http://luaforge.net/projects/bit/

How to use:
-------------------
 bit.bnot(n) -- bitwise not (~n)
 bit.band(m, n) -- bitwise and (m &amp; n)
 bit.bor(m, n) -- bitwise or (m | n)
 bit.bxor(m, n) -- bitwise xor (m ^ n)
 bit.brshift(n, bits) -- right shift (n &gt;&gt; bits)
 bit.blshift(n, bits) -- left shift (n &lt;&lt; bits)
 bit.blogic_rshift(n, bits) -- logic right shift(zero fill &gt;&gt;&gt;)

Please note that bit.brshift and bit.blshift only support number within
32 bits.

2 utility functions are provided too:
 bit.tobits(n) -- convert n into a bit table(which is a 1/0 sequence)
               -- high bits first
 bit.tonumb(bit_tbl) -- convert a bit table into a number 
-------------------

Under the MIT license.

copyright(c) 2006~2007 hanzhao (abrash_han@hotmail.com)
--]]---------------

--do

------------------------
-- bit lib implementions

local function check_int(n)
 -- checking not float
 if(n - math.floor(n) &gt; 0) then
  error("trying to use bitwise operation on non-integer!")
 end
end

local function tbl_to_number(tbl)
 local n = #tbl

 local rslt = 0
 local power = 1
 for i = 1, n do
  rslt = rslt + tbl[i]*power
  power = power*2
 end

 return rslt
end

local function expand(tbl_m, tbl_n)
 local big = {}
 local small = {}
 if(#tbl_m &gt; #tbl_n) then
  big = tbl_m
  small = tbl_n
 else
  big = tbl_n
  small = tbl_m
 end
 -- expand small
 for i = #small + 1, #big do
  small[i] = 0
 end

end

local to_bits = function () end

local function bit_not(n)
 local tbl = to_bits(n)
 local size = math.max(#tbl, 32)
 for i = 1, size do
  if(tbl[i] == 1) then
   tbl[i] = 0
  else
   tbl[i] = 1
  end
 end
 return tbl_to_number(tbl)
end


to_bits = function (n)
 check_int(n)
 if(n &lt; 0) then
  -- negative
  return to_bits(bit_not(math.abs(n)) + 1)
 end
 -- to bits table
 local tbl = {}
 local cnt = 1
 while (n &gt; 0) do
  local last = math.mod(n,2)
  if(last == 1) then
   tbl[cnt] = 1
  else
   tbl[cnt] = 0
  end
  n = (n-last)/2
  cnt = cnt + 1
 end

 return tbl
end


local function bit_or(m, n)
 local tbl_m = to_bits(m)
 local tbl_n = to_bits(n)
 expand(tbl_m, tbl_n)

 local tbl = {}
 local rslt = math.max(#tbl_m, #tbl_n)
 for i = 1, rslt do
  if(tbl_m[i]== 0 and tbl_n[i] == 0) then
   tbl[i] = 0
  else
   tbl[i] = 1
  end
 end

 return tbl_to_number(tbl)
end

local function bit_and(m, n)
 local tbl_m = to_bits(m)
 local tbl_n = to_bits(n)
 expand(tbl_m, tbl_n) 

 local tbl = {}
 local rslt = math.max(#tbl_m, #tbl_n)
 for i = 1, rslt do
  if(tbl_m[i]== 0 or tbl_n[i] == 0) then
   tbl[i] = 0
  else
   tbl[i] = 1
  end
 end

 return tbl_to_number(tbl)
end

local function bit_xor(m, n)
 local tbl_m = to_bits(m)
 local tbl_n = to_bits(n)
 expand(tbl_m, tbl_n) 

 local tbl = {}
 local rslt = math.max(#tbl_m, #tbl_n)
 for i = 1, rslt do
  if(tbl_m[i] ~= tbl_n[i]) then
   tbl[i] = 1
  else
   tbl[i] = 0
  end
 end

 --table.foreach(tbl, print)

 return tbl_to_number(tbl)
end

local function bit_rshift(n, bits)
 check_int(n)

 local high_bit = 0
 if(n &lt; 0) then
  -- negative
  n = bit_not(math.abs(n)) + 1
  high_bit = 2147483648 -- 0x80000000
 end

 for i=1, bits do
  n = n/2
  n = bit_or(math.floor(n), high_bit)
 end
 return math.floor(n)
end

-- logic rightshift assures zero filling shift
local function bit_logic_rshift(n, bits)
 check_int(n)
 if(n &lt; 0) then
  -- negative
  n = bit_not(math.abs(n)) + 1
 end
 for i=1, bits do
  n = n/2
 end
 return math.floor(n)
end

local function bit_lshift(n, bits)
 check_int(n)

 if(n &lt; 0) then
  -- negative
  n = bit_not(math.abs(n)) + 1
 end

 for i=1, bits do
  n = n*2
 end
 return bit_and(n, 4294967295) -- 0xFFFFFFFF
end

local function bit_xor2(m, n)
 local rhs = bit_or(bit_not(m), bit_not(n))
 local lhs = bit_or(m, n)
 local rslt = bit_and(lhs, rhs)
 return rslt
end

-- An MD5 mplementation in Lua, requires bitlib (hacked to use LuaBit from above, ugh)
-- 10/02/2001 jcw@equi4.com

md5={ff=tonumber('ffffffff',16),consts={}}

string.gsub([[ d76aa478 e8c7b756 242070db c1bdceee
    f57c0faf 4787c62a a8304613 fd469501
    698098d8 8b44f7af ffff5bb1 895cd7be
    6b901122 fd987193 a679438e 49b40821
    f61e2562 c040b340 265e5a51 e9b6c7aa
    d62f105d 02441453 d8a1e681 e7d3fbc8
    21e1cde6 c33707d6 f4d50d87 455a14ed
    a9e3e905 fcefa3f8 676f02d9 8d2a4c8a
    fffa3942 8771f681 6d9d6122 fde5380c
    a4beea44 4bdecfa9 f6bb4b60 bebfbc70
    289b7ec6 eaa127fa d4ef3085 04881d05
    d9d4d039 e6db99e5 1fa27cf8 c4ac5665
    f4292244 432aff97 ab9423a7 fc93a039
    655b59c3 8f0ccc92 ffeff47d 85845dd1
    6fa87e4f fe2ce6e0 a3014314 4e0811a1
    f7537e82 bd3af235 2ad7d2bb eb86d391
    67452301 efcdab89 98badcfe 10325476 ]],"(%w+)", function (s) table.insert(md5.consts, tonumber(s,16)) end)
    --67452301 efcdab89 98badcfe 10325476 ]],"(%w+)", function (s) tinsert(md5.consts,tonumber(s,16)) end)

function md5.transform(A,B,C,D,X)
  local f=function (x,y,z) return bit_or(bit_and(x,y),bit_and(-x-1,z)) end
  local g=function (x,y,z) return bit_or(bit_and(x,z),bit_and(y,-z-1)) end
  local h=function (x,y,z) return bit_xor(x,bit_xor(y,z)) end
  local i=function (x,y,z) return bit_xor(y,bit_or(x,-z-1)) end
  local z=function (f,a,b,c,d,x,s,ac)
        a=bit_and(a+f(b,c,d)+x+ac,md5.ff)
        -- be *very* careful that left shift does not cause rounding!
        return bit_or(bit_lshift(bit_and(a,bit_rshift(md5.ff,s)),s),bit_rshift(a,32-s))+b
      end
  local a,b,c,d=A,B,C,D
  local t=md5.consts

  a=z(f,a,b,c,d,X[ 0], 7,t[ 1])
  d=z(f,d,a,b,c,X[ 1],12,t[ 2])
  c=z(f,c,d,a,b,X[ 2],17,t[ 3])
  b=z(f,b,c,d,a,X[ 3],22,t[ 4])
  a=z(f,a,b,c,d,X[ 4], 7,t[ 5])
  d=z(f,d,a,b,c,X[ 5],12,t[ 6])
  c=z(f,c,d,a,b,X[ 6],17,t[ 7])
  b=z(f,b,c,d,a,X[ 7],22,t[ 8])
  a=z(f,a,b,c,d,X[ 8], 7,t[ 9])
  d=z(f,d,a,b,c,X[ 9],12,t[10])
  c=z(f,c,d,a,b,X[10],17,t[11])
  b=z(f,b,c,d,a,X[11],22,t[12])
  a=z(f,a,b,c,d,X[12], 7,t[13])
  d=z(f,d,a,b,c,X[13],12,t[14])
  c=z(f,c,d,a,b,X[14],17,t[15])
  b=z(f,b,c,d,a,X[15],22,t[16])

  a=z(g,a,b,c,d,X[ 1], 5,t[17])
  d=z(g,d,a,b,c,X[ 6], 9,t[18])
  c=z(g,c,d,a,b,X[11],14,t[19])
  b=z(g,b,c,d,a,X[ 0],20,t[20])
  a=z(g,a,b,c,d,X[ 5], 5,t[21])
  d=z(g,d,a,b,c,X[10], 9,t[22])
  c=z(g,c,d,a,b,X[15],14,t[23])
  b=z(g,b,c,d,a,X[ 4],20,t[24])
  a=z(g,a,b,c,d,X[ 9], 5,t[25])
  d=z(g,d,a,b,c,X[14], 9,t[26])
  c=z(g,c,d,a,b,X[ 3],14,t[27])
  b=z(g,b,c,d,a,X[ 8],20,t[28])
  a=z(g,a,b,c,d,X[13], 5,t[29])
  d=z(g,d,a,b,c,X[ 2], 9,t[30])
  c=z(g,c,d,a,b,X[ 7],14,t[31])
  b=z(g,b,c,d,a,X[12],20,t[32])

  a=z(h,a,b,c,d,X[ 5], 4,t[33])
  d=z(h,d,a,b,c,X[ 8],11,t[34])
  c=z(h,c,d,a,b,X[11],16,t[35])
  b=z(h,b,c,d,a,X[14],23,t[36])
  a=z(h,a,b,c,d,X[ 1], 4,t[37])
  d=z(h,d,a,b,c,X[ 4],11,t[38])
  c=z(h,c,d,a,b,X[ 7],16,t[39])
  b=z(h,b,c,d,a,X[10],23,t[40])
  a=z(h,a,b,c,d,X[13], 4,t[41])
  d=z(h,d,a,b,c,X[ 0],11,t[42])
  c=z(h,c,d,a,b,X[ 3],16,t[43])
  b=z(h,b,c,d,a,X[ 6],23,t[44])
  a=z(h,a,b,c,d,X[ 9], 4,t[45])
  d=z(h,d,a,b,c,X[12],11,t[46])
  c=z(h,c,d,a,b,X[15],16,t[47])
  b=z(h,b,c,d,a,X[ 2],23,t[48])

  a=z(i,a,b,c,d,X[ 0], 6,t[49])
  d=z(i,d,a,b,c,X[ 7],10,t[50])
  c=z(i,c,d,a,b,X[14],15,t[51])
  b=z(i,b,c,d,a,X[ 5],21,t[52])
  a=z(i,a,b,c,d,X[12], 6,t[53])
  d=z(i,d,a,b,c,X[ 3],10,t[54])
  c=z(i,c,d,a,b,X[10],15,t[55])
  b=z(i,b,c,d,a,X[ 1],21,t[56])
  a=z(i,a,b,c,d,X[ 8], 6,t[57])
  d=z(i,d,a,b,c,X[15],10,t[58])
  c=z(i,c,d,a,b,X[ 6],15,t[59])
  b=z(i,b,c,d,a,X[13],21,t[60])
  a=z(i,a,b,c,d,X[ 4], 6,t[61])
  d=z(i,d,a,b,c,X[11],10,t[62])
  c=z(i,c,d,a,b,X[ 2],15,t[63])
  b=z(i,b,c,d,a,X[ 9],21,t[64])

  return A+a,B+b,C+c,D+d
end

-- convert little-endian 32-bit int to a 4-char string
local function leIstr(i)
  local f=function (s) return string.char(bit_and(bit_rshift(i,s),255)) end
  return f(0)..f(8)..f(16)..f(24)
end

  -- convert raw string to big-endian int
  local function beInt(s)
    local v=0
    for i=1,string.len(s) do v=v*256+string.byte(s,i) end
    return v
  end
  -- convert raw string to little-endian int
  local function leInt(s)
    local v=0
    for i=string.len(s),1,-1 do v=v*256+string.byte(s,i) end
    return v
  end
  -- cut up a string in little-endian ints of given size
  local function leStrCuts(s,...)
    local o,r=1,{}
    for i=1,#arg do
      table.insert(r,leInt(string.sub(s,o,o+arg[i]-1)))
      o=o+arg[i]
    end
    return r
  end

function md5.Calc(s)
  local msgLen=string.len(s)
  local padLen=56- msgLen % 64
  if msgLen % 64 &gt; 56 then padLen=padLen+64 end
  if padLen==0 then padLen=64 end
  s=s..string.char(128)..string.rep(string.char(0),padLen-1)
  s=s..leIstr(8*msgLen)..leIstr(0)
  assert(string.len(s) % 64 ==0)
  local t=md5.consts
  local a,b,c,d=t[65],t[66],t[67],t[68]
  for i=1,string.len(s),64 do
    local X=leStrCuts(string.sub(s,i,i+63),4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4)
    assert(#X==16)
    X[0]=table.remove(X,1) -- zero based!
    a,b,c,d=md5.transform(a,b,c,d,X)
  end
  local swap=function (w) return beInt(leIstr(w)) end
  return string.format("%08x%08x%08x%08x",swap(a),swap(b),swap(c),swap(d))
end

-- return md5.Calc("asdf"); -- 912ec803b2ce49e4a541068d495ab570</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
</MudletPackage>
