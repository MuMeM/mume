<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>MuMeM.GPrompt</name>
			<packageName></packageName>
			<script>--[[
    Displays a "graphical prompt" at the bottom of the screen.
    The line contains the usual information you would suspect from a prompt.
--]]

mumem_inherit = mumem_inherit or function (className, baseName)
  local classObj = _G
  for str in string.gmatch(className, "([^\\.]+)") do
    classObj = classObj[str]
  end
  
  local baseObj = _G
  for str in string.gmatch(baseName, "([^\\.]+)") do
    baseObj = baseObj[str]
  end

  setmetatable(classObj, baseObj)
  classObj.__index = classObj
  
  if className == baseName then
    classObj.parentClass = "BASE"
  else
    classObj.parentClass = baseObj
  end
  classObj.className = className
end

mumem_isa = mume_isa or function (classObj, className)
  if classObj == "BASE" then
    return false
  elseif classObj.className == className then
    return true
  end
  return mumem_isa(classObj.parentClass, className)
end

-- --- Module setup ----------------------------------------------

MuMeM = MuMeM or {}
MuMeM.GPrompt = MuMeM.GPrompt or {}
MuMeM.GPrompt.EventHandler = MuMeM.GPrompt.EventHandler or {}
MuMeM.GPrompt.Widget = MuMeM.GPrompt.Widget or {}
MuMeM.GPrompt.Status = MuMeM.GPrompt.Status or {}
MuMeM.GPrompt.visuals = MuMeM.GPrompt.visuals or {}

--MuMeM.GPrompt.setupPrompt(false)

-- --- Module registration -----------------------------------------

MuMeM.GPrompt.module_name = "MuMeM.GPrompt"
MuMeM.GPrompt.module_dependencies = {"MuMeM.Core","MuMeM.Log","MuMeM.GMCP","MuMeM.Player"}
MuMeM.modules = MuMeM.modules or {}
MuMeM.modules[MuMeM.GPrompt.module_name] = MuMeM.modules[MuMeM.GPrompt.module_name] or {module=MuMeM.GPrompt}</script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>MuMeM.GPrompt.Library</name>
				<packageName></packageName>
				<script>function MuMeM.GPrompt.initialize()
  if MuMeM.Core.IO.nodeExists(getMudletHomeDir().."/MuMeM.GPrompt") then
    MuMeM.GPrompt.resourceDir = getMudletHomeDir().."/MuMeM.GPrompt/Resources"
  else
    MuMeM.GPrompt.resourceDir = getMudletHomeDir().."/MuMeM-GPrompt/Resources"
  end
  
  MuMeM.GPrompt.setupPrompt(false)
end

function MuMeM.GPrompt.getResourceDir()
  return MuMeM.GPrompt.resourceDir
end

function MuMeM.GPrompt.setupPrompt(force)

  if not force and MuMeM.GPrompt.visuals.baseContainer then
    return
  end

  setBorderBottom(20)

  -- BOTTOM container
  MuMeM.GPrompt.visuals.baseContainer = Geyser.Container:new({
    name = "MuMeM.GPrompt.visuals.baseContainer",
    x=0, y=-20,
    width = "100%", height=20,
  })

  -- PlayerHealthBar
  MuMeM.GPrompt.visuals.playerHealthBar = MuMeM.GPrompt.Widget.PlayerHealthBar:new({
    name = "MuMeM.GPrompt.visuals.playerHealthBar",
    x="0%", y=0,
    width="19%", height="100%",
  }, MuMeM.GPrompt.visuals.baseContainer)

  -- PlayerManaBar
  MuMeM.GPrompt.visuals.playerManaBar = MuMeM.GPrompt.Widget.PlayerManaBar:new({
    name = "MuMeM.GPrompt.visuals.playerManaBar",
    x="20%", y=0,
    width="19%", height="100%",
  }, MuMeM.GPrompt.visuals.baseContainer)

  -- PlayerMoveBar
  MuMeM.GPrompt.visuals.playerMoveBar = MuMeM.GPrompt.Widget.PlayerMoveBar:new({
    name = "MuMeM.GPrompt.visuals.playerMoveBar",
    x="40%", y=0,
    width="19%", height="100%",
  }, MuMeM.GPrompt.visuals.baseContainer)

  -- OpponentHealthBar
  MuMeM.GPrompt.visuals.opponentHealthBar = MuMeM.GPrompt.Widget.OpponentHealthBar:new({
    name = "MuMeM.GPrompt.visuals.opponentHealthBar",
    x="60%", y=0,
    width="15%", height="100%",
  }, MuMeM.GPrompt.visuals.baseContainer)
  MuMeM.GPrompt.visuals.opponentHealthBar:hide()
  
  -- statusContainer
  MuMeM.GPrompt.visuals.statusContainer = Geyser.Container:new({
    name = "MuMeM.GPrompt.visuals.statusContainer",
    x="76%", y=0,
    width = "24%", height=20,
  }, MuMeM.GPrompt.visuals.baseContainer)

  MuMeM.GPrompt.visuals.statusPosition = Geyser.Label:new({
    name = "MuMeM.GPrompt.visuals.statusPosition",
    x = 0, y = 0,
    width = 20, height = 20,
    color = "black",
  }, MuMeM.GPrompt.visuals.statusContainer) 
    
  MuMeM.GPrompt.visuals.statusRiding = Geyser.Label:new({
    name = "MuMeM.GPrompt.visuals.statusRiding",
    x = 25, y = 0,
    width = 20, height = 20,
    color = "black",
  }, MuMeM.GPrompt.visuals.statusContainer) 

  MuMeM.GPrompt.visuals.statusLight = Geyser.Label:new({
    name = "MuMeM.GPrompt.visuals.statusLight",
    x = 50, y = 0,
    width = 15, height = 20,
    color = "black", fgColor = "white", fontSize = 12,
  }, MuMeM.GPrompt.visuals.statusContainer) 
  
  MuMeM.GPrompt.visuals.statusWeather = Geyser.Label:new({
    name = "MuMeM.GPrompt.visuals.statusWeather",
    x = 65, y = 0,
    width = 15, height = 20,
    color = "black", fgColor = "white", fontSize = 12,
  }, MuMeM.GPrompt.visuals.statusContainer) 
  
  MuMeM.GPrompt.visuals.statusFog = Geyser.Label:new({
    name = "MuMeM.GPrompt.visuals.statusFog",
    x = 80, y = 0,
    width = 15, height = 20,
    color = "black", fgColor = "white", fontSize = 12,
  }, MuMeM.GPrompt.visuals.statusContainer) 
  
  MuMeM.GPrompt.visuals.statusClimb = Geyser.Label:new({
    name = "MuMeM.GPrompt.visuals.statusClimb",
    x = 100, y = 0,
    width = 15, height = 20,
    color = "black", fgColor = "white", fontSize = 12,
  }, MuMeM.GPrompt.visuals.statusContainer) 

  MuMeM.GPrompt.visuals.statusSwim = Geyser.Label:new({
    name = "MuMeM.GPrompt.visuals.statusSwim",
    x = 115, y = 0,
    width = 15, height = 20,
    color = "black", fgColor = "white", fontSize = 12,
  }, MuMeM.GPrompt.visuals.statusContainer) 

  MuMeM.GPrompt.visuals.statusMood = Geyser.Label:new({
    name = "MuMeM.GPrompt.visuals.statusMood",
    x = "100%-90", y = 0,
    width = 20, height = 20,
    color = "black", fgColor = "white", fontSize = 12,
  }, MuMeM.GPrompt.visuals.statusContainer) 
  
  MuMeM.GPrompt.visuals.statusCarrying = Geyser.Label:new({
    name = "MuMeM.GPrompt.visuals.statusCarrying",
    x = "100%-65", y = 0,
    width = 60, height = 20,
    color = "black", fgColor = "white", fontSize = 12,
  }, MuMeM.GPrompt.visuals.statusContainer)   
end

--[[
      NOT USED ANYMORE, REMOVE ????  ???????????????????????????????
--]]
function MuMeM.GPrompt.updatePrompt()
  if not MuMeM.GPrompt.visuals.playerHealthBar then
    return
  end
  
  -- stil required?
  if not MuMeM.Player or not MuMeM.Player.hp() then
    return
  end
  
  MuMeM.GPrompt.visuals.playerHealthBar:setValue(MuMeM.Player.hp(), MuMeM.Player.maxHp())
  MuMeM.GPrompt.visuals.playerManaBar:setValue(MuMeM.Player.sp(), MuMeM.Player.maxSp())
  MuMeM.GPrompt.visuals.playerMoveBar:setValue(MuMeM.Player.mp(), MuMeM.Player.maxMp())
  
  MuMeM.GPrompt.Status.updateRiding(MuMeM.Player.ride())
  MuMeM.GPrompt.Status.updateLight(MuMeM.Player.light())
  MuMeM.GPrompt.Status.updateWeather(MuMeM.Player.weather())
  MuMeM.GPrompt.Status.updateFog(MuMeM.Player.fog())
  MuMeM.GPrompt.Status.updateMood(MuMeM.Player.mood())
  MuMeM.GPrompt.Status.updateClimb(MuMeM.Player.climb())
  MuMeM.GPrompt.Status.updateSwim(MuMeM.Player.swim())
  MuMeM.GPrompt.Status.updateCarrying(MuMeM.Player.carrying())
end

--[[
      WHY not have the "widget" register its own handlers????
      This is more "visible", the widget approach more "generic"
      Maybe leave it like this, as this is a Singleton anyway  
--]]
function MuMeM.GPrompt.handlePlayerEvent(event)
  if event == "MuMeM.Player.Hp" or event == "MuMeM.Player.MaxHp" then
    MuMeM.GPrompt.visuals.playerHealthBar:setValue(MuMeM.Player.hp(), MuMeM.Player.maxHp())
  elseif event == "MuMeM.Player.Sp" or event == "MuMeM.Player.MaxSp" then
    MuMeM.GPrompt.visuals.playerManaBar:setValue(MuMeM.Player.sp(), MuMeM.Player.maxSp())
  elseif event == "MuMeM.Player.Mp" or event == "MuMeM.Player.MaxMp" then
    MuMeM.GPrompt.visuals.playerMoveBar:setValue(MuMeM.Player.mp(), MuMeM.Player.maxMp())
  end
end

function MuMeM.GPrompt.handleOpponentEvent(event)
  MuMeM.GPrompt.visuals.opponentHealthBar:setValue(MuMeM.Player.Opponent.health())
end</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>MuMeM.GPrompt.Widget</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.Widget.Gauge2</name>
					<packageName></packageName>
					<script>MuMeM.GPrompt.Widget.Gauge2 = {
  valueMax    = 100,
  valueNow    = 100,
  name        = "Gauge2",
  back        = nil,
  front       = nil,
  isHidden    = false,
  scaleAdded  = false,
  scaleColor  = "black",
  boundaries  = nil,                -- we might need to use DEEPCOPY here!
  boundaryCalculation = 1,          -- MuMeM.GPrompt.Widget.Gauge2.BOUNDARY_CALCULATION_PERCENTAGE
} 

mumem_inherit("MuMeM.GPrompt.Widget.Gauge2", "MuMeM.GPrompt.Widget.Gauge2")

MuMeM.GPrompt.Widget.Gauge2.healthMap = {
  ["healthy"] = 100,
  ["fine"] = 99,
  ["hurt"] = 70,
  ["wounded"] = 45,
  ["bad"] = 25,
  ["awful"] = 10,
  ["dying"] = 0, 
}

function MuMeM.GPrompt.Widget.Gauge2:new(props, uiParent)
  local me = props or {}
  
  props.valueMax = 100
  props.ValueNow = 100
  
  props.boundaries = props.boundaries or { 100, 70, 45, 25, 10, 0}
  
  setmetatable(me, self)
  self.__index = self
 
  me.bar = Geyser.Container:new({
    name = me.name.."Bar",
    x=me.x, y=me.y,
    width=me.width, height=me.height,
  }, uiParent)

  me.back = Geyser.Label:new({
    name = me.name.."BarBack",
    x="0", y=0,
    width="100%", height="100%",
  }, me.bar)
  
  me.front = Geyser.Label:new({
    name = me.name.."BarFront",
    x="0", y=0,
    width="100%", height="100%",
  }, me.bar)
    
  return me
end

function MuMeM.GPrompt.Widget.Gauge2:show()
  if self.isHidden then
    self.isHidden = false
    self.bar:show()
  end
end

function MuMeM.GPrompt.Widget.Gauge2:hide()
  if not self.isHidden then
    self.isHidden = true
    self.bar:hide()
  end
end

function MuMeM.GPrompt.Widget.Gauge2:addScaleLabel(name, bLow, bHigh)
  local bWidth = bHigh - bLow
      
  local label = Geyser.Label:new({
    name = self.name.."BoundaryIndicator"..name,
    x=f"{bLow}%", y="60%",
    width=f"{bWidth}%+1px", height="40%",
  }, self.bar)
  label:setStyleSheet(f[[
    background-color: rgba(0,0,0,0%);
    border-right: 1px solid {self.scaleColor};
    border-left: 1px solid {self.scaleColor};
  ]])
    
  return label
end

function MuMeM.GPrompt.Widget.Gauge2:raiseScale()
  if self.scaleAdded then
    self.boundaryIndicatorHigh:raise()
    self.boundaryIndicatorLow:raise()
  end
end

function MuMeM.GPrompt.Widget.Gauge2:addScale()
  --[[
    The MUME specific way of doing it. TIGHTLY COUPLED to MUME.
    Advantage: only needs two labels
  --]]
  if self.scaleAdded then
    return
  end

  self.boundaryIndicatorHigh = self:addScaleLabel("High", self.boundaries[3], self.boundaries[2])
  self.boundaryIndicatorLow = self:addScaleLabel("Low", self.boundaries[5], self.boundaries[4])
  
  --MuMeM.Log.debug("MuMeM.GPrompt.Widget.Gauge2:addScale(): scale added")

  self.scaleAdded = true
end

function MuMeM.GPrompt.Widget.Gauge2:setValue(now, max)
  max = max or 100
  
  if now == nil then
    self:hide()
    return
  end
  
  if type(now) == "string" then
    if MuMeM.GPrompt.Widget.Gauge2.healthMap[now] then
      now = MuMeM.GPrompt.Widget.Gauge2.healthMap[now]
    else
      return
    end
  end

  self:addScale()
  self:show()

  if now == self.valueNow and max == self.valueMax then
    return
  end

  if now == nil then
    now = 0
  else
    now = math.max(math.min(now,max),0)
  end
  
  if max &gt; 0 then
    local frontWidth = now * 100 / max
    
    if frontWidth &gt;= 100 then
      frontWidth = 100
    elseif frontWidth &lt;= 0 then
      frontWidth = 0
    end

    self.front:resize(tostring(frontWidth).."%", "100%")
  else
    self.front:resize("0%", "100%")  
  end

  self:raiseScale()

  self.valueNow = now  
  self.valueMax = max
    
  --self.boundaryIndicatorLow:raise()
  --self.boundaryIndicatorHigh:raise()
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.Widget.Gauge3</name>
					<packageName></packageName>
					<script>MuMeM.GPrompt.Widget.Gauge3 = {
  valueMax    = false,
  valueNow    = false,
  name        = "Gauge3",
  back        = nil,
  middle      = nil,
  front       = nil,
  scaleAdded  = false,
  scaleHidden = true,
  scaleColor  = "black",
  boundaries  = nil,                -- we might need to use DEEPCOPY here!
  boundaryCalculation = 1,          -- MuMeM.GPrompt.Widget.Gauge3.BOUNDARY_CALCULATION_PERCENTAGE
} 

mumem_inherit("MuMeM.GPrompt.Widget.Gauge3", "MuMeM.GPrompt.Widget.Gauge3")

MuMeM.GPrompt.Widget.Gauge3.BOUNDARY_CALCULATION_PERCENTAGE = 1
MuMeM.GPrompt.Widget.Gauge3.BOUNDARY_CALCULATION_ABSOLUTE = 2

function MuMeM.GPrompt.Widget.Gauge3:new(props, uiParent)
  local me = props or {}
  
  setmetatable(me, self)
  self.__index = self

  me.bar = Geyser.Container:new({
    name = me.name.."Bar",
    x=me.x, y=me.y,
    width=me.width, height=me.height,
  }, uiParent)

  me.back = Geyser.Label:new({
    name = me.name.."BarBack",
    x="0", y=0,
    width="100%", height="100%",
  }, me.bar)
  
  me.middle = Geyser.Label:new({
    name = me.name.."BarMiddle",
    x="0", y=0,
    width="100%", height="100%",
  }, me.bar)
  
  me.front = Geyser.Label:new({
    name = me.name.."BarFront",
    x="0", y=0,
    width="100%", height="100%",
  }, me.bar)
    
  return me
end

function MuMeM.GPrompt.Widget.Gauge3:addScaleGeneric(max)
  --[[
    The generic way of doing this. Disadvantage: creates many labels
    
    DO NOT USE THIS METHOD IN CURRENT MUME!!! This is for "documentation" only! (and if something changes)
    USE self:addScale() !!!!
  --]]
  
  MuMeM.Log.notice("MuMeM.GPrompt.Widget.Gauge3:addScaleGeneric(): called, which SHOULD BE AVOIDED!")

  if self.scaleAdded then
    return
  end

  self.boundaryIndicator = {}
  for i,boundary in pairs(self.boundaries) do
    if boundary &gt; 0 and boundary &lt; 100 then
      local width = 0
      if self.boundaryCalculation == MuMeM.GPrompt.Widget.Gauge3.BOUNDARY_CALCULATION_PERCENTAGE then
        width = boundary
      elseif self.boundaryCalculation == MuMeM.GPrompt.Widget.Gauge3.BOUNDARY_CALCULATION_ABSOLUTE then
        width = boundary * 100 / max
      end
    
      self.boundaryIndicator[i] = Geyser.Label:new({
        name = self.name.."BoundaryIndicator"..tostring(i),
        x=0, y="60%",
        width=tostring(width).."%", height="100%",
      }, self.bar)
      self.boundaryIndicator[i]:setStyleSheet(f[[
        background-color: rgba(0,0,0,0%);
        border-right: 1px solid {self.scaleColor};
      ]])
    end
  end
  
  self.scaleAdded = true
end

function MuMeM.GPrompt.Widget.Gauge3:addScaleLabel(name, bLow, bHigh)
  local bWidth = bHigh - bLow
    
  local label = Geyser.Label:new({
    name = self.name.."BoundaryIndicator"..name,
    x=f"{bLow}%", y="60%",
    width=f"{bWidth}%+1px", height="40%",
  }, self.bar)
  label:setStyleSheet(f[[
    background-color: rgba(0,0,0,0%);
    border-right: 1px solid {self.scaleColor};
    border-left: 1px solid {self.scaleColor};
  ]])
    
  return label
end

function MuMeM.GPrompt.Widget.Gauge3:updateScaleLabel(label, bLow, bHigh)
  local bWidth = bHigh - bLow
    
  label:move(f"{bLow}%","60%")
  label:resize(f"{bWidth}%+1px","40%")
end


function MuMeM.GPrompt.Widget.Gauge3:showScale()
  if self.scaleHidden and self.scaleAdded then
    self.scaleHidden = false
    
    self.boundaryIndicatorHigh:show()
    self.boundaryIndicatorLow:show()
  end
end

function MuMeM.GPrompt.Widget.Gauge3:hideScale()
  if not self.scaleHidden and self.scaleAdded then
    self.scaleHidden = true
    
    self.boundaryIndicatorHigh:hide()
    self.boundaryIndicatorLow:hide()
  end
end

function MuMeM.GPrompt.Widget.Gauge3:raiseScale()
  if not self.scaleHidden and self.scaleAdded then
    self.boundaryIndicatorHigh:raise()
    self.boundaryIndicatorLow:raise()
  end
end

function MuMeM.GPrompt.Widget.Gauge3:addScale(max)
  --[[
    The MUME specific way of doing it. TIGHTLY COUPLED to MUME.
    Advantage: only needs two labels
  --]]
  if self.scaleAdded then
    return
  end

  if self.boundaryCalculation == MuMeM.GPrompt.Widget.Gauge3.BOUNDARY_CALCULATION_PERCENTAGE then
    self.boundaryIndicatorHigh = self:addScaleLabel("High", self.boundaries[3], self.boundaries[2])
    self.boundaryIndicatorLow = self:addScaleLabel("Low", self.boundaries[5], self.boundaries[4])
  elseif self.boundaryCalculation == MuMeM.GPrompt.Widget.Gauge3.BOUNDARY_CALCULATION_ABSOLUTE then
    self.boundaryIndicatorHigh = self:addScaleLabel("High", self.boundaries[3]*100/max, self.boundaries[2]*100/max)
    self.boundaryIndicatorLow = self:addScaleLabel("Low", self.boundaries[5]*100/max, self.boundaries[4]*100/max)
  end
  
  --MuMeM.Log.debug("MuMeM.GPrompt.Widget.Gauge3:addScale(): scale added")

  self.scaleAdded = true
  self.scaleHidden = false
end

function MuMeM.GPrompt.Widget.Gauge3:updateScale(max)
  --[[
      TODO / NOTE: Hide scale when MAX is 0 (zero). Show when not. Buffer state!
  --]]

  --MuMeM.Log.debug("MuMeM.GPrompt.Widget.Gauge3:updateScale(): called")
  
  if not self.valueMax or max == self.valueMax then
    return
  end
  
  --MuMeM.Log.debug("MuMeM.GPrompt.Widget.Gauge3:updateScale(): updating scale")

  if max == 0 then
    self:hideScale()
  else
    if self.boundaryCalculation == MuMeM.GPrompt.Widget.Gauge3.BOUNDARY_CALCULATION_PERCENTAGE then
      self:updateScaleLabel(self.boundaryIndicatorHigh, self.boundaries[3], self.boundaries[2])
      self:updateScaleLabel(self.boundaryIndicatorLow, self.boundaries[5], self.boundaries[4])
    elseif self.boundaryCalculation == MuMeM.GPrompt.Widget.Gauge3.BOUNDARY_CALCULATION_ABSOLUTE then
      self:updateScaleLabel(self.boundaryIndicatorHigh, self.boundaries[3]*100/max, self.boundaries[2]*100/max)
      self:updateScaleLabel(self.boundaryIndicatorLow, self.boundaries[5]*100/max, self.boundaries[4]*100/max)
    end
    
    self:showScale()
  end

  --MuMeM.Log.debug("MuMeM.GPrompt.Widget.Gauge3:updateScale(): scale updated")
end

function MuMeM.GPrompt.Widget.Gauge3:setValue(now, max)
  if now == nil or max == nil then
    return
  end

  self:addScale(max)

  if now == self.valueNow and max == self.valueMax then
    return
  end

  if now == nil then
    now = 0
  else
    now = math.max(math.min(now,max),0)
  end
  if max == nil then
    max = 0
  end
  
  if max &gt; 0 then
    local middleWidth = now * 100 / max
    local frontWidth = 100
    
    if middleWidth &gt;= 100 then
      middleWidth = 100
      frontWidth = 100
    elseif middleWidth &lt;= 0 then
      middleWidth = 0
      frontWidth = 0
    elseif middleWidth &lt; 100 then
      if self.boundaryCalculation == MuMeM.GPrompt.Widget.Gauge3.BOUNDARY_CALCULATION_PERCENTAGE then
        local i,upper = next(self.boundaries)
        while i and math.floor(max * upper / 100) &gt; now  do
          i,upper = next(self.boundaries,i)
        end
        if i then frontWidth = upper else frontWidth = 0 end
      elseif self.boundaryCalculation == MuMeM.GPrompt.Widget.Gauge3.BOUNDARY_CALCULATION_ABSOLUTE then
        local i,upper = next(self.boundaries)
        while i and upper &gt; now do
          i,upper = next(self.boundaries,i)
        end
        if i then frontWidth = upper * 100 / max else frontWidth = 0 end
      end
  
      if not frontWidth or frontWidth &lt; 0 then
        frontWidth = 0
      end
    end

    self.middle:resize(tostring(middleWidth).."%", "100%")
    self.front:resize(tostring(frontWidth).."%", "100%")
  else
    self.middle:resize("0%", "100%")
    self.front:resize("0%", "100%")  
  end

  self:updateScale(max)
  self:raiseScale()

  self.valueNow = now  
  self.valueMax = max
    
  --self.boundaryIndicatorLow:raise()
  --self.boundaryIndicatorHigh:raise()
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.Widget.PlayerHealthBar</name>
					<packageName></packageName>
					<script>MuMeM.GPrompt.Widget.PlayerHealthBar = {
} 

mumem_inherit("MuMeM.GPrompt.Widget.PlayerHealthBar", "MuMeM.GPrompt.Widget.Gauge3")

function MuMeM.GPrompt.Widget.PlayerHealthBar:new(props, uiParent)
  local props = props or {}
  
  props.boundaries = { 100, 70, 45, 25, 10, 0}

  local me = self.parentClass:new(props, uiParent)

  setmetatable(me, self)
  self.__index = self

  me.back:setColor(255,0,0)
  me.middle:setColor(192,0,0)
  me.front:setColor(128,0,0)
  
  return me
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.Widget.PlayerManaBar</name>
					<packageName></packageName>
					<script>MuMeM.GPrompt.Widget.PlayerManaBar = {
} 

mumem_inherit("MuMeM.GPrompt.Widget.PlayerManaBar", "MuMeM.GPrompt.Widget.Gauge3")

function MuMeM.GPrompt.Widget.PlayerManaBar:new(props, uiParent)
  local props = props or {}

  props.boundaries = { 100, 75, 45, 25, 10, 0}
  props.scaleColor = "gray"  

  local me = self.parentClass:new(props, uiParent)

  setmetatable(me, self)
  self.__index = self

  me.back:setColor(0,0,128)
  me.middle:setColor(0,0,192)
  me.front:setColor(0,0,255)
  
  return me
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.Widget.PlayerMoveBar</name>
					<packageName></packageName>
					<script>MuMeM.GPrompt.Widget.PlayerMoveBar = {
} 

mumem_inherit("MuMeM.GPrompt.Widget.PlayerMoveBar", "MuMeM.GPrompt.Widget.Gauge3")

function MuMeM.GPrompt.Widget.PlayerMoveBar:new(props, uiParent)
  local props = props or {}

  props.boundaries = { 999, 50, 30, 15, 5, 0}
  props.boundaryCalculation = MuMeM.GPrompt.Widget.Gauge3.BOUNDARY_CALCULATION_ABSOLUTE

  local me = self.parentClass:new(props, uiParent)

  setmetatable(me, self)
  self.__index = self

  me.back:setColor(0,255,0)
  me.middle:setColor(0,192,0)
  me.front:setColor(0,128,0)
  
  return me
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.Widget.OpponentHealthBar</name>
					<packageName></packageName>
					<script>MuMeM.GPrompt.Widget.OpponentHealthBar = {
} 

mumem_inherit("MuMeM.GPrompt.Widget.OpponentHealthBar", "MuMeM.GPrompt.Widget.Gauge2")

function MuMeM.GPrompt.Widget.OpponentHealthBar:new(props, uiParent)
  local props = props or {}
  
  --props.boundaries = { 100, 70, 45, 25, 10, 0}

  local me = self.parentClass:new(props, uiParent)

  setmetatable(me, self)
  self.__index = self

  me.back:setColor(255,0,0)
  me.front:setColor(128,0,0)
  
  return me
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>MuMeM.GPrompt.EventHandler</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.EventHandler.catchPlayer</name>
					<packageName></packageName>
					<script>function MuMeM.GPrompt.EventHandler.catchPlayer(event)
  MuMeM.Log.debug("MuMeM.GPrompt.EventHandler.catchChar()")

  MuMeM.GPrompt.handlePlayerEvent(event)
end</script>
					<eventHandlerList>
						<string>MuMeM.Player.Hp</string>
						<string>MuMeM.Player.MaxHp</string>
						<string>MuMeM.Player.Sp</string>
						<string>MuMeM.Player.MaxSp</string>
						<string>MuMeM.Player.Mp</string>
						<string>MuMeM.Player.MaxMp</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.EventHandler.catchOpponent</name>
					<packageName></packageName>
					<script>function MuMeM.GPrompt.EventHandler.catchOpponent(event)
  MuMeM.Log.debug("MuMeM.GPrompt.EventHandler.catchOpponent()")

  MuMeM.GPrompt.handleOpponentEvent(event)
end</script>
					<eventHandlerList>
						<string>MuMeM.Player.Opponent.Health</string>
					</eventHandlerList>
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>MuMeM.GPrompt.Status</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.Status.Position</name>
					<packageName></packageName>
					<script>function MuMeM.GPrompt.Status.Position(event)
  MuMeM.Log.debug("MuMeM.GPrompt.Status.Position()")

  MuMeM.GPrompt.Status.updatePosition(MuMeM.Player.position())
end

function MuMeM.GPrompt.Status.setPosition(icon, bgColor)
  local iconPath = MuMeM.Core.IO.concatPath(MuMeM.GPrompt.getResourceDir(), icon)
  bgColor = bgColor or "darkGrey"
  
  local styleSheet = f[[
    background-image: url("{iconPath}");
    background-repeat: no;
    background-position: center;
    background-color: {bgColor};
    border: 1px solid white;
  ]]
  MuMeM.GPrompt.visuals.statusPosition:setStyleSheet(styleSheet)
end

function MuMeM.GPrompt.Status.updatePosition(position)
  if position == "standing" then
    MuMeM.GPrompt.Status.setPosition("position-standing-18.png")
  elseif position == "sitting" then
    MuMeM.GPrompt.Status.setPosition("position-sitting-18.png")
  elseif position == "resting" then
    MuMeM.GPrompt.Status.setPosition("position-resting-18.png")
  elseif position == "sleeping" then
    MuMeM.GPrompt.Status.setPosition("position-sleeping-18.png")
  elseif position == "incapacitated" then
    MuMeM.GPrompt.Status.setPosition("position-incapacitated-18.png", "red")
  elseif position == "dying" then
    MuMeM.GPrompt.Status.setPosition("position-dying-18.png", "red")
  elseif position == "fighting" then
    MuMeM.GPrompt.Status.setPosition("position-fighting-18.png")
  elseif position == "stunned" then
    MuMeM.GPrompt.Status.setPosition("position-stunned-18.png", "yellow")
  else
    MuMeM.GPrompt.Status.setPosition("position-unknown-18.png")
  end
end</script>
					<eventHandlerList>
						<string>MuMeM.Player.Position</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.Status.Riding</name>
					<packageName></packageName>
					<script>function MuMeM.GPrompt.Status.Riding(event)
  MuMeM.Log.debug("MuMeM.GPrompt.Status.Riding()")

  MuMeM.GPrompt.Status.updateRiding(MuMeM.Player.ride())
end

function MuMeM.GPrompt.Status.setRiding()
  --MuMeM.GPrompt.visuals.statusRiding:setBackgroundImage(MuMeM.GPrompt.getResourceDir().."/affect-riding-18.png","tiled")
  
  local styleSheet = [[
    background-image: url(]]..MuMeM.GPrompt.getResourceDir().."/affect-riding-18.png"..[[);
    background-repeat: no;
    background-position: center;
    background-color: #00FF00;
    border: 1px solid white;
  ]]
  setLabelStyleSheet("MuMeM.GPrompt.visuals.statusRiding", styleSheet, "style")
end

function MuMeM.GPrompt.Status.removeRiding()
  --MuMeM.GPrompt.visuals.statusRiding:setBackgroundImage(MuMeM.GPrompt.getResourceDir().."/affect-riding-18.png","tiled")
  
  local styleSheet = [[
    background-image: url(]]..MuMeM.GPrompt.getResourceDir().."/affect-riding-18.png"..[[);
    background-repeat: no;
    background-position: center;
    background-color: darkGrey;
    border: 1px solid white;
  ]]
  setLabelStyleSheet("MuMeM.GPrompt.visuals.statusRiding", styleSheet, "style")
end

function MuMeM.GPrompt.Status.updateRiding(isRiding)
  if isRiding then
    MuMeM.GPrompt.Status.setRiding()
  else
    MuMeM.GPrompt.Status.removeRiding()
  end
end</script>
					<eventHandlerList>
						<string>MuMeM.Player.Ride</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.Status.Carrying</name>
					<packageName></packageName>
					<script>function MuMeM.GPrompt.Status.Carrying(event)
  MuMeM.Log.debug("MuMeM.GPrompt.Status.Carrying()")

  MuMeM.GPrompt.Status.updateCarrying(MuMeM.Player.carrying())
end

function MuMeM.GPrompt.Status.updateCarrying(carrying)
  MuMeM.GPrompt.visuals.statusCarrying:echo(carrying)
end
</script>
					<eventHandlerList>
						<string>MuMeM.Player.Carrying</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.Status.Light</name>
					<packageName></packageName>
					<script>function MuMeM.GPrompt.Status.Light(event)
  MuMeM.Log.debug("MuMeM.GPrompt.Status.Light()")

  MuMeM.GPrompt.Status.updateLight(MuMeM.Player.light())
end

function MuMeM.GPrompt.Status.updateLight(light)
  MuMeM.GPrompt.visuals.statusLight:echo(light)
end
</script>
					<eventHandlerList>
						<string>MuMeM.Player.Light</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.Status.Weather</name>
					<packageName></packageName>
					<script>function MuMeM.GPrompt.Status.Weather(event)
  MuMeM.Log.debug("MuMeM.GPrompt.Status.Weather()")

  MuMeM.GPrompt.Status.updateWeather(MuMeM.Player.weather())
end

function MuMeM.GPrompt.Status.updateWeather(weather)
  MuMeM.GPrompt.visuals.statusWeather:echo(weather)
end
</script>
					<eventHandlerList>
						<string>MuMeM.Player.Weather</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.Status.Fog</name>
					<packageName></packageName>
					<script>function MuMeM.GPrompt.Status.Fog(event)
  MuMeM.Log.debug("MuMeM.GPrompt.Status.Fog()")

  MuMeM.GPrompt.Status.updateFog(MuMeM.Player.fog())
end

function MuMeM.GPrompt.Status.updateFog(light)
  MuMeM.GPrompt.visuals.statusFog:echo(fog)
end
</script>
					<eventHandlerList>
						<string>MuMeM.Player.Fog</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.Status.Mood</name>
					<packageName></packageName>
					<script>function MuMeM.GPrompt.Status.Mood(event)
  MuMeM.Log.debug("MuMeM.GPrompt.Status.Mood()")

  MuMeM.GPrompt.Status.updateMood(MuMeM.Player.mood())
end

function MuMeM.GPrompt.Status.updateMood(mood)
  local moodAbbr = "m?"
  
  if mood == "wimpy" then
    moodAbbr = "mW"
  elseif mood == "prudent" then
    moodAbbr = "mP"
  elseif mood == "normal" then
    moodAbbr = "mN"
  elseif mood == "brave" then
    moodAbbr = "mB"
  elseif mood == "aggressive" then
    moodAbbr = "mA"
  elseif mood == "berzerk" then
    moodAbbr = "mZ"
  end
    
  MuMeM.GPrompt.visuals.statusMood:echo(moodAbbr)
end
</script>
					<eventHandlerList>
						<string>MuMeM.Player.Mood</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.Status.Climb</name>
					<packageName></packageName>
					<script>function MuMeM.GPrompt.Status.Climb(event)
  MuMeM.Log.debug("MuMeM.GPrompt.Status.Climb()")

  MuMeM.GPrompt.Status.updateClimb(MuMeM.Player.climb())
end

function MuMeM.GPrompt.Status.updateClimb(climb)
  if climb == false then
    MuMeM.GPrompt.visuals.statusClimb:echo(" ")
  else
    MuMeM.GPrompt.visuals.statusClimb:echo(climb)
  end
end
</script>
					<eventHandlerList>
						<string>MuMeM.Player.Climb</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>MuMeM.GPrompt.Status.Swim</name>
					<packageName></packageName>
					<script>function MuMeM.GPrompt.Status.Swim(event)
  MuMeM.Log.debug("MuMeM.GPrompt.Status.Swim()")

  MuMeM.GPrompt.Status.updateSwim(MuMeM.Player.swim())
end

function MuMeM.GPrompt.Status.updateSwim(swim)
  if swim == false then
    MuMeM.GPrompt.visuals.statusSwim:echo(" ")
  else
    MuMeM.GPrompt.visuals.statusSwim:echo("W")
  end
end
</script>
					<eventHandlerList>
						<string>MuMeM.Player.Swim</string>
					</eventHandlerList>
				</Script>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
</MudletPackage>
